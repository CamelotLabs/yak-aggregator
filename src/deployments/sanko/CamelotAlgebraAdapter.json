{
  "address": "0x83BBC9C4C436BD7A4B4A1c5d42B00CaaE113c3b5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoterGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "algebraSwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amountIn",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getQuoteForPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoterGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuoter",
          "type": "address"
        }
      ],
      "name": "setQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "setQuoterGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7c742f09a12706feda44a1e44b1ab83e9bd1789a889ebcf152a33507a88d86e3",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0x83BBC9C4C436BD7A4B4A1c5d42B00CaaE113c3b5",
    "transactionIndex": 1,
    "gasUsed": "2535155",
    "logsBloom": "0x
    "blockHash": "0xdc8f94659a36ac5415ee17937372684d3099cabda567a6a631d061017006687c",
    "transactionHash": "0x7c742f09a12706feda44a1e44b1ab83e9bd1789a889ebcf152a33507a88d86e3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 140,
        "transactionHash": "0x7c742f09a12706feda44a1e44b1ab83e9bd1789a889ebcf152a33507a88d86e3",
        "address": "0x83BBC9C4C436BD7A4B4A1c5d42B00CaaE113c3b5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdc8f94659a36ac5415ee17937372684d3099cabda567a6a631d061017006687c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 140,
        "transactionHash": "0x7c742f09a12706feda44a1e44b1ab83e9bd1789a889ebcf152a33507a88d86e3",
        "address": "0x83BBC9C4C436BD7A4B4A1c5d42B00CaaE113c3b5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdc8f94659a36ac5415ee17937372684d3099cabda567a6a631d061017006687c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 140,
        "transactionHash": "0x7c742f09a12706feda44a1e44b1ab83e9bd1789a889ebcf152a33507a88d86e3",
        "address": "0x83BBC9C4C436BD7A4B4A1c5d42B00CaaE113c3b5",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x00000000000000000000000083bbc9c4c436bd7a4b4a1c5d42b00caae113c3b5"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000061a80",
        "logIndex": 2,
        "blockHash": "0xdc8f94659a36ac5415ee17937372684d3099cabda567a6a631d061017006687c"
      }
    ],
    "blockNumber": 140,
    "cumulativeGasUsed": "2535155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CamelotAlgebraAdapter",
    400000,
    400000,
    "0x36049d5B4aAef6c39Cd4a5bD1A2E1224F07621a2",
    "0xcF8d0723e69c6215523253a190eB9Bc3f68E0FFa"
  ],
  "solcInputHash": "00a3147d99dd90cd5d15591330ca7818",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoterGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"algebraSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amountIn\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getQuoteForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoterGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuoter\",\"type\":\"address\"}],\"name\":\"setQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setQuoterGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/AlgebraAdapter.sol\":\"AlgebraAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256, address) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256, address);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xdcadca798368411e9aa8d27351a38d3b99356dc613ea2e76c3a6a1d7e37155ee\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/AlgebraAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UniswapV3likeAdapter.sol\\\";\\n\\ninterface IAlgebraFactory {\\n    function poolByPair(address, address) external view returns (address);\\n}\\n\\ninterface IAlgebraPool {\\n    function swapSupportingFeeOnInputTokens(\\n        address sender,\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n}\\n\\ncontract AlgebraAdapter is UniswapV3likeAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address immutable FACTORY;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        uint256 _quoterGasLimit,\\n        address _quoter,\\n        address _factory\\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\\n        FACTORY = _factory;\\n    }\\n\\n    function getBestPool(\\n        address token0, \\n        address token1\\n    ) internal view override returns (address mostLiquid) {\\n        return IAlgebraFactory(FACTORY).poolByPair(token0, token1);\\n    }\\n\\n    function algebraSwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata\\n    ) external {\\n        if (amount0Delta > 0) {\\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\\n        } else {\\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\\n        }\\n    }\\n\\n    function _underlyingSwap(\\n        QParams memory params,\\n        bytes memory callbackData\\n    ) internal virtual override returns (uint256) {\\n        address pool = getBestPool(params.tokenIn, params.tokenOut);\\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\\n            params.tokenIn,\\n            params.tokenOut\\n        );\\n        (int256 amount0, int256 amount1) = IAlgebraPool(pool).swapSupportingFeeOnInputTokens(\\n            address(this),\\n            address(this),\\n            zeroForOne,\\n            int256(params.amountIn),\\n            priceLimit,\\n            callbackData\\n        );\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n}\\n\",\"keccak256\":\"0xf7289e139e5f9e6ad6e9780064b118fcca7427e426c842d3d983e3d6cf2937d5\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/UniswapV3likeAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\nstruct QParams {\\n    address tokenIn;\\n    address tokenOut;\\n    int256 amountIn;\\n    uint24 fee;\\n}\\n\\ninterface IUniV3Pool {\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function liquidity() external view returns (uint128);\\n}\\n\\ninterface IUniV3Quoter {\\n    function quoteExactInputSingle(\\n        QParams memory params\\n    ) external view returns (uint256);\\n\\n    function quote(\\n        address,\\n        bool,\\n        int256,\\n        uint160\\n    ) external view returns (int256, int256);\\n}\\n\\nabstract contract UniswapV3likeAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    uint256 public quoterGasLimit;\\n    address public quoter;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _quoter,\\n        uint256 _quoterGasLimit\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        setQuoterGasLimit(_quoterGasLimit);\\n        setQuoter(_quoter);\\n    }\\n\\n    function setQuoter(address newQuoter) public onlyMaintainer {\\n        quoter = newQuoter;\\n    }\\n\\n    function setQuoterGasLimit(uint256 newLimit) public onlyMaintainer {\\n        require(newLimit != 0, \\\"queryGasLimit can't be zero\\\");\\n        quoterGasLimit = newLimit;\\n    }\\n\\n    function getQuoteForPool(\\n        address pool,\\n        int256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256) {\\n        QParams memory params;\\n        params.amountIn = amountIn;\\n        params.tokenIn = tokenIn;\\n        params.tokenOut = tokenOut;\\n        return getQuoteForPool(pool, params);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 quote, address recipient) {\\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\\n        quote = getQuoteForBestPool(params);\\n        recipient = address(this);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\\n        uint256 amountOut = _underlyingSwap(params, new bytes(0));\\n        require(amountOut >= _amountOut, \\\"Insufficient amountOut\\\");\\n        _returnTo(_tokenOut, amountOut, _to);\\n    }\\n\\n    function getQParams(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal pure returns (QParams memory params) {\\n        params = QParams({ \\n            amountIn: int256(amountIn), \\n            tokenIn: tokenIn, \\n            tokenOut: tokenOut, \\n            fee: 0 \\n        });\\n    }\\n\\n    function _underlyingSwap(\\n        QParams memory params, \\n        bytes memory callbackData\\n    ) internal virtual returns (uint256) {\\n        address pool = getBestPool(params.tokenIn, params.tokenOut);\\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\\n            params.tokenIn, \\n            params.tokenOut\\n        );\\n        (int256 amount0, int256 amount1) = IUniV3Pool(pool).swap(\\n            address(this),\\n            zeroForOne,\\n            int256(params.amountIn),\\n            priceLimit,\\n            callbackData\\n        );\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function getQuoteForBestPool(\\n        QParams memory params\\n    ) internal view returns (uint256 quote) {\\n        address bestPool = getBestPool(params.tokenIn, params.tokenOut);\\n        if (bestPool != address(0)) quote = getQuoteForPool(bestPool, params);\\n    }\\n\\n    function getBestPool(\\n        address token0, \\n        address token1\\n    ) internal view virtual returns (address mostLiquid);\\n    \\n    function getQuoteForPool(\\n        address pool, \\n        QParams memory params\\n    ) internal view returns (uint256) {\\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\\n            params.tokenIn, \\n            params.tokenOut\\n        );\\n        (int256 amount0, int256 amount1) = getQuoteSafe(\\n            pool,\\n            zeroForOne,\\n            params.amountIn,\\n            priceLimit\\n        );\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function getQuoteSafe(\\n        address pool, \\n        bool zeroForOne,\\n        int256 amountIn,\\n        uint160 priceLimit\\n    ) internal view returns (int256 amount0, int256 amount1) {\\n        bytes memory calldata_ = abi.encodeWithSignature(\\n            \\\"quote(address,bool,int256,uint160)\\\",\\n            pool,\\n            zeroForOne,\\n            amountIn,\\n            priceLimit\\n        );\\n        (bool success, bytes memory data) = staticCallQuoterRaw(calldata_);\\n        if (success)\\n            (amount0, amount1) = abi.decode(data, (int256, int256));\\n    }\\n\\n    function staticCallQuoterRaw(\\n        bytes memory calldata_\\n    ) internal view returns (bool success, bytes memory data) {\\n        (success, data) = quoter.staticcall{gas: quoterGasLimit}(calldata_);\\n    }\\n\\n    function getZeroOneAndSqrtPriceLimitX96(address tokenIn, address tokenOut)\\n        internal\\n        pure\\n        returns (bool zeroForOne, uint160 sqrtPriceLimitX96)\\n    {\\n        zeroForOne = tokenIn < tokenOut;\\n        sqrtPriceLimitX96 = zeroForOne ? MIN_SQRT_RATIO+1 : MAX_SQRT_RATIO-1;\\n    }\\n}\\n\",\"keccak256\":\"0x7a4bcdeacf97d141911f025a609cf8e41ac6efb19daeeeda31eaeebe764ddc84\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200003e575b620000236200001962000250565b939290926200027a565b6040516129816200094882396080518161218c015261298190f35b62000047600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008b57604052565b6200009562000052565b604052565b90620000b1620000a960405190565b928362000069565b565b602090620000d4906001600160401b038111620000d857601f01601f191690565b0190565b620000e262000052565b601f01601f191690565b60005b838110620001005750506000910152565b8181015183820152602001620000ef565b929190620000b1916200012e6200012883620000b3565b6200009a565b9482865260208601918382011115620000ec576200014a600080fd5b620000ec565b906200016f9181601f8201121562000172575b60208151910162000111565b90565b6200017b600080fd5b62000163565b805b036200004d57565b90505190620000b18262000181565b6001600160a01b031690565b6001600160a01b03811662000183565b90505190620000b182620001a6565b919060a08382031262000241575b8251620001f49082906001600160401b03811162000232575b850162000150565b926200020482602083016200018b565b926200016f6200021884604085016200018b565b93620002288160608601620001b6565b93608001620001b6565b6200023b600080fd5b620001ec565b6200024a600080fd5b620001d3565b62000273620032e98038038062000267816200009a565b928339810190620001c5565b9091929394565b906200028793916200028c565b608052565b92620002a1620002a792620000b195620002ad565b6200093c565b620008a4565b90620002c7620000b192620002c1620002e9565b6200068f565b62000846565b6200016f6200016f6200016f9290565b6200016f6000620002cd565b620000b1336200030381620002fd620002dd565b62000314565b600080516020620032c98339815191525b90620000b19162000396565b905b600052602052604060002090565b6200016f906200019a906001600160a01b031682565b6200016f9062000330565b6200016f9062000346565b90620003229062000351565b9060ff905b9181191691161790565b906200038a6200016f6200039292151590565b825462000368565b9055565b90620003ab620003a7828462000425565b1590565b620003b4575050565b620003da6001620003d4836000620003cd878262000320565b016200035c565b62000377565b3390620004146200040d6200040d7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9262000351565b926200041f60405190565b600090a4565b6200016f916200043d91620003cd6000918262000320565b5460ff1690565b156200044c57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d650000000000000000000000006044820152606490fd5b50634e487b7160e01b600052602260045260246000fd5b9060016002830492168015620004cf575b6020831014620004c557565b620000b162000491565b91607f1691620004b9565b9160001960089290920291821b911b6200036d565b9190620005046200016f6200039293620002cd565b908354620004da565b620000b191600091620004ef565b81811062000527575050565b806200053760006001936200050d565b016200051b565b9190601f81116200054e57505050565b62000562620000b193600052602060002090565b906020601f84018190048301931062000586575b6020601f9091010401906200051b565b909150819062000576565b906200059b815190565b906001600160401b03821162000673575b620005c482620005bd8554620004a8565b856200053e565b602090601f8311600114620006035762000392929160009183620005f7575b5050600019600883021c1916906002021790565b015190503880620005e3565b601f198316916200061985600052602060002090565b9260005b8181106200065a5750916002939185600196941062000640575b50505002019055565b01516000196008601f8516021c1916905538808062000637565b919360206001819287870151815501950192016200061d565b6200067d62000052565b620005ac565b90620000b19162000591565b620000b190620006bd620006a1825190565b620006b5620006b16000620002cd565b9190565b141562000444565b600262000683565b15620006cd57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b620000b1906200074e62000748335b600080516020620032c983398151915262000425565b620006c5565b620007c8565b156200075c57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b90600019906200036d565b90620007c06200016f6200039292620002cd565b8254620007a1565b620007e1620007d86000620002cd565b82141562000754565b620007ee816001620007ac565b620007f93062000351565b62000841620008297ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9262000351565b926200083460405190565b9182918290815260200190565b0390a2565b620000b19062000723565b620000b19062000865620007483362000732565b62000897565b906001600160a01b03906200036d565b906200088f6200016f620003929262000351565b82546200086b565b620000b19060046200087b565b620000b19062000851565b620000b190620008c3620007483362000732565b62000916565b15620008d157565b60405162461bcd60e51b815260206004820152601b60248201527f71756572794761734c696d69742063616e2774206265207a65726f00000000006044820152606490fd5b620000b190620009346200092b6000620002cd565b821415620008c9565b6003620007ac565b620000b190620008af56fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a71461022657806305e3f4dc1461021d57806306fdde0314610214578063248a9ca31461020b5780632bc857a0146102025780632c8958f6146101f95780632f2ff15d146101f057806336568abe146101e75780634ebb7916146101de57806369cff80d146101d55780636b453c1f146101cc5780637ae26773146101c357806384a33e63146101ba5780638980f11f146101b15780638bb9c5bf146101a857806391d148541461019f578063a217fddf14610196578063c6bbd5a71461018d578063d547741f14610184578063d8baf7cf1461017b578063eab90da614610172578063ef99893a14610169578063f2fde38b14610160578063f35c4d4514610157578063f87422541461014e5763f912c64b0361000e57610149610cf6565b61000e565b50610149610cae565b50610149610c87565b50610149610c60565b50610149610c22565b50610149610b8c565b50610149610b0b565b50610149610ae3565b50610149610a92565b50610149610a30565b506101496109e6565b506101496109bf565b50610149610997565b5061014961093f565b50610149610917565b506101496108c8565b50610149610881565b5061014961084e565b50610149610826565b506101496107fe565b5061014961079d565b506101496106c7565b5061014961067b565b50610149610628565b50610149610371565b50610149610292565b600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361022f57565b9050359061026c82610234565b565b90610282916020818303126102855761025f565b90565b61028d600080fd5b61025f565b50346102c5575b6102c16102af6102aa36600461026e565b610d1d565b60405191829182901515815260200190565b0390f35b6102cd600080fd5b610299565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610258565b9050359061026c826102eb565b80610258565b9050359061026c82610314565b608081830312610364575b61033c8282610307565b9261028261034d846020850161031a565b9361035b8160408601610307565b93606001610307565b61036c600080fd5b610332565b50346103a3575b6102c1610392610389366004610327565b92919091611d87565b6040515b9182918290815260200190565b6103ab600080fd5b610378565b60009103126103bb57565b61026c600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b9060016002830492168015610446575b602083101461043e57565b61026c6103f3565b91607f1691610433565b8054600093929161046d61046383610423565b8085529360200190565b91600181169081156104bf575060011461048657505050565b6104999192939450600052602060002090565b916000925b8184106104ab5750500190565b80548484015260209093019260010161049e565b92949550505060ff1916825215156020020190565b9061028291610450565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761057657604052565b61057e610506565b604052565b9061026c61059d9261059460405190565b938480926104d4565b0383610536565b6102829115610583576105b56103c3565b610583565b610282600060026105a4565b60005b8381106105d95750506000910152565b81810151838201526020016105c9565b61060a6104de602093610613936105fe815190565b80835293849260200190565b958691016105c6565b0190565b6020808252610282929101906105e9565b5034610651575b61063a3660046103b0565b6102c16106456105ba565b60405191829182610617565b610659600080fd5b61062f565b90610282916020818303121561031a57610676600080fd5b61031a565b5034610698575b6102c161039261069336600461065e565b610e4d565b6106a0600080fd5b610682565b610282916008021c81565b9061028291546106a5565b610282600060036106b0565b50346106e4575b6106d93660046103b0565b6102c16103926106bb565b6106ec600080fd5b6106ce565b909182601f8301121561072d575b602082359267ffffffffffffffff8411610720575b0192828401116103bb57565b610728600080fd5b610714565b610735600080fd5b6106ff565b9091606082840312610790575b61077f610754848461031a565b93610762816020860161031a565b9360408101359067ffffffffffffffff8211610783575b016106f1565b9091565b61078b600080fd5b610779565b610798600080fd5b610747565b50346107c0575b6107bb6107b236600461073a565b92919091611b1a565b604051005b6107c8600080fd5b6107a4565b9190610282906040848203126107f1575b6107e8818561031a565b93602001610307565b6107f9600080fd5b6107de565b5034610819575b6107bb6108133660046107cd565b90610e8c565b610821600080fd5b610805565b5034610841575b6107bb61083b3660046107cd565b90611094565b610849600080fd5b61082d565b5034610868575b6107bb61086336600461065e565b61183f565b610870600080fd5b610855565b610282600060016106b0565b503461089e575b6108933660046103b0565b6102c1610392610875565b6108a6600080fd5b610888565b906102829160208183031215610307576108c3600080fd5b610307565b50346108e2575b6107bb6108dd3660046108ab565b6125e3565b6108ea600080fd5b6108cf565b91906102829060408482031261090a575b6107e88185610307565b610912600080fd5b610900565b5034610932575b6107bb61092c3660046108ef565b906116eb565b61093a600080fd5b61091e565b5034610959575b6107bb61095436600461065e565b6116b3565b610961600080fd5b610946565b91906102829060408482031261098a575b6109818185610307565b9360200161031a565b610992600080fd5b610977565b50346109b2575b6107bb6109ac366004610966565b906117ad565b6109ba600080fd5b61099e565b50346109d9575b6107bb6109d436600461065e565b612637565b6109e1600080fd5b6109c6565b5034610a04575b6102c16102af6109fe3660046107cd565b90610e1d565b610a0c600080fd5b6109ed565b6102826102826102829290565b6102826000610a11565b610282610a1e565b5034610a4d575b610a423660046103b0565b6102c1610392610a28565b610a55600080fd5b610a37565b610282916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906102829154610a5a565b61028260006004610a7b565b5034610ad6575b610aa43660046103b0565b6102c1610aaf610a86565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b610ade600080fd5b610a99565b5034610afe575b6107bb610af83660046107cd565b90611018565b610b06600080fd5b610aea565b5034610b25575b6107bb610b203660046108ab565b61260d565b610b2d600080fd5b610b12565b919060a083820312610b7f575b610b49818461031a565b92610b57826020830161031a565b92610282610b688460408501610307565b93610b768160608601610307565b93608001610307565b610b87600080fd5b610b3f565b5034610baa575b6107bb610ba1366004610b32565b939290926118e9565b610bb2600080fd5b610b93565b9091606082840312610be8575b610282610bd1848461031a565b93610bdf8160208601610307565b93604001610307565b610bf0600080fd5b610bc4565b90815260408101929161026c916020905b019073ffffffffffffffffffffffffffffffffffffffff169052565b5034610c53575b610c3d610c37366004610bb7565b91611848565b906102c1610c4a60405190565b92839283610bf5565b610c5b600080fd5b610c29565b5034610c7a575b6107bb610c753660046108ab565b612641565b610c82600080fd5b610c67565b5034610ca1575b6107bb610c9c36600461065e565b611d49565b610ca9600080fd5b610c8e565b5034610ce9575b610cc03660046103b0565b6102c17f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610392565b610cf1600080fd5b610cb5565b5034610d10575b6107bb610d0b3660046108ab565b611cbf565b610d18600080fd5b610cfd565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610d6d575090565b61028291507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b6102d26102826102829273ffffffffffffffffffffffffffffffffffffffff1690565b61028290610dc9565b61028290610dec565b90610dbb90610df5565b610282905b60ff1690565b6102829054610e08565b61028291610e3791610e3160009182610db9565b01610dfe565b610e13565b6102829081565b6102829054610e3c565b6001610e6661028292610e5e600090565b506000610db9565b01610e43565b9061026c91610e82610e7d82610e4d565b610e96565b9061026c916110f1565b9061026c91610e6c565b61026c903390610f5a565b6102826102826102829273ffffffffffffffffffffffffffffffffffffffff1690565b61028290610a11565b610a11565b610613610eea92602092610ee4815190565b94859290565b938491016105c6565b610f316102829392610f2b610f2b937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b90610ed2565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b90610f6c610f688284610e1d565b1590565b610f74575050565b610ff991610282610fad610fa7610f8d610fe195610dec565b610fa1610f9b601492610ea1565b91610a11565b906113b8565b92610ec4565b610fbc602091610fa183610a11565b92610fd5610fc960405190565b94859384019283610ef3565b90810382520382610536565b60405191829162461bcd60e51b835260048301610617565b0390fd5b9061026c9161100e610e7d82610e4d565b9061026c91611167565b9061026c91610ffd565b1561102957565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b61026c91906110c26110a5336102d2565b73ffffffffffffffffffffffffffffffffffffffff841614611022565b611167565b9060ff905b9181191691161790565b906110e66102826110ed92151590565b82546110c7565b9055565b906110ff610f688284610e1d565b611107575050565b611121600161111c836000610e318782610db9565b6110d6565b33906111576111516111517f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610df5565b9261116160405190565b600090a4565b906111728183610e1d565b61117a575050565b61118e600061111c8382610e318782610db9565b33906111576111516111517ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561120157565b61026c6111be565b9190820180921161120157565b9061026c61122360405190565b9283610536565b61061360209167ffffffffffffffff811161126757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b6104de610506565b9061128161127c8361122a565b611216565b918252565b369037565b9061026c6112a161129b8461126f565b9361122a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160208401611286565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600160209161130a845190565b811015611318575b02010190565b6113206112cc565b611312565b6001908015611332570390565b61133a6111be565b0390565b610e0d6102826102829290565b6102829061136361135f6102829460ff1690565b9190565b901c90565b1561136f57565b60405162461bcd60e51b815280610ff9600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b91906002906113e96113e46113d5836113d086610a11565b6111ee565b6113de85610a11565b90611209565b61128b565b9160009160306114016113fb85610a11565b866112fc565b5361145561144c7f7800000000000000000000000000000000000000000000000000000000000000926113d06001958695881a61144661144088610a11565b8b6112fc565b53610a11565b6113de83610a11565b915b611478575b5050610282929361147261135f61028293610a11565b14611368565b909461148382610a11565b86111561150f576114fc6114f683926114d96114bc7f303132333435363738396162636465660000000000000000000000000000000090565b6114c6600f610a11565b83166010811015611502575b1a60f81b90565b861a6114e58a896112fc565b536114f0600461133e565b9061134b565b96611325565b91611457565b61150a6112cc565b6114d2565b9461145c565b1561151c57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b61026c906115be6115b9335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610e1d565b611515565b61164e565b156115ca57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906110cc565b906116476102826110ed92610a11565b825461160f565b61166361165b6000610a11565b8214156115c3565b61166e816001611637565b61167730610df5565b6116ae6116a47ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610df5565b9261039660405190565b0390a2565b61026c90611587565b61026c91906116cd6115b933611593565b906116da61026c92610df5565b906116e56000610a11565b91612756565b9061026c916116bc565b61026c91906117066115b933611593565b611757565b1561171257565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61176c6117646000610a11565b835b1161170b565b6117808261177983610df5565b339061269c565b6116ae6116a47f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610df5565b9061026c916116f5565b61026c906117c76115b933611593565b6117ef565b506040513d6000823e3d90fd5b6102d26102826102829290565b610282906117d9565b611780600061180661180082610a11565b84611766565b808080808661181c61181733610df5565b610df5565b828215611836575bf16117e6576118316117cc565b6117e6565b506108fc611824565b61026c906117b7565b61077f929190611dec565b9050519061026c82610314565b90610282916020818303121561185357611878600080fd5b611853565b9190820391821161120157565b1561189157565b60405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606490fd5b90815260408101929161026c9160200152565b936119ba6119c2916118fd61181787610df5565b906370a082319161190d60405190565b926119188160e01b90565b845273ffffffffffffffffffffffffffffffffffffffff831660048501528888888c602088602481895afa978815611a87575b600098611a4b575b50866020969461197c946119a099979461196c94611e5e565b6040519586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa908115611a3e575b600091611a10575b5061187d565b82111561188a565b6119f56119ef7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610df5565b93610df5565b93611a0b611a0260405190565b928392836118d6565b0390a3565b611a31915060203d8111611a37575b611a298183610536565b810190611860565b386119b4565b503d611a1f565b611a466117cc565b6119ac565b61196c919850966020969461197c94829794611a766119a09b8b3d8111611a3757611a298183610536565b9b9450949799509450949650611953565b611a8f6117cc565b61194b565b9050519061026c826102eb565b906102829160208183031215611a9457611ab9600080fd5b611a94565b801515610258565b9050519061026c82611abe565b906102829160208183031215611ac657611aeb600080fd5b611ac6565b73ffffffffffffffffffffffffffffffffffffffff909116815260408101929161026c9160200152565b925060009150611b2982610a11565b831315611c3d57506020903390611baf611b86611817611b6786611b4f61181788610df5565b630dfe168190611b5e60405190565b93849260e01b90565b825260049082905afa908115611c30575b600091611c03575b50610df5565b91611b9563a9059cbb96610a11565b95611bba611ba260405190565b9788968795869460e01b90565b845260048401611af0565b03925af18015611bf6575b611bcc5750565b611bec9060203d8111611bef575b611be48183610536565b810190611ad3565b50565b503d611bda565b611bfe6117cc565b611bc5565b611c239150873d8111611c29575b611c1b8183610536565b810190611aa1565b38611b80565b503d611c11565b611c386117cc565b611b78565b91506020903390611baf611b86611817611b6786611c5d61181788610df5565b63d21220a790611b5e60405190565b61026c90611c7c6115b933611593565b611cb4565b9073ffffffffffffffffffffffffffffffffffffffff906110cc565b90611cad6102826110ed92610df5565b8254611c81565b61026c906004611c9d565b61026c90611c6c565b61026c90611cd86115b933611593565b611d29565b15611ce457565b60405162461bcd60e51b815260206004820152601b60248201527f71756572794761734c696d69742063616e2774206265207a65726f00000000006044820152606490fd5b61026c90611d42611d3a6000610a11565b821415611cdd565b6003611637565b61026c90611cc8565b6102826080611216565b611d64611d52565b60008082526020820181905260408201819052606082015290565b610282611d5c565b909161028293611dca611de792611d9c600090565b50611db0611da8611d7f565b966040880152565b73ffffffffffffffffffffffffffffffffffffffff168552565b73ffffffffffffffffffffffffffffffffffffffff166020840152565b612327565b91611e0391611e0893611dfd600090565b5061222d565b6122ae565b9061028230610df5565b15611e1957565b60405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616d6f756e744f7574000000000000000000006044820152606490fd5b611e8f611e8b611e788661026c98979596611e979561222d565b611e856113e46000610a11565b90611ff2565b9390565b831015611e12565b91611ea130610df5565b611ed673ffffffffffffffffffffffffffffffffffffffff83165b9173ffffffffffffffffffffffffffffffffffffffff1690565b03611ee057505050565b611eec61026c93610df5565b61269c565b919061028290604084820312611f15575b611f0c8185611853565b93602001611853565b611f1d600080fd5b611f02565b926102829694611f86611f8d92611f7d611faa96999599611f6060c08a019b60008b019073ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff166020890152565b15156040870152565b6060850152565b73ffffffffffffffffffffffffffffffffffffffff166080830152565b60a08184039101526105e9565b7f80000000000000000000000000000000000000000000000000000000000000008114611fe5575b60000390565b611fed6111be565b611fdf565b9060406120a992612001600090565b509182906120d360006118176120df61209f612031875173ffffffffffffffffffffffffffffffffffffffff1690565b61209961207e61206360208b019361205d855173ffffffffffffffffffffffffffffffffffffffff1690565b90612181565b9b5173ffffffffffffffffffffffffffffffffffffffff1690565b915173ffffffffffffffffffffffffffffffffffffffff1690565b9061257b565b92819a9199610df5565b946371334694926120c3896120bd30610df5565b99015190565b6040519b8c998a98899760e01b90565b87528060048801611f22565b03925af1908115612148575b6000928392612116575b50156121085750610ecd61028291611fb7565b6102829150610ecd90611fb7565b90925061213a915060403d8111612141575b6121328183610536565b810190611ef1565b91386120f5565b503d612128565b6121506117cc565b6120eb565b73ffffffffffffffffffffffffffffffffffffffff909116815260408101929161026c91602090610c06565b6020906121b06118177f0000000000000000000000000000000000000000000000000000000000000000610df5565b6121d163d9a641e16121dc6121c460405190565b9687958694859460e01b90565b845260048401612155565b03915afa90811561220b575b6000916121f3575090565b610282915060203d8111611c2957611c1b8183610536565b6122136117cc565b6121e8565b6122256102826102829290565b62ffffff1690565b610282919261229d61224a6122a293612244611d7f565b50610a11565b61229660009361227961225b611d52565b73ffffffffffffffffffffffffffffffffffffffff909916868a0152565b73ffffffffffffffffffffffffffffffffffffffff166020880152565b6040860152565b612218565b62ffffff166060830152565b906000916122f36122d3825173ffffffffffffffffffffffffffffffffffffffff1690565b602083015173ffffffffffffffffffffffffffffffffffffffff1661205d565b6123006102d260006117e6565b73ffffffffffffffffffffffffffffffffffffffff821603612320575050565b6102829293505b604061238b9161238593612339600090565b5061237b61235b825173ffffffffffffffffffffffffffffffffffffffff1690565b602083015173ffffffffffffffffffffffffffffffffffffffff16612099565b9381969192015190565b916123e5565b91156121085750610ecd61028291611fb7565b610c0661026c946123de6060949897956123d5608086019a600087019073ffffffffffffffffffffffffffffffffffffffff169052565b15156020850152565b6040830152565b9061244961244e929593949561243a6123fc600090565b97889761240860405190565b9586946004602087017f90405d360000000000000000000000000000000000000000000000000000000081520161239e565b60208201810382520382610536565b6124a5565b906124565750565b90925061077f91506020612468825190565b818301019101611ef1565b610282906102d2565b6102829054612473565b3d156124a0576124953d61126f565b903d6000602084013e565b606090565b600080916124b1600090565b506124bc600461247c565b906124c76003610e43565b9160208201915192fa61077f612486565b61028273fffd8963efd1fc6a506488495d951d5263988d266117d9565b73ffffffffffffffffffffffffffffffffffffffff908116911690039073ffffffffffffffffffffffffffffffffffffffff821161120157565b6102826401000276a36117d9565b61255c9073ffffffffffffffffffffffffffffffffffffffff16611ebc565b019073ffffffffffffffffffffffffffffffffffffffff821161120157565b90611ebc6125a59161258b600090565b5073ffffffffffffffffffffffffffffffffffffffff1690565b109081156125c8576102826125b861252f565b6125c260016117d9565b9061253d565b6102826125d36124d8565b6125dd60016117d9565b906124f5565b61026c907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610e8c565b61026c907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95611018565b61026c903361083b565b61026c903390612659612652610a1e565b9182610e8c565b611094565b6126776126716102829263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6126df6004926126d061026c956126b663a9059cbb61265e565b926126c060405190565b9687946020860190815201611af0565b60208201810382520383610536565b6128ea565b156126eb57565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b6126df6004926126d061026c9561278360008461277282610a11565b8414918215612790575b50506126e4565b6126b663095ea7b361265e565b909150602061279e89610df5565b63dd62ed3e906121d16127b030610df5565b926127ca6127bd60405190565b9788958694859460e01b90565b03915afa91821561281b575b6000926127f3575b5061135f6127eb91610a11565b14843861277c565b6127eb91925061281361135f9160203d8111611a3757611a298183610536565b9291506127de565b6128236117cc565b6127d6565b1561282f57565b60405162461bcd60e51b815280610ff9600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b1561287f57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b6000916128f78392610df5565b9082602082019151925af161291361290d612486565b91612828565b805161292261135f6000610a11565b1161292a5750565b61294681602061293b61026c945190565b818301019101611ad3565b61287856fea2646970667358221220f10db3fd84524ff87bb1c9b0e887c6e663d516352f3972f21ae66c230346ed9c64736f6c63430008110033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a71461022657806305e3f4dc1461021d57806306fdde0314610214578063248a9ca31461020b5780632bc857a0146102025780632c8958f6146101f95780632f2ff15d146101f057806336568abe146101e75780634ebb7916146101de57806369cff80d146101d55780636b453c1f146101cc5780637ae26773146101c357806384a33e63146101ba5780638980f11f146101b15780638bb9c5bf146101a857806391d148541461019f578063a217fddf14610196578063c6bbd5a71461018d578063d547741f14610184578063d8baf7cf1461017b578063eab90da614610172578063ef99893a14610169578063f2fde38b14610160578063f35c4d4514610157578063f87422541461014e5763f912c64b0361000e57610149610cf6565b61000e565b50610149610cae565b50610149610c87565b50610149610c60565b50610149610c22565b50610149610b8c565b50610149610b0b565b50610149610ae3565b50610149610a92565b50610149610a30565b506101496109e6565b506101496109bf565b50610149610997565b5061014961093f565b50610149610917565b506101496108c8565b50610149610881565b5061014961084e565b50610149610826565b506101496107fe565b5061014961079d565b506101496106c7565b5061014961067b565b50610149610628565b50610149610371565b50610149610292565b600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361022f57565b9050359061026c82610234565b565b90610282916020818303126102855761025f565b90565b61028d600080fd5b61025f565b50346102c5575b6102c16102af6102aa36600461026e565b610d1d565b60405191829182901515815260200190565b0390f35b6102cd600080fd5b610299565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610258565b9050359061026c826102eb565b80610258565b9050359061026c82610314565b608081830312610364575b61033c8282610307565b9261028261034d846020850161031a565b9361035b8160408601610307565b93606001610307565b61036c600080fd5b610332565b50346103a3575b6102c1610392610389366004610327565b92919091611d87565b6040515b9182918290815260200190565b6103ab600080fd5b610378565b60009103126103bb57565b61026c600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b9060016002830492168015610446575b602083101461043e57565b61026c6103f3565b91607f1691610433565b8054600093929161046d61046383610423565b8085529360200190565b91600181169081156104bf575060011461048657505050565b6104999192939450600052602060002090565b916000925b8184106104ab5750500190565b80548484015260209093019260010161049e565b92949550505060ff1916825215156020020190565b9061028291610450565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761057657604052565b61057e610506565b604052565b9061026c61059d9261059460405190565b938480926104d4565b0383610536565b6102829115610583576105b56103c3565b610583565b610282600060026105a4565b60005b8381106105d95750506000910152565b81810151838201526020016105c9565b61060a6104de602093610613936105fe815190565b80835293849260200190565b958691016105c6565b0190565b6020808252610282929101906105e9565b5034610651575b61063a3660046103b0565b6102c16106456105ba565b60405191829182610617565b610659600080fd5b61062f565b90610282916020818303121561031a57610676600080fd5b61031a565b5034610698575b6102c161039261069336600461065e565b610e4d565b6106a0600080fd5b610682565b610282916008021c81565b9061028291546106a5565b610282600060036106b0565b50346106e4575b6106d93660046103b0565b6102c16103926106bb565b6106ec600080fd5b6106ce565b909182601f8301121561072d575b602082359267ffffffffffffffff8411610720575b0192828401116103bb57565b610728600080fd5b610714565b610735600080fd5b6106ff565b9091606082840312610790575b61077f610754848461031a565b93610762816020860161031a565b9360408101359067ffffffffffffffff8211610783575b016106f1565b9091565b61078b600080fd5b610779565b610798600080fd5b610747565b50346107c0575b6107bb6107b236600461073a565b92919091611b1a565b604051005b6107c8600080fd5b6107a4565b9190610282906040848203126107f1575b6107e8818561031a565b93602001610307565b6107f9600080fd5b6107de565b5034610819575b6107bb6108133660046107cd565b90610e8c565b610821600080fd5b610805565b5034610841575b6107bb61083b3660046107cd565b90611094565b610849600080fd5b61082d565b5034610868575b6107bb61086336600461065e565b61183f565b610870600080fd5b610855565b610282600060016106b0565b503461089e575b6108933660046103b0565b6102c1610392610875565b6108a6600080fd5b610888565b906102829160208183031215610307576108c3600080fd5b610307565b50346108e2575b6107bb6108dd3660046108ab565b6125e3565b6108ea600080fd5b6108cf565b91906102829060408482031261090a575b6107e88185610307565b610912600080fd5b610900565b5034610932575b6107bb61092c3660046108ef565b906116eb565b61093a600080fd5b61091e565b5034610959575b6107bb61095436600461065e565b6116b3565b610961600080fd5b610946565b91906102829060408482031261098a575b6109818185610307565b9360200161031a565b610992600080fd5b610977565b50346109b2575b6107bb6109ac366004610966565b906117ad565b6109ba600080fd5b61099e565b50346109d9575b6107bb6109d436600461065e565b612637565b6109e1600080fd5b6109c6565b5034610a04575b6102c16102af6109fe3660046107cd565b90610e1d565b610a0c600080fd5b6109ed565b6102826102826102829290565b6102826000610a11565b610282610a1e565b5034610a4d575b610a423660046103b0565b6102c1610392610a28565b610a55600080fd5b610a37565b610282916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b906102829154610a5a565b61028260006004610a7b565b5034610ad6575b610aa43660046103b0565b6102c1610aaf610a86565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b610ade600080fd5b610a99565b5034610afe575b6107bb610af83660046107cd565b90611018565b610b06600080fd5b610aea565b5034610b25575b6107bb610b203660046108ab565b61260d565b610b2d600080fd5b610b12565b919060a083820312610b7f575b610b49818461031a565b92610b57826020830161031a565b92610282610b688460408501610307565b93610b768160608601610307565b93608001610307565b610b87600080fd5b610b3f565b5034610baa575b6107bb610ba1366004610b32565b939290926118e9565b610bb2600080fd5b610b93565b9091606082840312610be8575b610282610bd1848461031a565b93610bdf8160208601610307565b93604001610307565b610bf0600080fd5b610bc4565b90815260408101929161026c916020905b019073ffffffffffffffffffffffffffffffffffffffff169052565b5034610c53575b610c3d610c37366004610bb7565b91611848565b906102c1610c4a60405190565b92839283610bf5565b610c5b600080fd5b610c29565b5034610c7a575b6107bb610c753660046108ab565b612641565b610c82600080fd5b610c67565b5034610ca1575b6107bb610c9c36600461065e565b611d49565b610ca9600080fd5b610c8e565b5034610ce9575b610cc03660046103b0565b6102c17f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610392565b610cf1600080fd5b610cb5565b5034610d10575b6107bb610d0b3660046108ab565b611cbf565b610d18600080fd5b610cfd565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610d6d575090565b61028291507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b6102d26102826102829273ffffffffffffffffffffffffffffffffffffffff1690565b61028290610dc9565b61028290610dec565b90610dbb90610df5565b610282905b60ff1690565b6102829054610e08565b61028291610e3791610e3160009182610db9565b01610dfe565b610e13565b6102829081565b6102829054610e3c565b6001610e6661028292610e5e600090565b506000610db9565b01610e43565b9061026c91610e82610e7d82610e4d565b610e96565b9061026c916110f1565b9061026c91610e6c565b61026c903390610f5a565b6102826102826102829273ffffffffffffffffffffffffffffffffffffffff1690565b61028290610a11565b610a11565b610613610eea92602092610ee4815190565b94859290565b938491016105c6565b610f316102829392610f2b610f2b937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b90610ed2565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b90610f6c610f688284610e1d565b1590565b610f74575050565b610ff991610282610fad610fa7610f8d610fe195610dec565b610fa1610f9b601492610ea1565b91610a11565b906113b8565b92610ec4565b610fbc602091610fa183610a11565b92610fd5610fc960405190565b94859384019283610ef3565b90810382520382610536565b60405191829162461bcd60e51b835260048301610617565b0390fd5b9061026c9161100e610e7d82610e4d565b9061026c91611167565b9061026c91610ffd565b1561102957565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b61026c91906110c26110a5336102d2565b73ffffffffffffffffffffffffffffffffffffffff841614611022565b611167565b9060ff905b9181191691161790565b906110e66102826110ed92151590565b82546110c7565b9055565b906110ff610f688284610e1d565b611107575050565b611121600161111c836000610e318782610db9565b6110d6565b33906111576111516111517f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610df5565b9261116160405190565b600090a4565b906111728183610e1d565b61117a575050565b61118e600061111c8382610e318782610db9565b33906111576111516111517ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561120157565b61026c6111be565b9190820180921161120157565b9061026c61122360405190565b9283610536565b61061360209167ffffffffffffffff811161126757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b6104de610506565b9061128161127c8361122a565b611216565b918252565b369037565b9061026c6112a161129b8461126f565b9361122a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160208401611286565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600160209161130a845190565b811015611318575b02010190565b6113206112cc565b611312565b6001908015611332570390565b61133a6111be565b0390565b610e0d6102826102829290565b6102829061136361135f6102829460ff1690565b9190565b901c90565b1561136f57565b60405162461bcd60e51b815280610ff9600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b91906002906113e96113e46113d5836113d086610a11565b6111ee565b6113de85610a11565b90611209565b61128b565b9160009160306114016113fb85610a11565b866112fc565b5361145561144c7f7800000000000000000000000000000000000000000000000000000000000000926113d06001958695881a61144661144088610a11565b8b6112fc565b53610a11565b6113de83610a11565b915b611478575b5050610282929361147261135f61028293610a11565b14611368565b909461148382610a11565b86111561150f576114fc6114f683926114d96114bc7f303132333435363738396162636465660000000000000000000000000000000090565b6114c6600f610a11565b83166010811015611502575b1a60f81b90565b861a6114e58a896112fc565b536114f0600461133e565b9061134b565b96611325565b91611457565b61150a6112cc565b6114d2565b9461145c565b1561151c57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b61026c906115be6115b9335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610e1d565b611515565b61164e565b156115ca57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906110cc565b906116476102826110ed92610a11565b825461160f565b61166361165b6000610a11565b8214156115c3565b61166e816001611637565b61167730610df5565b6116ae6116a47ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610df5565b9261039660405190565b0390a2565b61026c90611587565b61026c91906116cd6115b933611593565b906116da61026c92610df5565b906116e56000610a11565b91612756565b9061026c916116bc565b61026c91906117066115b933611593565b611757565b1561171257565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61176c6117646000610a11565b835b1161170b565b6117808261177983610df5565b339061269c565b6116ae6116a47f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610df5565b9061026c916116f5565b61026c906117c76115b933611593565b6117ef565b506040513d6000823e3d90fd5b6102d26102826102829290565b610282906117d9565b611780600061180661180082610a11565b84611766565b808080808661181c61181733610df5565b610df5565b828215611836575bf16117e6576118316117cc565b6117e6565b506108fc611824565b61026c906117b7565b61077f929190611dec565b9050519061026c82610314565b90610282916020818303121561185357611878600080fd5b611853565b9190820391821161120157565b1561189157565b60405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606490fd5b90815260408101929161026c9160200152565b936119ba6119c2916118fd61181787610df5565b906370a082319161190d60405190565b926119188160e01b90565b845273ffffffffffffffffffffffffffffffffffffffff831660048501528888888c602088602481895afa978815611a87575b600098611a4b575b50866020969461197c946119a099979461196c94611e5e565b6040519586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa908115611a3e575b600091611a10575b5061187d565b82111561188a565b6119f56119ef7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610df5565b93610df5565b93611a0b611a0260405190565b928392836118d6565b0390a3565b611a31915060203d8111611a37575b611a298183610536565b810190611860565b386119b4565b503d611a1f565b611a466117cc565b6119ac565b61196c919850966020969461197c94829794611a766119a09b8b3d8111611a3757611a298183610536565b9b9450949799509450949650611953565b611a8f6117cc565b61194b565b9050519061026c826102eb565b906102829160208183031215611a9457611ab9600080fd5b611a94565b801515610258565b9050519061026c82611abe565b906102829160208183031215611ac657611aeb600080fd5b611ac6565b73ffffffffffffffffffffffffffffffffffffffff909116815260408101929161026c9160200152565b925060009150611b2982610a11565b831315611c3d57506020903390611baf611b86611817611b6786611b4f61181788610df5565b630dfe168190611b5e60405190565b93849260e01b90565b825260049082905afa908115611c30575b600091611c03575b50610df5565b91611b9563a9059cbb96610a11565b95611bba611ba260405190565b9788968795869460e01b90565b845260048401611af0565b03925af18015611bf6575b611bcc5750565b611bec9060203d8111611bef575b611be48183610536565b810190611ad3565b50565b503d611bda565b611bfe6117cc565b611bc5565b611c239150873d8111611c29575b611c1b8183610536565b810190611aa1565b38611b80565b503d611c11565b611c386117cc565b611b78565b91506020903390611baf611b86611817611b6786611c5d61181788610df5565b63d21220a790611b5e60405190565b61026c90611c7c6115b933611593565b611cb4565b9073ffffffffffffffffffffffffffffffffffffffff906110cc565b90611cad6102826110ed92610df5565b8254611c81565b61026c906004611c9d565b61026c90611c6c565b61026c90611cd86115b933611593565b611d29565b15611ce457565b60405162461bcd60e51b815260206004820152601b60248201527f71756572794761734c696d69742063616e2774206265207a65726f00000000006044820152606490fd5b61026c90611d42611d3a6000610a11565b821415611cdd565b6003611637565b61026c90611cc8565b6102826080611216565b611d64611d52565b60008082526020820181905260408201819052606082015290565b610282611d5c565b909161028293611dca611de792611d9c600090565b50611db0611da8611d7f565b966040880152565b73ffffffffffffffffffffffffffffffffffffffff168552565b73ffffffffffffffffffffffffffffffffffffffff166020840152565b612327565b91611e0391611e0893611dfd600090565b5061222d565b6122ae565b9061028230610df5565b15611e1957565b60405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616d6f756e744f7574000000000000000000006044820152606490fd5b611e8f611e8b611e788661026c98979596611e979561222d565b611e856113e46000610a11565b90611ff2565b9390565b831015611e12565b91611ea130610df5565b611ed673ffffffffffffffffffffffffffffffffffffffff83165b9173ffffffffffffffffffffffffffffffffffffffff1690565b03611ee057505050565b611eec61026c93610df5565b61269c565b919061028290604084820312611f15575b611f0c8185611853565b93602001611853565b611f1d600080fd5b611f02565b926102829694611f86611f8d92611f7d611faa96999599611f6060c08a019b60008b019073ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff166020890152565b15156040870152565b6060850152565b73ffffffffffffffffffffffffffffffffffffffff166080830152565b60a08184039101526105e9565b7f80000000000000000000000000000000000000000000000000000000000000008114611fe5575b60000390565b611fed6111be565b611fdf565b9060406120a992612001600090565b509182906120d360006118176120df61209f612031875173ffffffffffffffffffffffffffffffffffffffff1690565b61209961207e61206360208b019361205d855173ffffffffffffffffffffffffffffffffffffffff1690565b90612181565b9b5173ffffffffffffffffffffffffffffffffffffffff1690565b915173ffffffffffffffffffffffffffffffffffffffff1690565b9061257b565b92819a9199610df5565b946371334694926120c3896120bd30610df5565b99015190565b6040519b8c998a98899760e01b90565b87528060048801611f22565b03925af1908115612148575b6000928392612116575b50156121085750610ecd61028291611fb7565b6102829150610ecd90611fb7565b90925061213a915060403d8111612141575b6121328183610536565b810190611ef1565b91386120f5565b503d612128565b6121506117cc565b6120eb565b73ffffffffffffffffffffffffffffffffffffffff909116815260408101929161026c91602090610c06565b6020906121b06118177f0000000000000000000000000000000000000000000000000000000000000000610df5565b6121d163d9a641e16121dc6121c460405190565b9687958694859460e01b90565b845260048401612155565b03915afa90811561220b575b6000916121f3575090565b610282915060203d8111611c2957611c1b8183610536565b6122136117cc565b6121e8565b6122256102826102829290565b62ffffff1690565b610282919261229d61224a6122a293612244611d7f565b50610a11565b61229660009361227961225b611d52565b73ffffffffffffffffffffffffffffffffffffffff909916868a0152565b73ffffffffffffffffffffffffffffffffffffffff166020880152565b6040860152565b612218565b62ffffff166060830152565b906000916122f36122d3825173ffffffffffffffffffffffffffffffffffffffff1690565b602083015173ffffffffffffffffffffffffffffffffffffffff1661205d565b6123006102d260006117e6565b73ffffffffffffffffffffffffffffffffffffffff821603612320575050565b6102829293505b604061238b9161238593612339600090565b5061237b61235b825173ffffffffffffffffffffffffffffffffffffffff1690565b602083015173ffffffffffffffffffffffffffffffffffffffff16612099565b9381969192015190565b916123e5565b91156121085750610ecd61028291611fb7565b610c0661026c946123de6060949897956123d5608086019a600087019073ffffffffffffffffffffffffffffffffffffffff169052565b15156020850152565b6040830152565b9061244961244e929593949561243a6123fc600090565b97889761240860405190565b9586946004602087017f90405d360000000000000000000000000000000000000000000000000000000081520161239e565b60208201810382520382610536565b6124a5565b906124565750565b90925061077f91506020612468825190565b818301019101611ef1565b610282906102d2565b6102829054612473565b3d156124a0576124953d61126f565b903d6000602084013e565b606090565b600080916124b1600090565b506124bc600461247c565b906124c76003610e43565b9160208201915192fa61077f612486565b61028273fffd8963efd1fc6a506488495d951d5263988d266117d9565b73ffffffffffffffffffffffffffffffffffffffff908116911690039073ffffffffffffffffffffffffffffffffffffffff821161120157565b6102826401000276a36117d9565b61255c9073ffffffffffffffffffffffffffffffffffffffff16611ebc565b019073ffffffffffffffffffffffffffffffffffffffff821161120157565b90611ebc6125a59161258b600090565b5073ffffffffffffffffffffffffffffffffffffffff1690565b109081156125c8576102826125b861252f565b6125c260016117d9565b9061253d565b6102826125d36124d8565b6125dd60016117d9565b906124f5565b61026c907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610e8c565b61026c907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95611018565b61026c903361083b565b61026c903390612659612652610a1e565b9182610e8c565b611094565b6126776126716102829263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6126df6004926126d061026c956126b663a9059cbb61265e565b926126c060405190565b9687946020860190815201611af0565b60208201810382520383610536565b6128ea565b156126eb57565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b6126df6004926126d061026c9561278360008461277282610a11565b8414918215612790575b50506126e4565b6126b663095ea7b361265e565b909150602061279e89610df5565b63dd62ed3e906121d16127b030610df5565b926127ca6127bd60405190565b9788958694859460e01b90565b03915afa91821561281b575b6000926127f3575b5061135f6127eb91610a11565b14843861277c565b6127eb91925061281361135f9160203d8111611a3757611a298183610536565b9291506127de565b6128236117cc565b6127d6565b1561282f57565b60405162461bcd60e51b815280610ff9600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b1561287f57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b6000916128f78392610df5565b9082602082019151925af161291361290d612486565b91612828565b805161292261135f6000610a11565b1161292a5750565b61294681602061293b61026c945190565b818301019101611ad3565b61287856fea2646970667358221220f10db3fd84524ff87bb1c9b0e887c6e663d516352f3972f21ae66c230346ed9c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 718,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 720,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1288,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "quoterGasLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1290,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "quoter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}