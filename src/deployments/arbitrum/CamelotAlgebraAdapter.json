{
  "address": "0x4548ab9F211D10e511F37F3bcAB0FE96E8B04574",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoterGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "algebraSwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amountIn",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getQuoteForPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoterGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuoter",
          "type": "address"
        }
      ],
      "name": "setQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "setQuoterGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x65a902328e9bb50453b5db6ad735bab2ced113ea01941b1fa4646500a843910d",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0x4548ab9F211D10e511F37F3bcAB0FE96E8B04574",
    "transactionIndex": 2,
    "gasUsed": "29195147",
    "logsBloom": "0x
    "blockHash": "0x114c40bda4ce2f4e890e553f1f79d279f33ecc5bb3e318b7518f8e8d124d6e62",
    "transactionHash": "0x65a902328e9bb50453b5db6ad735bab2ced113ea01941b1fa4646500a843910d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 183265750,
        "transactionHash": "0x65a902328e9bb50453b5db6ad735bab2ced113ea01941b1fa4646500a843910d",
        "address": "0x4548ab9F211D10e511F37F3bcAB0FE96E8B04574",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x114c40bda4ce2f4e890e553f1f79d279f33ecc5bb3e318b7518f8e8d124d6e62"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 183265750,
        "transactionHash": "0x65a902328e9bb50453b5db6ad735bab2ced113ea01941b1fa4646500a843910d",
        "address": "0x4548ab9F211D10e511F37F3bcAB0FE96E8B04574",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x114c40bda4ce2f4e890e553f1f79d279f33ecc5bb3e318b7518f8e8d124d6e62"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 183265750,
        "transactionHash": "0x65a902328e9bb50453b5db6ad735bab2ced113ea01941b1fa4646500a843910d",
        "address": "0x4548ab9F211D10e511F37F3bcAB0FE96E8B04574",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000004548ab9f211d10e511f37f3bcab0fe96e8b04574"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000061a80",
        "logIndex": 3,
        "blockHash": "0x114c40bda4ce2f4e890e553f1f79d279f33ecc5bb3e318b7518f8e8d124d6e62"
      }
    ],
    "blockNumber": 183265750,
    "cumulativeGasUsed": "31177099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CamelotAlgebraAdapter",
    400000,
    400000,
    "0xCf18A919dd14f789b0552e024D8a87Fc68929822",
    "0x1a3c9B1d2F0529D97f2afC5136Cc23e58f1FD35B"
  ],
  "solcInputHash": "53947a290f318b2ac07d10649c872dfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoterGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"algebraSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amountIn\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getQuoteForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoterGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuoter\",\"type\":\"address\"}],\"name\":\"setQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setQuoterGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/AlgebraAdapter.sol\":\"AlgebraAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":0},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x107a35cefab5921f72dc79a2035e4abedf6975b2569649e2029b694019601b59\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/AlgebraAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UniswapV3likeAdapter.sol\\\";\\n\\ninterface IAlgebraFactory {\\n    function poolByPair(address, address) external view returns (address);\\n}\\n\\ncontract AlgebraAdapter is UniswapV3likeAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address immutable FACTORY;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        uint256 _quoterGasLimit,\\n        address _quoter,\\n        address _factory\\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\\n        FACTORY = _factory;\\n    }\\n\\n    function getBestPool(\\n        address token0, \\n        address token1\\n    ) internal view override returns (address mostLiquid) {\\n        return IAlgebraFactory(FACTORY).poolByPair(token0, token1);\\n    }\\n\\n    function algebraSwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata\\n    ) external {\\n        if (amount0Delta > 0) {\\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\\n        } else {\\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x837fd7284fb99966b6d0a6972e83793aeb0763c85f5ad9f749e72d09b2b0cd0f\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/UniswapV3likeAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\nstruct QParams {\\n    address tokenIn;\\n    address tokenOut;\\n    int256 amountIn;\\n    uint24 fee;\\n}\\n\\ninterface IUniV3Pool {\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function liquidity() external view returns (uint128);\\n}\\n\\ninterface IUniV3Quoter {\\n    function quoteExactInputSingle(\\n        QParams memory params\\n    ) external view returns (uint256);\\n\\n    function quote(\\n        address,\\n        bool,\\n        int256,\\n        uint160\\n    ) external view returns (int256, int256);\\n}\\n\\nabstract contract UniswapV3likeAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    uint256 public quoterGasLimit;\\n    address public quoter;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _quoter,\\n        uint256 _quoterGasLimit\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        setQuoterGasLimit(_quoterGasLimit);\\n        setQuoter(_quoter);\\n    }\\n\\n    function setQuoter(address newQuoter) public onlyMaintainer {\\n        quoter = newQuoter;\\n    }\\n\\n    function setQuoterGasLimit(uint256 newLimit) public onlyMaintainer {\\n        require(newLimit != 0, \\\"queryGasLimit can't be zero\\\");\\n        quoterGasLimit = newLimit;\\n    }\\n\\n    function getQuoteForPool(\\n        address pool,\\n        int256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256) {\\n        QParams memory params;\\n        params.amountIn = amountIn;\\n        params.tokenIn = tokenIn;\\n        params.tokenOut = tokenOut;\\n        return getQuoteForPool(pool, params);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 quote) {\\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\\n        quote = getQuoteForBestPool(params);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\\n        uint256 amountOut = _underlyingSwap(params, new bytes(0));\\n        require(amountOut >= _amountOut, \\\"Insufficient amountOut\\\");\\n        _returnTo(_tokenOut, amountOut, _to);\\n    }\\n\\n    function getQParams(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal pure returns (QParams memory params) {\\n        params = QParams({ \\n            amountIn: int256(amountIn), \\n            tokenIn: tokenIn, \\n            tokenOut: tokenOut, \\n            fee: 0 \\n        });\\n    }\\n\\n    function _underlyingSwap(\\n        QParams memory params, \\n        bytes memory callbackData\\n    ) internal virtual returns (uint256) {\\n        address pool = getBestPool(params.tokenIn, params.tokenOut);\\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\\n            params.tokenIn, \\n            params.tokenOut\\n        );\\n        (int256 amount0, int256 amount1) = IUniV3Pool(pool).swap(\\n            address(this),\\n            zeroForOne,\\n            int256(params.amountIn),\\n            priceLimit,\\n            callbackData\\n        );\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function getQuoteForBestPool(\\n        QParams memory params\\n    ) internal view returns (uint256 quote) {\\n        address bestPool = getBestPool(params.tokenIn, params.tokenOut);\\n        if (bestPool != address(0)) quote = getQuoteForPool(bestPool, params);\\n    }\\n\\n    function getBestPool(\\n        address token0, \\n        address token1\\n    ) internal view virtual returns (address mostLiquid);\\n    \\n    function getQuoteForPool(\\n        address pool, \\n        QParams memory params\\n    ) internal view returns (uint256) {\\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\\n            params.tokenIn, \\n            params.tokenOut\\n        );\\n        (int256 amount0, int256 amount1) = getQuoteSafe(\\n            pool,\\n            zeroForOne,\\n            params.amountIn,\\n            priceLimit\\n        );\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function getQuoteSafe(\\n        address pool, \\n        bool zeroForOne,\\n        int256 amountIn,\\n        uint160 priceLimit\\n    ) internal view returns (int256 amount0, int256 amount1) {\\n        bytes memory calldata_ = abi.encodeWithSignature(\\n            \\\"quote(address,bool,int256,uint160)\\\",\\n            pool,\\n            zeroForOne,\\n            amountIn,\\n            priceLimit\\n        );\\n        (bool success, bytes memory data) = staticCallQuoterRaw(calldata_);\\n        if (success)\\n            (amount0, amount1) = abi.decode(data, (int256, int256));\\n    }\\n\\n    function staticCallQuoterRaw(\\n        bytes memory calldata_\\n    ) internal view returns (bool success, bytes memory data) {\\n        (success, data) = quoter.staticcall{gas: quoterGasLimit}(calldata_);\\n    }\\n\\n    function getZeroOneAndSqrtPriceLimitX96(address tokenIn, address tokenOut)\\n        internal\\n        pure\\n        returns (bool zeroForOne, uint160 sqrtPriceLimitX96)\\n    {\\n        zeroForOne = tokenIn < tokenOut;\\n        sqrtPriceLimitX96 = zeroForOne ? MIN_SQRT_RATIO+1 : MAX_SQRT_RATIO-1;\\n    }\\n}\\n\",\"keccak256\":\"0x5db29543e48a7cbf3fc0222bd3a19065f42fd486fa022047830ea96ef4a62720\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200003e575b62000023620000196200024b565b9392909262000275565b60405161245262000974823960805181611e38015261245290f35b62000047600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008b57604052565b6200009562000052565b604052565b90620000b1620000a960405190565b928362000069565b565b602090620000d4906001600160401b038111620000d857601f01601f191690565b0190565b620000e262000052565b601f01601f191690565b60005b838110620001005750506000910152565b8181015183820152602001620000ef565b929190620000b1916200012e6200012883620000b3565b6200009a565b9482865260208601918382011115620000ec576200014a600080fd5b620000ec565b906200016f9181601f8201121562000172575b60208151910162000111565b90565b6200017b600080fd5b62000163565b805b036200004d57565b90505190620000b18262000181565b6001600160a01b031690565b62000183816200019a565b90505190620000b182620001a6565b919060a0838203126200023c575b8251620001ef9082906001600160401b0381116200022d575b850162000150565b92620001ff82602083016200018b565b926200016f6200021384604085016200018b565b93620002238160608601620001b1565b93608001620001b1565b62000236600080fd5b620001e7565b62000245600080fd5b620001ce565b6200026e62002dc68038038062000262816200009a565b928339810190620001c0565b9091929394565b9062000282939162000287565b608052565b926200029c620002a292620000b195620002a8565b62000968565b620008d0565b90620002c2620000b192620002bc62000308565b620006c1565b62000872565b6200016f6200016f6200016f9290565b6200016f6000620002c8565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b620000b13362000322816200031c620002d8565b6200032c565b6200031c620002e4565b90620000b191620003ae565b905b600052602052604060002090565b6200016f906200019a906001600160a01b031682565b6200016f9062000348565b6200016f906200035e565b906200033a9062000369565b9060ff905b9181191691161790565b90620003a26200016f620003aa92151590565b825462000380565b9055565b90620003c3620003bf82846200043d565b1590565b620003cc575050565b620003f26001620003ec836000620003e5878262000338565b0162000374565b6200038f565b33906200042c62000425620004257f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9262000369565b926200043760405190565b600090a4565b6200016f916200045591620003e56000918262000338565b5460ff1690565b156200046457565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d650000000000000000000000006044820152606490fd5b50634e487b7160e01b600052602260045260246000fd5b9060016002830492168015620004e7575b6020831014620004dd57565b620000b1620004a9565b91607f1691620004d1565b9160001960089290920291821b911b62000385565b91906200051c6200016f620003aa93620002c8565b908354620004f2565b620000b19160009162000507565b8181106200053f575050565b806200054f600060019362000525565b0162000533565b9190601f81116200056657505050565b6200057a620000b193600052602060002090565b906020601f8401819004830193106200059e575b6020601f90910104019062000533565b90915081906200058e565b9060001960089091021c191690565b81620005c491620005a9565b906002021790565b90620005d6815190565b906001600160401b038211620006a5575b620005ff82620005f88554620004c0565b8562000556565b602090601f83116001146200063257620003aa92916000918362000626575b5050620005b8565b0151905038806200061e565b601f198316916200064885600052602060002090565b9260005b8181106200068c575091600293918560019694106200066f575b50505002019055565b62000681910151601f841690620005a9565b905538808062000666565b919360206001819287870151815501950192016200064c565b620006af62000052565b620005e7565b90620000b191620005cc565b620000b190620006ef620006d3825190565b620006e7620006e36000620002c8565b9190565b14156200045c565b6002620006b5565b15620006ff57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b620000b1906200077a62000774335b6200076e620002e4565b6200043d565b620006f7565b620007f4565b156200078857565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b906000199062000385565b90620007ec6200016f620003aa92620002c8565b8254620007cd565b6200080d620008046000620002c8565b82141562000780565b6200081a816001620007d8565b620008253062000369565b6200086d620008557ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9262000369565b926200086060405190565b9182918290815260200190565b0390a2565b620000b19062000755565b620000b19062000891620007743362000764565b620008c3565b906001600160a01b039062000385565b90620008bb6200016f620003aa9262000369565b825462000897565b620000b1906004620008a7565b620000b1906200087d565b620000b190620008ef620007743362000764565b62000942565b15620008fd57565b60405162461bcd60e51b815260206004820152601b60248201527f71756572794761734c696d69742063616e2774206265207a65726f00000000006044820152606490fd5b620000b19062000960620009576000620002c8565b821415620008f5565b6003620007d8565b620000b190620008db56fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a71461022657806305e3f4dc1461021d57806306fdde0314610214578063248a9ca31461020b5780632bc857a0146102025780632c8958f6146101f95780632f2ff15d146101f057806336568abe146101e75780634ebb7916146101de57806369cff80d146101d55780636b453c1f146101cc5780637ae26773146101c357806384a33e63146101ba5780638980f11f146101b15780638bb9c5bf146101a857806391d148541461019f578063a217fddf14610196578063c6bbd5a71461018d578063d547741f14610184578063d8baf7cf1461017b578063eab90da614610172578063ef99893a14610169578063f2fde38b14610160578063f35c4d4514610157578063f87422541461014e5763f912c64b0361000e57610149610c04565b61000e565b50610149610bda565b50610149610b87565b50610149610b60565b50610149610b35565b50610149610acc565b50610149610a4b565b50610149610a23565b506101496109ed565b50610149610986565b5061014961093c565b50610149610915565b506101496108ed565b50610149610895565b5061014961086d565b5061014961081e565b506101496107d7565b506101496107a4565b5061014961077c565b50610149610754565b506101496106f3565b5061014961061e565b506101496105d2565b5061014961057f565b50610149610350565b50610149610288565b600080fd5b6001600160e01b03191690565b61024a81610234565b0361022f57565b9050359061025e82610241565b565b906102749160208183031261027757610251565b90565b61027f600080fd5b610251565b9052565b50346102bb575b6102b76102a56102a0366004610260565b610c2b565b60405191829182901515815260200190565b0390f35b6102c3600080fd5b61028f565b6001600160a01b031690565b610274906102c8565b61024a816102d4565b9050359061025e826102dd565b8061024a565b9050359061025e826102f3565b608081830312610343575b61031b82826102e6565b9261027461032c84602085016102f9565b9361033a81604086016102e6565b936060016102e6565b61034b600080fd5b610311565b5034610382575b6102b7610371610368366004610306565b92919091611ad4565b6040515b9182918290815260200190565b61038a600080fd5b610357565b600091031261039a57565b61025e600080fd5b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156103f3575b60208310146103eb57565b61025e6103b9565b91607f16916103e0565b8054600093929161041a610410836103d0565b8085529360200190565b916001811690811561046c575060011461043357505050565b6104469192939450600052602060002090565b916000925b8184106104585750500190565b80548484015260209093019260010161044b565b92949550505060ff1916825215156020020190565b90610274916103fd565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176104cd57604052565b6104d5610495565b604052565b9061025e6104f4926104eb60405190565b93848092610481565b03836104ac565b61027491156104da5761050c6103a2565b6104da565b610274600060026104fb565b60005b8381106105305750506000910152565b8181015183820152602001610520565b61056161048b60209361056a93610555815190565b80835293849260200190565b9586910161051d565b0190565b602080825261027492910190610540565b50346105a8575b61059136600461038f565b6102b761059c610511565b6040519182918261056e565b6105b0600080fd5b610586565b9061027491602081830312156102f9576105cd600080fd5b6102f9565b50346105ef575b6102b76103716105ea3660046105b5565b610cdf565b6105f7600080fd5b6105d9565b610274916008021c81565b9061027491546105fc565b61027460006003610607565b503461063b575b61063036600461038f565b6102b7610371610612565b610643600080fd5b610625565b909182601f83011215610684575b8135916020906001600160401b038411610677575b01928284011161039a57565b61067f600080fd5b61066b565b61068c600080fd5b610656565b90916060828403126106e6575b6106d56106ab84846102f9565b936106b981602086016102f9565b936040810135906001600160401b0382116106d9575b01610648565b9091565b6106e1600080fd5b6106cf565b6106ee600080fd5b61069e565b5034610716575b610711610708366004610691565b9291909161186c565b604051005b61071e600080fd5b6106fa565b919061027490604084820312610747575b61073e81856102f9565b936020016102e6565b61074f600080fd5b610734565b503461076f575b610711610769366004610723565b90610d1e565b610777600080fd5b61075b565b5034610797575b610711610791366004610723565b90610ef2565b61079f600080fd5b610783565b50346107be575b6107116107b93660046105b5565b6115ca565b6107c6600080fd5b6107ab565b61027460006001610607565b50346107f4575b6107e936600461038f565b6102b76103716107cb565b6107fc600080fd5b6107de565b9061027491602081830312156102e657610819600080fd5b6102e6565b5034610838575b610711610833366004610801565b612120565b610840600080fd5b610825565b919061027490604084820312610860575b61073e81856102e6565b610868600080fd5b610856565b5034610888575b610711610882366004610845565b90611476565b610890600080fd5b610874565b50346108af575b6107116108aa3660046105b5565b61143e565b6108b7600080fd5b61089c565b9190610274906040848203126108e0575b6108d781856102e6565b936020016102f9565b6108e8600080fd5b6108cd565b5034610908575b6107116109023660046108bc565b90611538565b610910600080fd5b6108f4565b503461092f575b61071161092a3660046105b5565b612142565b610937600080fd5b61091c565b503461095a575b6102b76102a5610954366004610723565b90610caf565b610962600080fd5b610943565b6102746102746102749290565b6102746000610967565b610274610974565b50346109a3575b61099836600461038f565b6102b761037161097e565b6109ab600080fd5b61098d565b610274916008021c6102c8565b9061027491546109b0565b610274600060046109bd565b610284906102d4565b60208101929161025e91906109d4565b5034610a16575b6109ff36600461038f565b6102b7610a0a6109c8565b604051918291826109dd565b610a1e600080fd5b6109f4565b5034610a3e575b610711610a38366004610723565b90610e84565b610a46600080fd5b610a2a565b5034610a65575b610711610a60366004610801565b612131565b610a6d600080fd5b610a52565b919060a083820312610abf575b610a8981846102f9565b92610a9782602083016102f9565b92610274610aa884604085016102e6565b93610ab681606086016102e6565b936080016102e6565b610ac7600080fd5b610a7f565b5034610aea575b610711610ae1366004610a72565b93929092611672565b610af2600080fd5b610ad3565b9091606082840312610b28575b610274610b1184846102f9565b93610b1f81602086016102e6565b936040016102e6565b610b30600080fd5b610b04565b5034610b53575b6102b7610371610b4d366004610af7565b916115d3565b610b5b600080fd5b610b3c565b5034610b7a575b610711610b75366004610801565b61214c565b610b82600080fd5b610b67565b5034610ba1575b610711610b9c3660046105b5565b611a8c565b610ba9600080fd5b610b8e565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b610274610bae565b5034610bf7575b610bec36600461038f565b6102b7610371610bd2565b610bff600080fd5b610be1565b5034610c1e575b610711610c19366004610801565b611a04565b610c26600080fd5b610c0b565b610c3b637965db0b60e01b610234565b610c4482610234565b14908115610c50575090565b61027491506112d8565b905b600052602052604060002090565b610c79610274610274926102c8565b6102c8565b61027490610c6a565b61027490610c7e565b90610c5c90610c87565b610274905b60ff1690565b6102749054610c9a565b61027491610cc991610cc360009182610c5a565b01610c90565b610ca5565b6102749081565b6102749054610cce565b6001610cf861027492610cf0600090565b506000610c5a565b01610cd5565b9061025e91610d14610d0f82610cdf565b610d28565b9061025e91610f46565b9061025e91610cfe565b61025e903390610dc6565b610274610274610274926102c8565b61027490610967565b610967565b61056a610d6892602092610d62815190565b94859290565b9384910161051d565b610da96102749392610da3610da39376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170190565b90610d50565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90610dd8610dd48284610caf565b1590565b610de0575050565b610e6591610274610e19610e13610df9610e4d95610c7e565b610e0d610e07601492610d33565b91610967565b906111a4565b92610d42565b610e28602091610e0d83610967565b92610e41610e3560405190565b94859384019283610d71565b908103825203826104ac565b60405162461bcd60e51b81529182916004830161056e565b0390fd5b9061025e91610e7a610d0f82610cdf565b9061025e91610fbc565b9061025e91610e69565b15610e9557565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b61025e9190610f17610f08336102d4565b6102d4565b610f11846102d4565b14610e8e565b610fbc565b9060ff905b9181191691161790565b90610f3b610274610f4292151590565b8254610f1c565b9055565b90610f54610dd48284610caf565b610f5c575050565b610f766001610f71836000610cc38782610c5a565b610f2b565b3390610fac610fa6610fa67f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610c87565b92610fb660405190565b600090a4565b90610fc78183610caf565b610fcf575050565b610fe36000610f718382610cc38782610c5a565b3390610fac610fa6610fa67ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b50634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561103d57565b61025e611013565b9190820180921161103d57565b9061025e61105f60405190565b92836104ac565b60209061056a906001600160401b03811161108557601f01601f191690565b61108d610495565b61048b565b906110a461109f83611066565b611052565b918252565b369037565b9061025e6110c46110be84611092565b93611066565b601f1901602084016110a9565b50634e487b7160e01b600052603260045260246000fd5b9060016020916110f6845190565b811015611104575b02010190565b61110c6110d1565b6110fe565b600190801561111e570390565b611126611013565b0390565b610c9f6102746102749290565b6102749061114f61114b6102749460ff1690565b9190565b901c90565b1561115b57565b60405162461bcd60e51b815280610e65600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b91906002906111d56111d06111c1836111bc86610967565b61102a565b6111ca85610967565b90611045565b6110ae565b9160009160306111ed6111e785610967565b866110e8565b5361122561121c600f60fb1b926111bc6001958695881a61121661121088610967565b8b6110e8565b53610967565b6111ca83610967565b915b611248575b5050610274929361124261114b61027493610967565b14611154565b909461125382610967565b8611156112d2576112bf6112b9839261129c61127f6f181899199a1a9b1b9c1cb0b131b232b360811b90565b611289600f610967565b831660108110156112c5575b1a60f81b90565b861a6112a88a896110e8565b536112b3600461112a565b90611137565b96611111565b91611227565b6112cd6110d1565b611295565b9461122c565b6112f16112eb6301ffc9a760e01b610234565b91610234565b1490565b156112fc57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b61025e9061137061136b335b611366610bae565b610caf565b6112f5565b6113d9565b1561137c57565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206761732d657374696d61746560601b6044820152606490fd5b9060001990610f21565b906113d2610274610f4292610967565b82546113b8565b6113ee6113e66000610967565b821415611375565b6113f98160016113c2565b61140230610c87565b61143961142f7ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610c87565b9261037560405190565b0390a2565b61025e90611352565b61025e919061145861136b3361135e565b9061146561025e92610c87565b906114706000610967565b9161223a565b9061025e91611447565b61025e919061149161136b3361135e565b6114e2565b1561149d57565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b6114f76114ef6000610967565b835b11611496565b61150b8261150483610c87565b3390612187565b61143961142f7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610c87565b9061025e91611480565b61025e9061155261136b3361135e565b61157a565b506040513d6000823e3d90fd5b610c796102746102749290565b61027490611564565b61150b600061159161158b82610967565b846114f1565b80808080866115a76115a233610c87565b610c87565b8282156115c1575bf1611571576115bc611557565b611571565b506108fc6115af565b61025e90611542565b610274929190611b11565b9050519061025e826102f3565b9061027491602081830312156115de57611603600080fd5b6115de565b9190820391821161103d57565b1561161c57565b60405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d08185b5bdd5b9d0b5bdd5d604a1b6044820152606490fd5b90815260408101929161025e9160200152565b0152565b9361171b611723916116866115a287610c87565b906370a082319161169660405190565b926116a18160e01b90565b84528888888c602088806116b88a600483016109dd565b0381895afa9788156117e8575b6000986117ac575b5086602096946116f6946117019997946116e694611b72565b6040519586948593849360e01b90565b8352600483016109dd565b03915afa90811561179f575b600091611771575b50611608565b821115611615565b6117566117507fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610c87565b93610c87565b9361176c61176360405190565b9283928361165b565b0390a3565b611792915060203d8111611798575b61178a81836104ac565b8101906115eb565b38611715565b503d611780565b6117a7611557565b61170d565b6116e691985096602096946116f6948297946117d76117019b8b3d81116117985761178a81836104ac565b9b94509497995094509496506116cd565b6117f0611557565b6116c5565b9050519061025e826102dd565b9061027491602081830312156117f55761181a600080fd5b6117f5565b80151561024a565b9050519061025e8261181f565b9061027491602081830312156118275761184c600080fd5b611827565b91602061025e92949361166e604082019660008301906109d4565b92506000915061187b82610967565b83131561198f575060209033906119016118d86115a26118b9866118a16115a288610c87565b630dfe1681906118b060405190565b93849260e01b90565b825260049082905afa908115611982575b600091611955575b50610c87565b916118e763a9059cbb96610967565b9561190c6118f460405190565b9788968795869460e01b90565b845260048401611851565b03925af18015611948575b61191e5750565b61193e9060203d8111611941575b61193681836104ac565b810190611834565b50565b503d61192c565b611950611557565b611917565b6119759150873d811161197b575b61196d81836104ac565b810190611802565b386118d2565b503d611963565b61198a611557565b6118ca565b915060209033906119016118d86115a26118b9866119af6115a288610c87565b63d21220a7906118b060405190565b61025e906119ce61136b3361135e565b6119f9565b906001600160a01b0390610f21565b906119f2610274610f4292610c87565b82546119d3565b61025e9060046119e2565b61025e906119be565b61025e90611a1d61136b3361135e565b611a6c565b15611a2957565b60405162461bcd60e51b815260206004820152601b60248201527a71756572794761734c696d69742063616e2774206265207a65726f60281b6044820152606490fd5b61025e90611a85611a7d6000610967565b821415611a22565b60036113c2565b61025e90611a0d565b6102746080611052565b611aa7611a95565b60008082526020820181905260408201819052606082015290565b610274611a9f565b90610284906102d4565b909161027493611b03611b0c92611ae9600090565b50611afd611af5611ac2565b966040880152565b85611aca565b60208401611aca565b611f06565b91611b289161027493611b22600090565b50611bf7565b611ec4565b15611b3457565b60405162461bcd60e51b8152602060048201526016602482015275125b9cdd59999a58da595b9d08185b5bdd5b9d13dd5d60521b6044820152606490fd5b611ba3611b9f611b8c8661025e98979596611bab95611bf7565b611b996111d06000610967565b90611cfd565b9390565b831015611b2d565b91611bb530610c87565b611bc7611bc1836102d4565b916102d4565b03611bd157505050565b611bdd61025e93610c87565b612187565b611bef6102746102749290565b62ffffff1690565b6102749192611c3e611c14611c4393611c0e611ac2565b50610967565b611c37600093611c2e611c25611a95565b98868a01611aca565b60208801611aca565b6040860152565b611be2565b62ffffff166060830152565b61027490516102d4565b919061027490604084820312611c7d575b611c7481856115de565b936020016115de565b611c85600080fd5b611c6a565b610284906102c8565b9193611cc76102749694611cc0611cd19497611cb760a088019960008901906109d4565b15156020870152565b6040850152565b6060830190611c8a565b6080818403910152610540565b600160ff1b8114611cf0575b60000390565b611cf8611013565b611cea565b906040611d6092611d0c600090565b50918290611d8a60006115a2611d95611d56611d2787611c4f565b611d50611d4a611d4460208b0193611d3e85611c4f565b90611e2d565b9b611c4f565b91611c4f565b906120cc565b92819a9199610c87565b9463128acb0892611d7a89611d7430610c87565b99015190565b6040519b8c998a98899760e01b90565b875260048701611c93565b03925af1908115611dfe575b6000928392611dcc575b5015611dbe5750610d4b61027491611cde565b6102749150610d4b90611cde565b909250611df0915060403d8111611df7575b611de881836104ac565b810190611c59565b9138611dab565b503d611dde565b611e06611557565b611da1565b91602061025e929493611e26604082019660008301906109d4565b01906109d4565b602090611e5c6115a27f0000000000000000000000000000000000000000000000000000000000000000610c87565b611e7d63d9a641e1611e88611e7060405190565b9687958694859460e01b90565b845260048401611e0b565b03915afa908115611eb7575b600091611e9f575090565b610274915060203d811161197b5761196d81836104ac565b611ebf611557565b611e94565b90600091611ee0611ed482611c4f565b611d3e60208401611c4f565b611eed610f036000611571565b611ef6826102d4565b03611eff575050565b6102749293505b6040611f4191611f3b93611f18600090565b50611f31611f2582611c4f565b611d5060208401611c4f565b9381969192015190565b91611f8d565b9115611dbe5750610d4b61027491611cde565b611f8661025e94611f7f606094989795611f76608086019a60008701906109d4565b15156020850152565b6040830152565b0190611c8a565b90611fd8611fdd9295939495611fc9611fa4600090565b978897611fb060405190565b6348202e9b60e11b602082015295869460248601611f54565b602082018103825203826104ac565b61202b565b90611fe55750565b9092506106d591506020611ff7825190565b818301019101611c59565b61027490546102d4565b3d156120265761201b3d611092565b903d6000602084013e565b606090565b60008091612037600090565b506120426004612002565b9061204d6003610cd5565b9160208201915192fa6106d561200c565b61027473fffd8963efd1fc6a506488495d951d5263988d26611564565b61208761208d916102c8565b916102c8565b9003906001600160a01b03821161103d57565b6102746401000276a3611564565b6120876120ba916102c8565b01906001600160a01b03821161103d57565b90611bc16120e2916120dc600090565b506102d4565b10908115612105576102746120f56120a0565b6120ff6001611564565b906120ae565b61027461211061205e565b61211a6001611564565b9061207b565b61025e9061212c610bae565b610d1e565b61025e9061213d610bae565b610e84565b61025e9033610791565b61025e90339061216461215d610974565b9182610d1e565b610ef2565b61218261217c6102749263ffffffff1690565b60e01b90565b610234565b6121ca6004926121bb61025e956121a163a9059cbb612169565b926121ab60405190565b9687946020860190815201611851565b602082018103825203836104ac565b6123bb565b156121d657565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b6121ca6004926121bb61025e9561226760008461225682610967565b8414918215612274575b50506121cf565b6121a163095ea7b3612169565b909150602061228289610c87565b63dd62ed3e90611e7d61229430610c87565b926122ae6122a160405190565b9788958694859460e01b90565b03915afa9182156122ff575b6000926122d7575b5061114b6122cf91610967565b148438612260565b6122cf9192506122f761114b9160203d81116117985761178a81836104ac565b9291506122c2565b612307611557565b6122ba565b1561231357565b60405162461bcd60e51b815280610e65600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b1561236357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6000916123c88392610c87565b9082602082019151925af16123e46123de61200c565b9161230c565b80516123f361114b6000610967565b116123fb5750565b61241781602061240c61025e945190565b818301019101611834565b61235c56fea264697066735822122053fd9073949dd211309f2e8566a0a4df595f414150b01f0f2790b355234f24e064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a71461022657806305e3f4dc1461021d57806306fdde0314610214578063248a9ca31461020b5780632bc857a0146102025780632c8958f6146101f95780632f2ff15d146101f057806336568abe146101e75780634ebb7916146101de57806369cff80d146101d55780636b453c1f146101cc5780637ae26773146101c357806384a33e63146101ba5780638980f11f146101b15780638bb9c5bf146101a857806391d148541461019f578063a217fddf14610196578063c6bbd5a71461018d578063d547741f14610184578063d8baf7cf1461017b578063eab90da614610172578063ef99893a14610169578063f2fde38b14610160578063f35c4d4514610157578063f87422541461014e5763f912c64b0361000e57610149610c04565b61000e565b50610149610bda565b50610149610b87565b50610149610b60565b50610149610b35565b50610149610acc565b50610149610a4b565b50610149610a23565b506101496109ed565b50610149610986565b5061014961093c565b50610149610915565b506101496108ed565b50610149610895565b5061014961086d565b5061014961081e565b506101496107d7565b506101496107a4565b5061014961077c565b50610149610754565b506101496106f3565b5061014961061e565b506101496105d2565b5061014961057f565b50610149610350565b50610149610288565b600080fd5b6001600160e01b03191690565b61024a81610234565b0361022f57565b9050359061025e82610241565b565b906102749160208183031261027757610251565b90565b61027f600080fd5b610251565b9052565b50346102bb575b6102b76102a56102a0366004610260565b610c2b565b60405191829182901515815260200190565b0390f35b6102c3600080fd5b61028f565b6001600160a01b031690565b610274906102c8565b61024a816102d4565b9050359061025e826102dd565b8061024a565b9050359061025e826102f3565b608081830312610343575b61031b82826102e6565b9261027461032c84602085016102f9565b9361033a81604086016102e6565b936060016102e6565b61034b600080fd5b610311565b5034610382575b6102b7610371610368366004610306565b92919091611ad4565b6040515b9182918290815260200190565b61038a600080fd5b610357565b600091031261039a57565b61025e600080fd5b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156103f3575b60208310146103eb57565b61025e6103b9565b91607f16916103e0565b8054600093929161041a610410836103d0565b8085529360200190565b916001811690811561046c575060011461043357505050565b6104469192939450600052602060002090565b916000925b8184106104585750500190565b80548484015260209093019260010161044b565b92949550505060ff1916825215156020020190565b90610274916103fd565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176104cd57604052565b6104d5610495565b604052565b9061025e6104f4926104eb60405190565b93848092610481565b03836104ac565b61027491156104da5761050c6103a2565b6104da565b610274600060026104fb565b60005b8381106105305750506000910152565b8181015183820152602001610520565b61056161048b60209361056a93610555815190565b80835293849260200190565b9586910161051d565b0190565b602080825261027492910190610540565b50346105a8575b61059136600461038f565b6102b761059c610511565b6040519182918261056e565b6105b0600080fd5b610586565b9061027491602081830312156102f9576105cd600080fd5b6102f9565b50346105ef575b6102b76103716105ea3660046105b5565b610cdf565b6105f7600080fd5b6105d9565b610274916008021c81565b9061027491546105fc565b61027460006003610607565b503461063b575b61063036600461038f565b6102b7610371610612565b610643600080fd5b610625565b909182601f83011215610684575b8135916020906001600160401b038411610677575b01928284011161039a57565b61067f600080fd5b61066b565b61068c600080fd5b610656565b90916060828403126106e6575b6106d56106ab84846102f9565b936106b981602086016102f9565b936040810135906001600160401b0382116106d9575b01610648565b9091565b6106e1600080fd5b6106cf565b6106ee600080fd5b61069e565b5034610716575b610711610708366004610691565b9291909161186c565b604051005b61071e600080fd5b6106fa565b919061027490604084820312610747575b61073e81856102f9565b936020016102e6565b61074f600080fd5b610734565b503461076f575b610711610769366004610723565b90610d1e565b610777600080fd5b61075b565b5034610797575b610711610791366004610723565b90610ef2565b61079f600080fd5b610783565b50346107be575b6107116107b93660046105b5565b6115ca565b6107c6600080fd5b6107ab565b61027460006001610607565b50346107f4575b6107e936600461038f565b6102b76103716107cb565b6107fc600080fd5b6107de565b9061027491602081830312156102e657610819600080fd5b6102e6565b5034610838575b610711610833366004610801565b612120565b610840600080fd5b610825565b919061027490604084820312610860575b61073e81856102e6565b610868600080fd5b610856565b5034610888575b610711610882366004610845565b90611476565b610890600080fd5b610874565b50346108af575b6107116108aa3660046105b5565b61143e565b6108b7600080fd5b61089c565b9190610274906040848203126108e0575b6108d781856102e6565b936020016102f9565b6108e8600080fd5b6108cd565b5034610908575b6107116109023660046108bc565b90611538565b610910600080fd5b6108f4565b503461092f575b61071161092a3660046105b5565b612142565b610937600080fd5b61091c565b503461095a575b6102b76102a5610954366004610723565b90610caf565b610962600080fd5b610943565b6102746102746102749290565b6102746000610967565b610274610974565b50346109a3575b61099836600461038f565b6102b761037161097e565b6109ab600080fd5b61098d565b610274916008021c6102c8565b9061027491546109b0565b610274600060046109bd565b610284906102d4565b60208101929161025e91906109d4565b5034610a16575b6109ff36600461038f565b6102b7610a0a6109c8565b604051918291826109dd565b610a1e600080fd5b6109f4565b5034610a3e575b610711610a38366004610723565b90610e84565b610a46600080fd5b610a2a565b5034610a65575b610711610a60366004610801565b612131565b610a6d600080fd5b610a52565b919060a083820312610abf575b610a8981846102f9565b92610a9782602083016102f9565b92610274610aa884604085016102e6565b93610ab681606086016102e6565b936080016102e6565b610ac7600080fd5b610a7f565b5034610aea575b610711610ae1366004610a72565b93929092611672565b610af2600080fd5b610ad3565b9091606082840312610b28575b610274610b1184846102f9565b93610b1f81602086016102e6565b936040016102e6565b610b30600080fd5b610b04565b5034610b53575b6102b7610371610b4d366004610af7565b916115d3565b610b5b600080fd5b610b3c565b5034610b7a575b610711610b75366004610801565b61214c565b610b82600080fd5b610b67565b5034610ba1575b610711610b9c3660046105b5565b611a8c565b610ba9600080fd5b610b8e565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b610274610bae565b5034610bf7575b610bec36600461038f565b6102b7610371610bd2565b610bff600080fd5b610be1565b5034610c1e575b610711610c19366004610801565b611a04565b610c26600080fd5b610c0b565b610c3b637965db0b60e01b610234565b610c4482610234565b14908115610c50575090565b61027491506112d8565b905b600052602052604060002090565b610c79610274610274926102c8565b6102c8565b61027490610c6a565b61027490610c7e565b90610c5c90610c87565b610274905b60ff1690565b6102749054610c9a565b61027491610cc991610cc360009182610c5a565b01610c90565b610ca5565b6102749081565b6102749054610cce565b6001610cf861027492610cf0600090565b506000610c5a565b01610cd5565b9061025e91610d14610d0f82610cdf565b610d28565b9061025e91610f46565b9061025e91610cfe565b61025e903390610dc6565b610274610274610274926102c8565b61027490610967565b610967565b61056a610d6892602092610d62815190565b94859290565b9384910161051d565b610da96102749392610da3610da39376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170190565b90610d50565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90610dd8610dd48284610caf565b1590565b610de0575050565b610e6591610274610e19610e13610df9610e4d95610c7e565b610e0d610e07601492610d33565b91610967565b906111a4565b92610d42565b610e28602091610e0d83610967565b92610e41610e3560405190565b94859384019283610d71565b908103825203826104ac565b60405162461bcd60e51b81529182916004830161056e565b0390fd5b9061025e91610e7a610d0f82610cdf565b9061025e91610fbc565b9061025e91610e69565b15610e9557565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b61025e9190610f17610f08336102d4565b6102d4565b610f11846102d4565b14610e8e565b610fbc565b9060ff905b9181191691161790565b90610f3b610274610f4292151590565b8254610f1c565b9055565b90610f54610dd48284610caf565b610f5c575050565b610f766001610f71836000610cc38782610c5a565b610f2b565b3390610fac610fa6610fa67f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610c87565b92610fb660405190565b600090a4565b90610fc78183610caf565b610fcf575050565b610fe36000610f718382610cc38782610c5a565b3390610fac610fa6610fa67ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b50634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561103d57565b61025e611013565b9190820180921161103d57565b9061025e61105f60405190565b92836104ac565b60209061056a906001600160401b03811161108557601f01601f191690565b61108d610495565b61048b565b906110a461109f83611066565b611052565b918252565b369037565b9061025e6110c46110be84611092565b93611066565b601f1901602084016110a9565b50634e487b7160e01b600052603260045260246000fd5b9060016020916110f6845190565b811015611104575b02010190565b61110c6110d1565b6110fe565b600190801561111e570390565b611126611013565b0390565b610c9f6102746102749290565b6102749061114f61114b6102749460ff1690565b9190565b901c90565b1561115b57565b60405162461bcd60e51b815280610e65600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b91906002906111d56111d06111c1836111bc86610967565b61102a565b6111ca85610967565b90611045565b6110ae565b9160009160306111ed6111e785610967565b866110e8565b5361122561121c600f60fb1b926111bc6001958695881a61121661121088610967565b8b6110e8565b53610967565b6111ca83610967565b915b611248575b5050610274929361124261114b61027493610967565b14611154565b909461125382610967565b8611156112d2576112bf6112b9839261129c61127f6f181899199a1a9b1b9c1cb0b131b232b360811b90565b611289600f610967565b831660108110156112c5575b1a60f81b90565b861a6112a88a896110e8565b536112b3600461112a565b90611137565b96611111565b91611227565b6112cd6110d1565b611295565b9461122c565b6112f16112eb6301ffc9a760e01b610234565b91610234565b1490565b156112fc57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b61025e9061137061136b335b611366610bae565b610caf565b6112f5565b6113d9565b1561137c57565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206761732d657374696d61746560601b6044820152606490fd5b9060001990610f21565b906113d2610274610f4292610967565b82546113b8565b6113ee6113e66000610967565b821415611375565b6113f98160016113c2565b61140230610c87565b61143961142f7ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610c87565b9261037560405190565b0390a2565b61025e90611352565b61025e919061145861136b3361135e565b9061146561025e92610c87565b906114706000610967565b9161223a565b9061025e91611447565b61025e919061149161136b3361135e565b6114e2565b1561149d57565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b6114f76114ef6000610967565b835b11611496565b61150b8261150483610c87565b3390612187565b61143961142f7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610c87565b9061025e91611480565b61025e9061155261136b3361135e565b61157a565b506040513d6000823e3d90fd5b610c796102746102749290565b61027490611564565b61150b600061159161158b82610967565b846114f1565b80808080866115a76115a233610c87565b610c87565b8282156115c1575bf1611571576115bc611557565b611571565b506108fc6115af565b61025e90611542565b610274929190611b11565b9050519061025e826102f3565b9061027491602081830312156115de57611603600080fd5b6115de565b9190820391821161103d57565b1561161c57565b60405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d08185b5bdd5b9d0b5bdd5d604a1b6044820152606490fd5b90815260408101929161025e9160200152565b0152565b9361171b611723916116866115a287610c87565b906370a082319161169660405190565b926116a18160e01b90565b84528888888c602088806116b88a600483016109dd565b0381895afa9788156117e8575b6000986117ac575b5086602096946116f6946117019997946116e694611b72565b6040519586948593849360e01b90565b8352600483016109dd565b03915afa90811561179f575b600091611771575b50611608565b821115611615565b6117566117507fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610c87565b93610c87565b9361176c61176360405190565b9283928361165b565b0390a3565b611792915060203d8111611798575b61178a81836104ac565b8101906115eb565b38611715565b503d611780565b6117a7611557565b61170d565b6116e691985096602096946116f6948297946117d76117019b8b3d81116117985761178a81836104ac565b9b94509497995094509496506116cd565b6117f0611557565b6116c5565b9050519061025e826102dd565b9061027491602081830312156117f55761181a600080fd5b6117f5565b80151561024a565b9050519061025e8261181f565b9061027491602081830312156118275761184c600080fd5b611827565b91602061025e92949361166e604082019660008301906109d4565b92506000915061187b82610967565b83131561198f575060209033906119016118d86115a26118b9866118a16115a288610c87565b630dfe1681906118b060405190565b93849260e01b90565b825260049082905afa908115611982575b600091611955575b50610c87565b916118e763a9059cbb96610967565b9561190c6118f460405190565b9788968795869460e01b90565b845260048401611851565b03925af18015611948575b61191e5750565b61193e9060203d8111611941575b61193681836104ac565b810190611834565b50565b503d61192c565b611950611557565b611917565b6119759150873d811161197b575b61196d81836104ac565b810190611802565b386118d2565b503d611963565b61198a611557565b6118ca565b915060209033906119016118d86115a26118b9866119af6115a288610c87565b63d21220a7906118b060405190565b61025e906119ce61136b3361135e565b6119f9565b906001600160a01b0390610f21565b906119f2610274610f4292610c87565b82546119d3565b61025e9060046119e2565b61025e906119be565b61025e90611a1d61136b3361135e565b611a6c565b15611a2957565b60405162461bcd60e51b815260206004820152601b60248201527a71756572794761734c696d69742063616e2774206265207a65726f60281b6044820152606490fd5b61025e90611a85611a7d6000610967565b821415611a22565b60036113c2565b61025e90611a0d565b6102746080611052565b611aa7611a95565b60008082526020820181905260408201819052606082015290565b610274611a9f565b90610284906102d4565b909161027493611b03611b0c92611ae9600090565b50611afd611af5611ac2565b966040880152565b85611aca565b60208401611aca565b611f06565b91611b289161027493611b22600090565b50611bf7565b611ec4565b15611b3457565b60405162461bcd60e51b8152602060048201526016602482015275125b9cdd59999a58da595b9d08185b5bdd5b9d13dd5d60521b6044820152606490fd5b611ba3611b9f611b8c8661025e98979596611bab95611bf7565b611b996111d06000610967565b90611cfd565b9390565b831015611b2d565b91611bb530610c87565b611bc7611bc1836102d4565b916102d4565b03611bd157505050565b611bdd61025e93610c87565b612187565b611bef6102746102749290565b62ffffff1690565b6102749192611c3e611c14611c4393611c0e611ac2565b50610967565b611c37600093611c2e611c25611a95565b98868a01611aca565b60208801611aca565b6040860152565b611be2565b62ffffff166060830152565b61027490516102d4565b919061027490604084820312611c7d575b611c7481856115de565b936020016115de565b611c85600080fd5b611c6a565b610284906102c8565b9193611cc76102749694611cc0611cd19497611cb760a088019960008901906109d4565b15156020870152565b6040850152565b6060830190611c8a565b6080818403910152610540565b600160ff1b8114611cf0575b60000390565b611cf8611013565b611cea565b906040611d6092611d0c600090565b50918290611d8a60006115a2611d95611d56611d2787611c4f565b611d50611d4a611d4460208b0193611d3e85611c4f565b90611e2d565b9b611c4f565b91611c4f565b906120cc565b92819a9199610c87565b9463128acb0892611d7a89611d7430610c87565b99015190565b6040519b8c998a98899760e01b90565b875260048701611c93565b03925af1908115611dfe575b6000928392611dcc575b5015611dbe5750610d4b61027491611cde565b6102749150610d4b90611cde565b909250611df0915060403d8111611df7575b611de881836104ac565b810190611c59565b9138611dab565b503d611dde565b611e06611557565b611da1565b91602061025e929493611e26604082019660008301906109d4565b01906109d4565b602090611e5c6115a27f0000000000000000000000000000000000000000000000000000000000000000610c87565b611e7d63d9a641e1611e88611e7060405190565b9687958694859460e01b90565b845260048401611e0b565b03915afa908115611eb7575b600091611e9f575090565b610274915060203d811161197b5761196d81836104ac565b611ebf611557565b611e94565b90600091611ee0611ed482611c4f565b611d3e60208401611c4f565b611eed610f036000611571565b611ef6826102d4565b03611eff575050565b6102749293505b6040611f4191611f3b93611f18600090565b50611f31611f2582611c4f565b611d5060208401611c4f565b9381969192015190565b91611f8d565b9115611dbe5750610d4b61027491611cde565b611f8661025e94611f7f606094989795611f76608086019a60008701906109d4565b15156020850152565b6040830152565b0190611c8a565b90611fd8611fdd9295939495611fc9611fa4600090565b978897611fb060405190565b6348202e9b60e11b602082015295869460248601611f54565b602082018103825203826104ac565b61202b565b90611fe55750565b9092506106d591506020611ff7825190565b818301019101611c59565b61027490546102d4565b3d156120265761201b3d611092565b903d6000602084013e565b606090565b60008091612037600090565b506120426004612002565b9061204d6003610cd5565b9160208201915192fa6106d561200c565b61027473fffd8963efd1fc6a506488495d951d5263988d26611564565b61208761208d916102c8565b916102c8565b9003906001600160a01b03821161103d57565b6102746401000276a3611564565b6120876120ba916102c8565b01906001600160a01b03821161103d57565b90611bc16120e2916120dc600090565b506102d4565b10908115612105576102746120f56120a0565b6120ff6001611564565b906120ae565b61027461211061205e565b61211a6001611564565b9061207b565b61025e9061212c610bae565b610d1e565b61025e9061213d610bae565b610e84565b61025e9033610791565b61025e90339061216461215d610974565b9182610d1e565b610ef2565b61218261217c6102749263ffffffff1690565b60e01b90565b610234565b6121ca6004926121bb61025e956121a163a9059cbb612169565b926121ab60405190565b9687946020860190815201611851565b602082018103825203836104ac565b6123bb565b156121d657565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b6121ca6004926121bb61025e9561226760008461225682610967565b8414918215612274575b50506121cf565b6121a163095ea7b3612169565b909150602061228289610c87565b63dd62ed3e90611e7d61229430610c87565b926122ae6122a160405190565b9788958694859460e01b90565b03915afa9182156122ff575b6000926122d7575b5061114b6122cf91610967565b148438612260565b6122cf9192506122f761114b9160203d81116117985761178a81836104ac565b9291506122c2565b612307611557565b6122ba565b1561231357565b60405162461bcd60e51b815280610e65600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b1561236357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6000916123c88392610c87565b9082602082019151925af16123e46123de61200c565b9161230c565b80516123f361114b6000610967565b116123fb5750565b61241781602061240c61025e945190565b818301019101611834565b61235c56fea264697066735822122053fd9073949dd211309f2e8566a0a4df595f414150b01f0f2790b355234f24e064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2899,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2901,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 14502,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "quoterGasLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14504,
        "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
        "label": "quoter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/AlgebraAdapter.sol:AlgebraAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}