{
  "address": "0x8C0971be6a98DcC61958fFDEc4259e5ee833689b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wNative",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xffa2c1ddebd76a7325ffab076a59372c66a2ee8864710ff6e0c789c8d802d7d0",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0x8C0971be6a98DcC61958fFDEc4259e5ee833689b",
    "transactionIndex": 1,
    "gasUsed": "21827530",
    "logsBloom": "0x
    "blockHash": "0x31c5bc08b37949a734a16d6f5879a06b608d1439c0d338d6dfaa1aed915695df",
    "transactionHash": "0xffa2c1ddebd76a7325ffab076a59372c66a2ee8864710ff6e0c789c8d802d7d0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 183265779,
        "transactionHash": "0xffa2c1ddebd76a7325ffab076a59372c66a2ee8864710ff6e0c789c8d802d7d0",
        "address": "0x8C0971be6a98DcC61958fFDEc4259e5ee833689b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x31c5bc08b37949a734a16d6f5879a06b608d1439c0d338d6dfaa1aed915695df"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 183265779,
        "transactionHash": "0xffa2c1ddebd76a7325ffab076a59372c66a2ee8864710ff6e0c789c8d802d7d0",
        "address": "0x8C0971be6a98DcC61958fFDEc4259e5ee833689b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x31c5bc08b37949a734a16d6f5879a06b608d1439c0d338d6dfaa1aed915695df"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 183265779,
        "transactionHash": "0xffa2c1ddebd76a7325ffab076a59372c66a2ee8864710ff6e0c789c8d802d7d0",
        "address": "0x8C0971be6a98DcC61958fFDEc4259e5ee833689b",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000008c0971be6a98dcc61958ffdec4259e5ee833689b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000013880",
        "logIndex": 2,
        "blockHash": "0x31c5bc08b37949a734a16d6f5879a06b608d1439c0d338d6dfaa1aed915695df"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 183265779,
        "transactionHash": "0xffa2c1ddebd76a7325ffab076a59372c66a2ee8864710ff6e0c789c8d802d7d0",
        "address": "0x8C0971be6a98DcC61958fFDEc4259e5ee833689b",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000008c0971be6a98dcc61958ffdec4259e5ee833689b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000013880",
        "logIndex": 3,
        "blockHash": "0x31c5bc08b37949a734a16d6f5879a06b608d1439c0d338d6dfaa1aed915695df"
      }
    ],
    "blockNumber": 183265779,
    "cumulativeGasUsed": "21827530",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    80000
  ],
  "solcInputHash": "53947a290f318b2ac07d10649c872dfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/WNativeAdapter.sol\":\"WNativeAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":0},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x107a35cefab5921f72dc79a2035e4abedf6975b2569649e2029b694019601b59\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/WNativeAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../YakAdapter.sol\\\";\\n\\ncontract WNativeAdapter is YakAdapter {\\n    address internal immutable WNATIVE;\\n\\n    constructor(\\n        address _wNative,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(\\\"WAvaxAdapter\\\", _swapGasEstimate) {\\n        WNATIVE = _wNative;\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 amountOut) {\\n        if (_tokenIn == WNATIVE && _tokenOut == WNATIVE)\\n            amountOut = _amountIn;\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256,\\n        address,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        _returnTo(_tokenOut, _amountIn, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xebe86fc9a4885ab56eface44b75d734aef7184b3f321dab4dbeb74138605f3af\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200003b575b62000020620000196200012f565b90620001d8565b6040516119aa620007d182396080518161154a01526119aa90f35b62000044600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008857604052565b620000926200004f565b604052565b90620000ae620000a660405190565b928362000066565b565b6001600160a01b031690565b90565b620000ca81620000b0565b036200004a57565b90505190620000ae82620000bf565b80620000ca565b90505190620000ae82620000e1565b9190620000bc9060408482031262000120575b620001168185620000d2565b93602001620000e8565b62000129600080fd5b6200010a565b620001526200217b80380380620001468162000097565b928339810190620000f7565b9091565b60209062000177906001600160401b0381116200017b57601f01601f191690565b0190565b620001856200004f565b601f01601f191690565b90620001a56200019f8362000156565b62000097565b918252565b620001b6600c6200018f565b6b2ba0bb30bc20b230b83a32b960a11b602082015290565b620000bc620001aa565b90620000ae91620001f382620001ed620001ce565b620001fc565b608052620007c5565b9062000216620000ae92620002106200025c565b62000615565b620007c5565b620000bc620000bc620000bc9290565b620000bc60006200021c565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b620000ae336200027681620002706200022c565b62000280565b6200027062000238565b90620000ae9162000302565b905b600052602052604060002090565b620000bc90620000b0906001600160a01b031682565b620000bc906200029c565b620000bc90620002b2565b906200028e90620002bd565b9060ff905b9181191691161790565b90620002f6620000bc620002fe92151590565b8254620002d4565b9055565b906200031762000313828462000391565b1590565b62000320575050565b620003466001620003408360006200033987826200028c565b01620002c8565b620002e3565b33906200038062000379620003797f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92620002bd565b926200038b60405190565b600090a4565b620000bc91620003a99162000339600091826200028c565b5460ff1690565b15620003b857565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d650000000000000000000000006044820152606490fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156200043b575b60208310146200043157565b620000ae620003fd565b91607f169162000425565b9160001960089290920291821b911b620002d9565b919062000470620000bc620002fe936200021c565b90835462000446565b620000ae916000916200045b565b81811062000493575050565b80620004a3600060019362000479565b0162000487565b9190601f8111620004ba57505050565b620004ce620000ae93600052602060002090565b906020601f840181900483019310620004f2575b6020601f90910104019062000487565b9091508190620004e2565b9060001960089091021c191690565b816200051891620004fd565b906002021790565b906200052a815190565b906001600160401b038211620005f9575b62000553826200054c855462000414565b85620004aa565b602090601f83116001146200058657620002fe9291600091836200057a575b50506200050c565b01519050388062000572565b601f198316916200059c85600052602060002090565b9260005b818110620005e057509160029391856001969410620005c3575b50505002019055565b620005d5910151601f841690620004fd565b9055388080620005ba565b91936020600181928787015181550195019201620005a0565b620006036200004f565b6200053b565b90620000ae9162000520565b620000ae906200064362000627825190565b6200063b6200063760006200021c565b9190565b1415620003b0565b600262000609565b156200065357565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b620000ae90620006cd620006c733620006c162000238565b62000391565b6200064b565b62000747565b15620006db57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b9060001990620002d9565b906200073f620000bc620002fe926200021c565b825462000720565b620007606200075760006200021c565b821415620006d3565b6200076d8160016200072b565b6200077830620002bd565b620007c0620007a87ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92620002bd565b92620007b360405190565b9182918290815260200190565b0390a2565b620000ae90620006a956fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101ae57806306fdde03146101a5578063248a9ca31461019c5780632f2ff15d1461019357806336568abe1461018a5780634ebb79161461018157806369cff80d146101785780636b453c1f1461016f5780637ae267731461016657806384a33e631461015d5780638980f11f146101545780638bb9c5bf1461014b57806391d1485414610142578063a217fddf14610139578063d547741f14610130578063d8baf7cf14610127578063eab90da61461011e578063ef99893a14610115578063f2fde38b1461010c5763f87422540361000e5761010761093b565b61000e565b506101076108e8565b506101076108bd565b50610107610854565b506101076107d3565b506101076107ab565b50610107610781565b50610107610737565b50610107610710565b506101076106e8565b50610107610690565b50610107610668565b50610107610619565b506101076105d2565b50610107610589565b50610107610561565b50610107610534565b506101076104a6565b50610107610440565b50610107610210565b600080fd5b6001600160e01b03191690565b6101d2816101bc565b036101b757565b905035906101e6826101c9565b565b906101fc916020818303126101ff576101d9565b90565b610207600080fd5b6101d9565b9052565b5034610243575b61023f61022d6102283660046101e8565b610965565b60405191829182901515815260200190565b0390f35b61024b600080fd5b610217565b600091031261025b57565b6101e6600080fd5b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102b4575b60208310146102ac57565b6101e661027a565b91607f16916102a1565b805460009392916102db6102d183610291565b8085529360200190565b916001811690811561032d57506001146102f457505050565b6103079192939450600052602060002090565b916000925b8184106103195750500190565b80548484015260209093019260010161030c565b92949550505060ff1916825215156020020190565b906101fc916102be565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761038e57604052565b610396610356565b604052565b906101e66103b5926103ac60405190565b93848092610342565b038361036d565b6101fc911561039b576103cd610263565b61039b565b6101fc600060026103bc565b60005b8381106103f15750506000910152565b81810151838201526020016103e1565b61042261034c60209361042b93610416815190565b80835293849260200190565b958691016103de565b0190565b60208082526101fc92910190610401565b5034610469575b610452366004610250565b61023f61045d6103d2565b6040519182918261042f565b610471600080fd5b610447565b806101d2565b905035906101e682610476565b906101fc916020818303121561047c576104a1600080fd5b61047c565b50346104d4575b61023f6104c36104be366004610489565b610a19565b6040515b9182918290815260200190565b6104dc600080fd5b6104ad565b6001600160a01b031690565b6101d2816104e1565b905035906101e6826104ed565b91906101fc90604084820312610527575b61051e818561047c565b936020016104f6565b61052f600080fd5b610514565b5034610554575b61054f610549366004610503565b90610a58565b604051005b61055c600080fd5b61053b565b503461057c575b61054f610576366004610503565b90610c2a565b610584600080fd5b610568565b50346105a3575b61054f61059e366004610489565b6112fd565b6105ab600080fd5b610590565b6101fc916008021c81565b906101fc91546105b0565b6101fc600060016105bb565b50346105ef575b6105e4366004610250565b61023f6104c36105c6565b6105f7600080fd5b6105d9565b906101fc91602081830312156104f657610614600080fd5b6104f6565b5034610633575b61054f61062e3660046105fc565b6115df565b61063b600080fd5b610620565b91906101fc9060408482031261065b575b61051e81856104f6565b610663600080fd5b610651565b5034610683575b61054f61067d366004610640565b906111a9565b61068b600080fd5b61066f565b50346106aa575b61054f6106a5366004610489565b611171565b6106b2600080fd5b610697565b91906101fc906040848203126106db575b6106d281856104f6565b9360200161047c565b6106e3600080fd5b6106c8565b5034610703575b61054f6106fd3660046106b7565b9061126b565b61070b600080fd5b6106ef565b503461072a575b61054f610725366004610489565b611601565b610732600080fd5b610717565b5034610755575b61023f61022d61074f366004610503565b906109e9565b61075d600080fd5b61073e565b6101fc6101fc6101fc9290565b6101fc6000610762565b6101fc61076f565b503461079e575b610793366004610250565b61023f6104c3610779565b6107a6600080fd5b610788565b50346107c6575b61054f6107c0366004610503565b90610bbc565b6107ce600080fd5b6107b2565b50346107ed575b61054f6107e83660046105fc565b6115f0565b6107f5600080fd5b6107da565b919060a083820312610847575b610811818461047c565b9261081f826020830161047c565b926101fc61083084604085016104f6565b9361083e81606086016104f6565b936080016104f6565b61084f600080fd5b610807565b5034610872575b61054f6108693660046107fa565b939290926113be565b61087a600080fd5b61085b565b90916060828403126108b0575b6101fc610899848461047c565b936108a781602086016104f6565b936040016104f6565b6108b8600080fd5b61088c565b50346108db575b61023f6104c36108d536600461087f565b91611306565b6108e3600080fd5b6108c4565b5034610902575b61054f6108fd3660046105fc565b61160b565b61090a600080fd5b6108ef565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b6101fc61090f565b5034610958575b61094d366004610250565b61023f6104c3610933565b610960600080fd5b610942565b610975637965db0b60e01b6101bc565b61097e826101bc565b1490811561098a575090565b6101fc915061100b565b905b600052602052604060002090565b6101fc906104e1906001600160a01b031682565b6101fc906109a4565b6101fc906109b8565b90610996906109c1565b6101fc905b60ff1690565b6101fc90546109d4565b6101fc91610a03916109fd60009182610994565b016109ca565b6109df565b6101fc9081565b6101fc9054610a08565b6001610a326101fc92610a2a600090565b506000610994565b01610a0f565b906101e691610a4e610a4982610a19565b610a62565b906101e691610c79565b906101e691610a38565b6101e6903390610afe565b6101fc9081906001600160a01b031681565b6101fc90610762565b61042b610aa092602092610a9a815190565b94859290565b938491016103de565b610ae16101fc9392610adb610adb9376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170190565b90610a88565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90610b10610b0c82846109e9565b1590565b610b18575050565b610b9d916101fc610b51610b4b610b31610b85956109b8565b610b45610b3f601492610a6d565b91610762565b90610ed7565b92610a7f565b610b60602091610b4583610762565b92610b79610b6d60405190565b94859384019283610aa9565b9081038252038261036d565b60405162461bcd60e51b81529182916004830161042f565b0390fd5b906101e691610bb2610a4982610a19565b906101e691610cef565b906101e691610ba1565b15610bcd57565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b6101e69190610c4a610c3b336104e1565b610c44846104e1565b14610bc6565b610cef565b9060ff905b9181191691161790565b90610c6e6101fc610c7592151590565b8254610c4f565b9055565b90610c87610b0c82846109e9565b610c8f575050565b610ca96001610ca48360006109fd8782610994565b610c5e565b3390610cdf610cd9610cd97f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926109c1565b92610ce960405190565b600090a4565b90610cfa81836109e9565b610d02575050565b610d166000610ca483826109fd8782610994565b3390610cdf610cd9610cd97ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b50634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610d7057565b6101e6610d46565b91908201809211610d7057565b906101e6610d9260405190565b928361036d565b60209061042b906001600160401b038111610db857601f01601f191690565b610dc0610356565b61034c565b90610dd7610dd283610d99565b610d85565b918252565b369037565b906101e6610df7610df184610dc5565b93610d99565b601f190160208401610ddc565b50634e487b7160e01b600052603260045260246000fd5b906001602091610e29845190565b811015610e37575b02010190565b610e3f610e04565b610e31565b6001908015610e51570390565b610e59610d46565b0390565b6109d96101fc6101fc9290565b6101fc90610e82610e7e6101fc9460ff1690565b9190565b901c90565b15610e8e57565b60405162461bcd60e51b815280610b9d600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290610f08610f03610ef483610eef86610762565b610d5d565b610efd85610762565b90610d78565b610de1565b916000916030610f20610f1a85610762565b86610e1b565b53610f58610f4f600f60fb1b92610eef6001958695881a610f49610f4388610762565b8b610e1b565b53610762565b610efd83610762565b915b610f7b575b50506101fc9293610f75610e7e6101fc93610762565b14610e87565b9094610f8682610762565b86111561100557610ff2610fec8392610fcf610fb26f181899199a1a9b1b9c1cb0b131b232b360811b90565b610fbc600f610762565b83166010811015610ff8575b1a60f81b90565b861a610fdb8a89610e1b565b53610fe66004610e5d565b90610e6a565b96610e44565b91610f5a565b611000610e04565b610fc8565b94610f5f565b61102461101e6301ffc9a760e01b6101bc565b916101bc565b1490565b1561102f57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b6101e6906110a361109e335b61109961090f565b6109e9565b611028565b61110c565b156110af57565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206761732d657374696d61746560601b6044820152606490fd5b9060001990610c54565b906111056101fc610c7592610762565b82546110eb565b6111216111196000610762565b8214156110a8565b61112c8160016110f5565b611135306109c1565b61116c6111627ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a926109c1565b926104c760405190565b0390a2565b6101e690611085565b6101e6919061118b61109e33611091565b906111986101e6926109c1565b906111a36000610762565b91611736565b906101e69161117a565b6101e691906111c461109e33611091565b611215565b156111d057565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61122a6112226000610762565b835b116111c9565b61123e82611237836109c1565b3390611661565b61116c6111627f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28926109c1565b906101e6916111b3565b6101e69061128561109e33611091565b6112ad565b506040513d6000823e3d90fd5b6104e16101fc6101fc9290565b6101fc90611297565b61123e60006112c46112be82610762565b84611224565b80808080866112da6112d5336109c1565b6109c1565b8282156112f4575bf16112a4576112ef61128a565b6112a4565b506108fc6112e2565b6101e690611275565b6101fc929190611541565b905051906101e682610476565b906101fc916020818303121561131157611336600080fd5b611311565b61020c906104e1565b6020810192916101e6919061133b565b91908203918211610d7057565b1561136857565b60405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d08185b5bdd5b9d0b5bdd5d604a1b6044820152606490fd5b9081526040810192916101e69160200152565b0152565b9361146761146f916113d26112d5876109c1565b906370a08231916113e260405190565b926113ed8160e01b90565b84528888888c602088806114048a60048301611344565b0381895afa978815611534575b6000986114f8575b5086602096946114429461144d999794611432946115a8565b6040519586948593849360e01b90565b835260048301611344565b03915afa9081156114eb575b6000916114bd575b50611354565b821115611361565b6114a261149c7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa936109c1565b936109c1565b936114b86114af60405190565b928392836113a7565b0390a3565b6114de915060203d81116114e4575b6114d6818361036d565b81019061131e565b38611461565b503d6114cc565b6114f361128a565b611459565b61143291985096602096946114429482979461152361144d9b8b3d81116114e4576114d6818361036d565b9b9450949799509450949650611419565b61153c61128a565b611411565b919291906000937f00000000000000000000000000000000000000000000000000000000000000009161157c611576846104e1565b916104e1565b149182611591575b505061158d5750565b9150565b6115a0919250611576906104e1565b143880611584565b9150506101e6926115b8306109c1565b6115c4611576836104e1565b036115ce57505050565b6115da6101e6936109c1565b611661565b6101e6906115eb61090f565b610a58565b6101e6906115fc61090f565b610bbc565b6101e69033610576565b6101e690339061162361161c61076f565b9182610a58565b610c2a565b61164161163b6101fc9263ffffffff1690565b60e01b90565b6101bc565b9160206101e69294936113ba6040820196600083019061133b565b6116a46004926116956101e69561167b63a9059cbb611628565b9261168560405190565b9687946020860190815201611646565b6020820181038252038361036d565b611913565b9160206101e69294936116c46040820196600083019061133b565b019061133b565b156116d257565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b6116a46004926116956101e69561176360008461175282610762565b8414918215611770575b50506116cb565b61167b63095ea7b3611628565b909150602061177e896109c1565b63dd62ed3e906117aa611790306109c1565b926117b561179d60405190565b9788958694859460e01b90565b8452600484016116a9565b03915afa918215611806575b6000926117de575b50610e7e6117d691610762565b14843861175c565b6117d69192506117fe610e7e9160203d81116114e4576114d6818361036d565b9291506117c9565b61180e61128a565b6117c1565b3d1561182d576118223d610dc5565b903d6000602084013e565b606090565b1561183957565b60405162461bcd60e51b815280610b9d600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101d2565b905051906101e682611882565b906101fc916020818303121561188a576118af600080fd5b61188a565b156118bb57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b60009161192083926109c1565b9082602082019151925af161193c611936611813565b91611832565b805161194b610e7e6000610762565b116119535750565b61196f8160206119646101e6945190565b818301019101611897565b6118b456fea2646970667358221220b54e48d3a1379f2961e97af2fda71af8c8af5f26f0873fcf043ce19472553ec164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101ae57806306fdde03146101a5578063248a9ca31461019c5780632f2ff15d1461019357806336568abe1461018a5780634ebb79161461018157806369cff80d146101785780636b453c1f1461016f5780637ae267731461016657806384a33e631461015d5780638980f11f146101545780638bb9c5bf1461014b57806391d1485414610142578063a217fddf14610139578063d547741f14610130578063d8baf7cf14610127578063eab90da61461011e578063ef99893a14610115578063f2fde38b1461010c5763f87422540361000e5761010761093b565b61000e565b506101076108e8565b506101076108bd565b50610107610854565b506101076107d3565b506101076107ab565b50610107610781565b50610107610737565b50610107610710565b506101076106e8565b50610107610690565b50610107610668565b50610107610619565b506101076105d2565b50610107610589565b50610107610561565b50610107610534565b506101076104a6565b50610107610440565b50610107610210565b600080fd5b6001600160e01b03191690565b6101d2816101bc565b036101b757565b905035906101e6826101c9565b565b906101fc916020818303126101ff576101d9565b90565b610207600080fd5b6101d9565b9052565b5034610243575b61023f61022d6102283660046101e8565b610965565b60405191829182901515815260200190565b0390f35b61024b600080fd5b610217565b600091031261025b57565b6101e6600080fd5b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102b4575b60208310146102ac57565b6101e661027a565b91607f16916102a1565b805460009392916102db6102d183610291565b8085529360200190565b916001811690811561032d57506001146102f457505050565b6103079192939450600052602060002090565b916000925b8184106103195750500190565b80548484015260209093019260010161030c565b92949550505060ff1916825215156020020190565b906101fc916102be565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761038e57604052565b610396610356565b604052565b906101e66103b5926103ac60405190565b93848092610342565b038361036d565b6101fc911561039b576103cd610263565b61039b565b6101fc600060026103bc565b60005b8381106103f15750506000910152565b81810151838201526020016103e1565b61042261034c60209361042b93610416815190565b80835293849260200190565b958691016103de565b0190565b60208082526101fc92910190610401565b5034610469575b610452366004610250565b61023f61045d6103d2565b6040519182918261042f565b610471600080fd5b610447565b806101d2565b905035906101e682610476565b906101fc916020818303121561047c576104a1600080fd5b61047c565b50346104d4575b61023f6104c36104be366004610489565b610a19565b6040515b9182918290815260200190565b6104dc600080fd5b6104ad565b6001600160a01b031690565b6101d2816104e1565b905035906101e6826104ed565b91906101fc90604084820312610527575b61051e818561047c565b936020016104f6565b61052f600080fd5b610514565b5034610554575b61054f610549366004610503565b90610a58565b604051005b61055c600080fd5b61053b565b503461057c575b61054f610576366004610503565b90610c2a565b610584600080fd5b610568565b50346105a3575b61054f61059e366004610489565b6112fd565b6105ab600080fd5b610590565b6101fc916008021c81565b906101fc91546105b0565b6101fc600060016105bb565b50346105ef575b6105e4366004610250565b61023f6104c36105c6565b6105f7600080fd5b6105d9565b906101fc91602081830312156104f657610614600080fd5b6104f6565b5034610633575b61054f61062e3660046105fc565b6115df565b61063b600080fd5b610620565b91906101fc9060408482031261065b575b61051e81856104f6565b610663600080fd5b610651565b5034610683575b61054f61067d366004610640565b906111a9565b61068b600080fd5b61066f565b50346106aa575b61054f6106a5366004610489565b611171565b6106b2600080fd5b610697565b91906101fc906040848203126106db575b6106d281856104f6565b9360200161047c565b6106e3600080fd5b6106c8565b5034610703575b61054f6106fd3660046106b7565b9061126b565b61070b600080fd5b6106ef565b503461072a575b61054f610725366004610489565b611601565b610732600080fd5b610717565b5034610755575b61023f61022d61074f366004610503565b906109e9565b61075d600080fd5b61073e565b6101fc6101fc6101fc9290565b6101fc6000610762565b6101fc61076f565b503461079e575b610793366004610250565b61023f6104c3610779565b6107a6600080fd5b610788565b50346107c6575b61054f6107c0366004610503565b90610bbc565b6107ce600080fd5b6107b2565b50346107ed575b61054f6107e83660046105fc565b6115f0565b6107f5600080fd5b6107da565b919060a083820312610847575b610811818461047c565b9261081f826020830161047c565b926101fc61083084604085016104f6565b9361083e81606086016104f6565b936080016104f6565b61084f600080fd5b610807565b5034610872575b61054f6108693660046107fa565b939290926113be565b61087a600080fd5b61085b565b90916060828403126108b0575b6101fc610899848461047c565b936108a781602086016104f6565b936040016104f6565b6108b8600080fd5b61088c565b50346108db575b61023f6104c36108d536600461087f565b91611306565b6108e3600080fd5b6108c4565b5034610902575b61054f6108fd3660046105fc565b61160b565b61090a600080fd5b6108ef565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b6101fc61090f565b5034610958575b61094d366004610250565b61023f6104c3610933565b610960600080fd5b610942565b610975637965db0b60e01b6101bc565b61097e826101bc565b1490811561098a575090565b6101fc915061100b565b905b600052602052604060002090565b6101fc906104e1906001600160a01b031682565b6101fc906109a4565b6101fc906109b8565b90610996906109c1565b6101fc905b60ff1690565b6101fc90546109d4565b6101fc91610a03916109fd60009182610994565b016109ca565b6109df565b6101fc9081565b6101fc9054610a08565b6001610a326101fc92610a2a600090565b506000610994565b01610a0f565b906101e691610a4e610a4982610a19565b610a62565b906101e691610c79565b906101e691610a38565b6101e6903390610afe565b6101fc9081906001600160a01b031681565b6101fc90610762565b61042b610aa092602092610a9a815190565b94859290565b938491016103de565b610ae16101fc9392610adb610adb9376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170190565b90610a88565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90610b10610b0c82846109e9565b1590565b610b18575050565b610b9d916101fc610b51610b4b610b31610b85956109b8565b610b45610b3f601492610a6d565b91610762565b90610ed7565b92610a7f565b610b60602091610b4583610762565b92610b79610b6d60405190565b94859384019283610aa9565b9081038252038261036d565b60405162461bcd60e51b81529182916004830161042f565b0390fd5b906101e691610bb2610a4982610a19565b906101e691610cef565b906101e691610ba1565b15610bcd57565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b6101e69190610c4a610c3b336104e1565b610c44846104e1565b14610bc6565b610cef565b9060ff905b9181191691161790565b90610c6e6101fc610c7592151590565b8254610c4f565b9055565b90610c87610b0c82846109e9565b610c8f575050565b610ca96001610ca48360006109fd8782610994565b610c5e565b3390610cdf610cd9610cd97f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926109c1565b92610ce960405190565b600090a4565b90610cfa81836109e9565b610d02575050565b610d166000610ca483826109fd8782610994565b3390610cdf610cd9610cd97ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b50634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610d7057565b6101e6610d46565b91908201809211610d7057565b906101e6610d9260405190565b928361036d565b60209061042b906001600160401b038111610db857601f01601f191690565b610dc0610356565b61034c565b90610dd7610dd283610d99565b610d85565b918252565b369037565b906101e6610df7610df184610dc5565b93610d99565b601f190160208401610ddc565b50634e487b7160e01b600052603260045260246000fd5b906001602091610e29845190565b811015610e37575b02010190565b610e3f610e04565b610e31565b6001908015610e51570390565b610e59610d46565b0390565b6109d96101fc6101fc9290565b6101fc90610e82610e7e6101fc9460ff1690565b9190565b901c90565b15610e8e57565b60405162461bcd60e51b815280610b9d600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290610f08610f03610ef483610eef86610762565b610d5d565b610efd85610762565b90610d78565b610de1565b916000916030610f20610f1a85610762565b86610e1b565b53610f58610f4f600f60fb1b92610eef6001958695881a610f49610f4388610762565b8b610e1b565b53610762565b610efd83610762565b915b610f7b575b50506101fc9293610f75610e7e6101fc93610762565b14610e87565b9094610f8682610762565b86111561100557610ff2610fec8392610fcf610fb26f181899199a1a9b1b9c1cb0b131b232b360811b90565b610fbc600f610762565b83166010811015610ff8575b1a60f81b90565b861a610fdb8a89610e1b565b53610fe66004610e5d565b90610e6a565b96610e44565b91610f5a565b611000610e04565b610fc8565b94610f5f565b61102461101e6301ffc9a760e01b6101bc565b916101bc565b1490565b1561102f57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b6101e6906110a361109e335b61109961090f565b6109e9565b611028565b61110c565b156110af57565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206761732d657374696d61746560601b6044820152606490fd5b9060001990610c54565b906111056101fc610c7592610762565b82546110eb565b6111216111196000610762565b8214156110a8565b61112c8160016110f5565b611135306109c1565b61116c6111627ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a926109c1565b926104c760405190565b0390a2565b6101e690611085565b6101e6919061118b61109e33611091565b906111986101e6926109c1565b906111a36000610762565b91611736565b906101e69161117a565b6101e691906111c461109e33611091565b611215565b156111d057565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61122a6112226000610762565b835b116111c9565b61123e82611237836109c1565b3390611661565b61116c6111627f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28926109c1565b906101e6916111b3565b6101e69061128561109e33611091565b6112ad565b506040513d6000823e3d90fd5b6104e16101fc6101fc9290565b6101fc90611297565b61123e60006112c46112be82610762565b84611224565b80808080866112da6112d5336109c1565b6109c1565b8282156112f4575bf16112a4576112ef61128a565b6112a4565b506108fc6112e2565b6101e690611275565b6101fc929190611541565b905051906101e682610476565b906101fc916020818303121561131157611336600080fd5b611311565b61020c906104e1565b6020810192916101e6919061133b565b91908203918211610d7057565b1561136857565b60405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d08185b5bdd5b9d0b5bdd5d604a1b6044820152606490fd5b9081526040810192916101e69160200152565b0152565b9361146761146f916113d26112d5876109c1565b906370a08231916113e260405190565b926113ed8160e01b90565b84528888888c602088806114048a60048301611344565b0381895afa978815611534575b6000986114f8575b5086602096946114429461144d999794611432946115a8565b6040519586948593849360e01b90565b835260048301611344565b03915afa9081156114eb575b6000916114bd575b50611354565b821115611361565b6114a261149c7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa936109c1565b936109c1565b936114b86114af60405190565b928392836113a7565b0390a3565b6114de915060203d81116114e4575b6114d6818361036d565b81019061131e565b38611461565b503d6114cc565b6114f361128a565b611459565b61143291985096602096946114429482979461152361144d9b8b3d81116114e4576114d6818361036d565b9b9450949799509450949650611419565b61153c61128a565b611411565b919291906000937f00000000000000000000000000000000000000000000000000000000000000009161157c611576846104e1565b916104e1565b149182611591575b505061158d5750565b9150565b6115a0919250611576906104e1565b143880611584565b9150506101e6926115b8306109c1565b6115c4611576836104e1565b036115ce57505050565b6115da6101e6936109c1565b611661565b6101e6906115eb61090f565b610a58565b6101e6906115fc61090f565b610bbc565b6101e69033610576565b6101e690339061162361161c61076f565b9182610a58565b610c2a565b61164161163b6101fc9263ffffffff1690565b60e01b90565b6101bc565b9160206101e69294936113ba6040820196600083019061133b565b6116a46004926116956101e69561167b63a9059cbb611628565b9261168560405190565b9687946020860190815201611646565b6020820181038252038361036d565b611913565b9160206101e69294936116c46040820196600083019061133b565b019061133b565b156116d257565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b6116a46004926116956101e69561176360008461175282610762565b8414918215611770575b50506116cb565b61167b63095ea7b3611628565b909150602061177e896109c1565b63dd62ed3e906117aa611790306109c1565b926117b561179d60405190565b9788958694859460e01b90565b8452600484016116a9565b03915afa918215611806575b6000926117de575b50610e7e6117d691610762565b14843861175c565b6117d69192506117fe610e7e9160203d81116114e4576114d6818361036d565b9291506117c9565b61180e61128a565b6117c1565b3d1561182d576118223d610dc5565b903d6000602084013e565b606090565b1561183957565b60405162461bcd60e51b815280610b9d600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101d2565b905051906101e682611882565b906101fc916020818303121561188a576118af600080fd5b61188a565b156118bb57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b60009161192083926109c1565b9082602082019151925af161193c611936611813565b91611832565b805161194b610e7e6000610762565b116119535750565b61196f8160206119646101e6945190565b818301019101611897565b6118b456fea2646970667358221220b54e48d3a1379f2961e97af2fda71af8c8af5f26f0873fcf043ce19472553ec164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2899,
        "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2901,
        "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}