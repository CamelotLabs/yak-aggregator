{
  "address": "0x763b382BA5FBBC697F58B327C2baC05fA1fB51B3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x88d4ceb3f6049bc01d23a20962d0b413c20120171b1a5af3a009106c5d692bd6",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0x763b382BA5FBBC697F58B327C2baC05fA1fB51B3",
    "transactionIndex": 1,
    "gasUsed": "24103344",
    "logsBloom": "0x
    "blockHash": "0xa82e4a38924d2ed170355224364f7810ac629894540cf5440cf4f22ad45daa73",
    "transactionHash": "0x88d4ceb3f6049bc01d23a20962d0b413c20120171b1a5af3a009106c5d692bd6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 183265738,
        "transactionHash": "0x88d4ceb3f6049bc01d23a20962d0b413c20120171b1a5af3a009106c5d692bd6",
        "address": "0x763b382BA5FBBC697F58B327C2baC05fA1fB51B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa82e4a38924d2ed170355224364f7810ac629894540cf5440cf4f22ad45daa73"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 183265738,
        "transactionHash": "0x88d4ceb3f6049bc01d23a20962d0b413c20120171b1a5af3a009106c5d692bd6",
        "address": "0x763b382BA5FBBC697F58B327C2baC05fA1fB51B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa82e4a38924d2ed170355224364f7810ac629894540cf5440cf4f22ad45daa73"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 183265738,
        "transactionHash": "0x88d4ceb3f6049bc01d23a20962d0b413c20120171b1a5af3a009106c5d692bd6",
        "address": "0x763b382BA5FBBC697F58B327C2baC05fA1fB51B3",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000763b382ba5fbbc697f58b327c2bac05fa1fb51b3"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000003a34c",
        "logIndex": 2,
        "blockHash": "0xa82e4a38924d2ed170355224364f7810ac629894540cf5440cf4f22ad45daa73"
      }
    ],
    "blockNumber": 183265738,
    "cumulativeGasUsed": "24103344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CamelotAdapter",
    "0x6EcCab422D763aC031210895C81787E87B43A652",
    238412
  ],
  "solcInputHash": "53947a290f318b2ac07d10649c872dfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/CamelotAdapter.sol\":\"CamelotAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":0},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x107a35cefab5921f72dc79a2035e4abedf6975b2569649e2029b694019601b59\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/CamelotAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ninterface IFactory {\\n    function getPair(address,address) external view returns (address);\\n}\\n\\ninterface IPair {\\n    function getAmountOut(uint256, address) external view returns (uint256);\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data,\\n        address referrer\\n    ) external;\\n}\\n\\ncontract CamelotAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address immutable FACTORY;\\n    address referrer;\\n\\n    constructor(\\n        string memory _name,\\n        address _factory,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        FACTORY = _factory;\\n    }\\n\\n    function setReferrer(address _referrer) public onlyMaintainer {\\n        referrer = _referrer;\\n    } \\n\\n    function getQuoteAndPair(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view returns (uint256 amountOut, address pair) {\\n        pair = IFactory(FACTORY).getPair(_tokenIn, _tokenOut);\\n        if (pair != address(0))\\n            amountOut = IPair(pair).getAmountOut(_amountIn, _tokenIn);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 amountOut) {\\n        if (_tokenIn != _tokenOut && _amountIn != 0)\\n            (amountOut, ) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address to\\n    ) internal override {\\n        (uint256 amountOut, address pair) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\\n        require(amountOut >= _amountOut, \\\"Insufficent amount out\\\");\\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\\n            ? (uint256(0), amountOut)\\n            : (amountOut, uint256(0));\\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\\n        IPair(pair).swap(amount0Out, amount1Out, to, new bytes(0), referrer);\\n    }\\n}\\n\",\"keccak256\":\"0xd7ce4ff1d1e579a1b06a6e5c4743d790d91a1c0fd35d7ead64201fc3dd968afc\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200003b575b62000020620000196200022e565b9162000256565b604051611d2e6200083d8239608051816116960152611d2e90f35b62000044600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008857604052565b620000926200004f565b604052565b90620000ae620000a660405190565b928362000066565b565b602090620000d1906001600160401b038111620000d557601f01601f191690565b0190565b620000df6200004f565b601f01601f191690565b60005b838110620000fd5750506000910152565b8181015183820152602001620000ec565b929190620000ae916200012b6200012583620000b0565b62000097565b9482865260208601918382011115620000e95762000147600080fd5b620000e9565b906200016c9181601f820112156200016f575b6020815191016200010e565b90565b62000178600080fd5b62000160565b6001600160a01b031690565b62000195816200017e565b036200004a57565b90505190620000ae826200018a565b8062000195565b90505190620000ae82620001ac565b90916060828403126200021f575b81516200016c90620001f69085906001600160401b03811162000210575b85016200014d565b936200020681602086016200019d565b93604001620001b3565b62000219600080fd5b620001ee565b62000228600080fd5b620001d0565b620002516200256b80380380620002458162000097565b928339810190620001c2565b909192565b9162000263919262000268565b608052565b9062000282620000ae926200027c620002c8565b62000681565b62000831565b6200016c6200016c6200016c9290565b6200016c600062000288565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b620000ae33620002e281620002dc62000298565b620002ec565b620002dc620002a4565b90620000ae916200036e565b905b600052602052604060002090565b6200016c906200017e906001600160a01b031682565b6200016c9062000308565b6200016c906200031e565b90620002fa9062000329565b9060ff905b9181191691161790565b90620003626200016c6200036a92151590565b825462000340565b9055565b90620003836200037f8284620003fd565b1590565b6200038c575050565b620003b26001620003ac836000620003a58782620002f8565b0162000334565b6200034f565b3390620003ec620003e5620003e57f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9262000329565b92620003f760405190565b600090a4565b6200016c916200041591620003a560009182620002f8565b5460ff1690565b156200042457565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d650000000000000000000000006044820152606490fd5b50634e487b7160e01b600052602260045260246000fd5b9060016002830492168015620004a7575b60208310146200049d57565b620000ae62000469565b91607f169162000491565b9160001960089290920291821b911b62000345565b9190620004dc6200016c6200036a9362000288565b908354620004b2565b620000ae91600091620004c7565b818110620004ff575050565b806200050f6000600193620004e5565b01620004f3565b9190601f81116200052657505050565b6200053a620000ae93600052602060002090565b906020601f8401819004830193106200055e575b6020601f909101040190620004f3565b90915081906200054e565b9060001960089091021c191690565b81620005849162000569565b906002021790565b9062000596815190565b906001600160401b03821162000665575b620005bf82620005b8855462000480565b8562000516565b602090601f8311600114620005f2576200036a929160009183620005e6575b505062000578565b015190503880620005de565b601f198316916200060885600052602060002090565b9260005b8181106200064c575091600293918560019694106200062f575b50505002019055565b62000641910151601f84169062000569565b905538808062000626565b919360206001819287870151815501950192016200060c565b6200066f6200004f565b620005a7565b90620000ae916200058c565b620000ae90620006af62000693825190565b620006a7620006a3600062000288565b9190565b14156200041c565b600262000675565b15620006bf57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b620000ae906200073962000733336200072d620002a4565b620003fd565b620006b7565b620007b3565b156200074757565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b906000199062000345565b90620007ab6200016c6200036a9262000288565b82546200078c565b620007cc620007c3600062000288565b8214156200073f565b620007d981600162000797565b620007e43062000329565b6200082c620008147ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9262000329565b926200081f60405190565b9182918290815260200190565b0390a2565b620000ae906200071556fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101c257806306fdde03146101b9578063248a9ca3146101b05780632f2ff15d146101a757806336568abe1461019e5780634ebb79161461019557806369cff80d1461018c5780636b453c1f146101835780637ae267731461017a57806384a33e63146101715780638980f11f146101685780638bb9c5bf1461015f57806391d1485414610156578063a18a7bfc1461014d578063a217fddf14610144578063d547741f1461013b578063d8baf7cf14610132578063eab90da614610129578063ef99893a14610120578063f2fde38b146101175763f87422540361000e57610112610976565b61000e565b50610112610923565b506101126108f8565b5061011261088f565b5061011261080e565b506101126107e6565b506101126107bc565b50610112610776565b5061011261074b565b50610112610724565b506101126106fc565b506101126106a4565b5061011261067c565b5061011261062d565b506101126105e6565b5061011261059d565b50610112610575565b50610112610548565b506101126104ba565b50610112610454565b50610112610224565b600080fd5b6001600160e01b03191690565b6101e6816101d0565b036101cb57565b905035906101fa826101dd565b565b9061021091602081830312610213576101ed565b90565b61021b600080fd5b6101ed565b9052565b5034610257575b61025361024161023c3660046101fc565b6109a0565b60405191829182901515815260200190565b0390f35b61025f600080fd5b61022b565b600091031261026f57565b6101fa600080fd5b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102c8575b60208310146102c057565b6101fa61028e565b91607f16916102b5565b805460009392916102ef6102e5836102a5565b8085529360200190565b9160018116908115610341575060011461030857505050565b61031b9192939450600052602060002090565b916000925b81841061032d5750500190565b805484840152602090930192600101610320565b92949550505060ff1916825215156020020190565b90610210916102d2565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176103a257604052565b6103aa61036a565b604052565b906101fa6103c9926103c060405190565b93848092610356565b0383610381565b61021091156103af576103e1610277565b6103af565b610210600060026103d0565b60005b8381106104055750506000910152565b81810151838201526020016103f5565b61043661036060209361043f9361042a815190565b80835293849260200190565b958691016103f2565b0190565b602080825261021092910190610415565b503461047d575b610466366004610264565b6102536104716103e6565b60405191829182610443565b610485600080fd5b61045b565b806101e6565b905035906101fa8261048a565b906102109160208183031215610490576104b5600080fd5b610490565b50346104e8575b6102536104d76104d236600461049d565b610a54565b6040515b9182918290815260200190565b6104f0600080fd5b6104c1565b6001600160a01b031690565b6101e6816104f5565b905035906101fa82610501565b91906102109060408482031261053b575b6105328185610490565b9360200161050a565b610543600080fd5b610528565b5034610568575b61056361055d366004610517565b90610a93565b604051005b610570600080fd5b61054f565b5034610590575b61056361058a366004610517565b90610c65565b610598600080fd5b61057c565b50346105b7575b6105636105b236600461049d565b61133d565b6105bf600080fd5b6105a4565b610210916008021c81565b9061021091546105c4565b610210600060016105cf565b5034610603575b6105f8366004610264565b6102536104d76105da565b61060b600080fd5b6105ed565b90610210916020818303121561050a57610628600080fd5b61050a565b5034610647575b610563610642366004610610565b611985565b61064f600080fd5b610634565b91906102109060408482031261066f575b610532818561050a565b610677600080fd5b610665565b5034610697575b610563610691366004610654565b906111e9565b61069f600080fd5b610683565b50346106be575b6105636106b936600461049d565b6111b1565b6106c6600080fd5b6106ab565b9190610210906040848203126106ef575b6106e6818561050a565b93602001610490565b6106f7600080fd5b6106dc565b5034610717575b6105636107113660046106cb565b906112ab565b61071f600080fd5b610703565b503461073e575b61056361073936600461049d565b6119a7565b610746600080fd5b61072b565b5034610769575b610253610241610763366004610517565b90610a24565b610771600080fd5b610752565b5034610790575b61056361078b366004610610565b6115c7565b610798600080fd5b61077d565b6102106102106102109290565b610210600061079d565b6102106107aa565b50346107d9575b6107ce366004610264565b6102536104d76107b4565b6107e1600080fd5b6107c3565b5034610801575b6105636107fb366004610517565b90610bf7565b610809600080fd5b6107ed565b5034610828575b610563610823366004610610565b611996565b610830600080fd5b610815565b919060a083820312610882575b61084c8184610490565b9261085a8260208301610490565b9261021061086b846040850161050a565b93610879816060860161050a565b9360800161050a565b61088a600080fd5b610842565b50346108ad575b6105636108a4366004610835565b939290926113fe565b6108b5600080fd5b610896565b90916060828403126108eb575b6102106108d48484610490565b936108e2816020860161050a565b9360400161050a565b6108f3600080fd5b6108c7565b5034610916575b6102536104d76109103660046108ba565b91611346565b61091e600080fd5b6108ff565b503461093d575b610563610938366004610610565b6119b1565b610945600080fd5b61092a565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b61021061094a565b5034610993575b610988366004610264565b6102536104d761096e565b61099b600080fd5b61097d565b6109b0637965db0b60e01b6101d0565b6109b9826101d0565b149081156109c5575090565b610210915061104b565b905b600052602052604060002090565b610210906104f5906001600160a01b031682565b610210906109df565b610210906109f3565b906109d1906109fc565b610210905b60ff1690565b6102109054610a0f565b61021091610a3e91610a38600091826109cf565b01610a05565b610a1a565b6102109081565b6102109054610a43565b6001610a6d61021092610a65600090565b5060006109cf565b01610a4a565b906101fa91610a89610a8482610a54565b610a9d565b906101fa91610cb9565b906101fa91610a73565b6101fa903390610b39565b6102109081906001600160a01b031681565b6102109061079d565b61043f610adb92602092610ad5815190565b94859290565b938491016103f2565b610b1c6102109392610b16610b169376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170190565b90610ac3565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90610b4b610b478284610a24565b1590565b610b53575050565b610bd891610210610b8c610b86610b6c610bc0956109f3565b610b80610b7a601492610aa8565b9161079d565b90610f17565b92610aba565b610b9b602091610b808361079d565b92610bb4610ba860405190565b94859384019283610ae4565b90810382520382610381565b60405162461bcd60e51b815291829160048301610443565b0390fd5b906101fa91610bed610a8482610a54565b906101fa91610d2f565b906101fa91610bdc565b15610c0857565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b6101fa9190610c8a610c7b336104f5565b6104f5565b610c84846104f5565b14610c01565b610d2f565b9060ff905b9181191691161790565b90610cae610210610cb592151590565b8254610c8f565b9055565b90610cc7610b478284610a24565b610ccf575050565b610ce96001610ce4836000610a3887826109cf565b610c9e565b3390610d1f610d19610d197f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926109fc565b92610d2960405190565b600090a4565b90610d3a8183610a24565b610d42575050565b610d566000610ce48382610a3887826109cf565b3390610d1f610d19610d197ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b50634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610db057565b6101fa610d86565b91908201809211610db057565b906101fa610dd260405190565b9283610381565b60209061043f906001600160401b038111610df857601f01601f191690565b610e0061036a565b610360565b90610e17610e1283610dd9565b610dc5565b918252565b369037565b906101fa610e37610e3184610e05565b93610dd9565b601f190160208401610e1c565b50634e487b7160e01b600052603260045260246000fd5b906001602091610e69845190565b811015610e77575b02010190565b610e7f610e44565b610e71565b6001908015610e91570390565b610e99610d86565b0390565b610a146102106102109290565b61021090610ec2610ebe6102109460ff1690565b9190565b901c90565b15610ece57565b60405162461bcd60e51b815280610bd8600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290610f48610f43610f3483610f2f8661079d565b610d9d565b610f3d8561079d565b90610db8565b610e21565b916000916030610f60610f5a8561079d565b86610e5b565b53610f98610f8f600f60fb1b92610f2f6001958695881a610f89610f838861079d565b8b610e5b565b5361079d565b610f3d8361079d565b915b610fbb575b50506102109293610fb5610ebe6102109361079d565b14610ec7565b9094610fc68261079d565b8611156110455761103261102c839261100f610ff26f181899199a1a9b1b9c1cb0b131b232b360811b90565b610ffc600f61079d565b83166010811015611038575b1a60f81b90565b861a61101b8a89610e5b565b536110266004610e9d565b90610eaa565b96610e84565b91610f9a565b611040610e44565b611008565b94610f9f565b61106461105e6301ffc9a760e01b6101d0565b916101d0565b1490565b1561106f57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b6101fa906110e36110de335b6110d961094a565b610a24565b611068565b61114c565b156110ef57565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206761732d657374696d61746560601b6044820152606490fd5b9060001990610c94565b90611145610210610cb59261079d565b825461112b565b611161611159600061079d565b8214156110e8565b61116c816001611135565b611175306109fc565b6111ac6111a27ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a926109fc565b926104db60405190565b0390a2565b6101fa906110c5565b6101fa91906111cb6110de336110d1565b906111d86101fa926109fc565b906111e3600061079d565b91611aba565b906101fa916111ba565b6101fa91906112046110de336110d1565b611255565b1561121057565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61126a611262600061079d565b835b11611209565b61127e82611277836109fc565b3390611a07565b6111ac6111a27f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28926109fc565b906101fa916111f3565b6101fa906112c56110de336110d1565b6112ed565b506040513d6000823e3d90fd5b6104f56102106102109290565b610210906112d7565b61127e60006113046112fe8261079d565b84611264565b808080808661131a611315336109fc565b6109fc565b828215611334575bf16112e45761132f6112ca565b6112e4565b506108fc611322565b6101fa906112b5565b6102109291906115d0565b905051906101fa8261048a565b90610210916020818303121561135157611376600080fd5b611351565b610220906104f5565b6020810192916101fa919061137b565b91908203918211610db057565b156113a857565b60405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d08185b5bdd5b9d0b5bdd5d604a1b6044820152606490fd5b9081526040810192916101fa9160200152565b0152565b936114a76114af91611412611315876109fc565b906370a082319161142260405190565b9261142d8160e01b90565b84528888888c602088806114448a60048301611384565b0381895afa978815611574575b600098611538575b5086602096946114829461148d99979461147294611875565b6040519586948593849360e01b90565b835260048301611384565b03915afa90811561152b575b6000916114fd575b50611394565b8211156113a1565b6114e26114dc7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa936109fc565b936109fc565b936114f86114ef60405190565b928392836113e7565b0390a3565b61151e915060203d8111611524575b6115168183610381565b81019061135e565b386114a1565b503d61150c565b6115336112ca565b611499565b61147291985096602096946114829482979461156361148d9b8b3d8111611524576115168183610381565b9b9450949799509450949650611459565b61157c6112ca565b611451565b6101fa906115916110de336110d1565b6115bc565b906001600160a01b0390610c94565b906115b5610210610cb5926109fc565b8254611596565b6101fa9060036115a5565b6101fa90611581565b9291906000936115df836104f5565b6115e8836104f5565b141580611608575b6115f957505050565b61160493945061167c565b5090565b50611613600061079d565b8114156115f0565b905051906101fa82610501565b90610210916020818303121561161b57611640600080fd5b61161b565b9160206101fa9294936116606040820196600083019061137b565b019061137b565b9081526040810192916101fa91602090611660565b906116e4929391602061168d600090565b956116ba6113157f00000000000000000000000000000000000000000000000000000000000000006109fc565b6116d863e6a439056116cb60405190565b9889948593849360e01b90565b83528860048401611645565b03915afa9384156117c7575b600094611797575b5083611707610c7660006112e4565b611710826104f5565b0361171a57505050565b60209293955061131561172c916109fc565b61174d63f140a35a61175861174060405190565b9687958694859460e01b90565b845260048401611667565b03915afa90811561178a575b60009161176f575091565b611787915060203d8111611524576115168183610381565b91565b6117926112ca565b611764565b6117b991945060203d81116117c0575b6117b18183610381565b810190611628565b92386116f8565b503d6117a7565b6117cf6112ca565b6116f0565b156117db57565b60405162461bcd60e51b8152602060048201526016602482015275125b9cdd59999a58d95b9d08185b5bdd5b9d081bdd5d60521b6044820152606490fd5b610210906104f5565b6102109054611819565b6101fa946118608298979561185660809661184f61186d97600060a08901980152565b60208c0152565b60408a019061137b565b8782036060890152610415565b94019061137b565b6113156118a06113156118d693610c766118a86119209899611898818c8661167c565b968794919a90565b8a10156117d4565b6118b18a6104f5565b1060009060001461197357506118d16118ca600061079d565b97996109fc565b611a07565b611915636e1fdd7f95600096879586926118f2610f438561079d565b6118fc6003611822565b91873b15611966575b6040519a8b998a98899760e01b90565b87526004870161182c565b03925af18015611959575b611933575050565b816101fa92903d10611952575b61194a8183610381565b810190610264565b503d611940565b6119616112ca565b61192b565b61196e600080fd5b611905565b61197f6118d19161079d565b996109fc565b6101fa9061199161094a565b610a93565b6101fa906119a261094a565b610bf7565b6101fa903361058a565b6101fa9033906119c96119c26107aa565b9182610a93565b610c65565b6119e76119e16102109263ffffffff1690565b60e01b90565b6101d0565b9160206101fa9294936113fa6040820196600083019061137b565b611a4a600492611a3b6101fa95611a2163a9059cbb6119ce565b92611a2b60405190565b96879460208601908152016119ec565b60208201810382520383610381565b611c97565b15611a5657565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b611a4a600492611a3b6101fa95611ae7600084611ad68261079d565b8414918215611af4575b5050611a4f565b611a2163095ea7b36119ce565b9091506020611b02896109fc565b63dd62ed3e90611b2e611b14306109fc565b92611b39611b2160405190565b9788958694859460e01b90565b845260048401611645565b03915afa918215611b8a575b600092611b62575b50610ebe611b5a9161079d565b148438611ae0565b611b5a919250611b82610ebe9160203d8111611524576115168183610381565b929150611b4d565b611b926112ca565b611b45565b3d15611bb157611ba63d610e05565b903d6000602084013e565b606090565b15611bbd57565b60405162461bcd60e51b815280610bd8600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101e6565b905051906101fa82611c06565b906102109160208183031215611c0e57611c33600080fd5b611c0e565b15611c3f57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b600091611ca483926109fc565b9082602082019151925af1611cc0611cba611b97565b91611bb6565b8051611ccf610ebe600061079d565b11611cd75750565b611cf3816020611ce86101fa945190565b818301019101611c1b565b611c3856fea26469706673582212201a78208b711fe7e41b6056411c6343636def8e38c8c3afc9e27e198596420b8664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101c257806306fdde03146101b9578063248a9ca3146101b05780632f2ff15d146101a757806336568abe1461019e5780634ebb79161461019557806369cff80d1461018c5780636b453c1f146101835780637ae267731461017a57806384a33e63146101715780638980f11f146101685780638bb9c5bf1461015f57806391d1485414610156578063a18a7bfc1461014d578063a217fddf14610144578063d547741f1461013b578063d8baf7cf14610132578063eab90da614610129578063ef99893a14610120578063f2fde38b146101175763f87422540361000e57610112610976565b61000e565b50610112610923565b506101126108f8565b5061011261088f565b5061011261080e565b506101126107e6565b506101126107bc565b50610112610776565b5061011261074b565b50610112610724565b506101126106fc565b506101126106a4565b5061011261067c565b5061011261062d565b506101126105e6565b5061011261059d565b50610112610575565b50610112610548565b506101126104ba565b50610112610454565b50610112610224565b600080fd5b6001600160e01b03191690565b6101e6816101d0565b036101cb57565b905035906101fa826101dd565b565b9061021091602081830312610213576101ed565b90565b61021b600080fd5b6101ed565b9052565b5034610257575b61025361024161023c3660046101fc565b6109a0565b60405191829182901515815260200190565b0390f35b61025f600080fd5b61022b565b600091031261026f57565b6101fa600080fd5b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102c8575b60208310146102c057565b6101fa61028e565b91607f16916102b5565b805460009392916102ef6102e5836102a5565b8085529360200190565b9160018116908115610341575060011461030857505050565b61031b9192939450600052602060002090565b916000925b81841061032d5750500190565b805484840152602090930192600101610320565b92949550505060ff1916825215156020020190565b90610210916102d2565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176103a257604052565b6103aa61036a565b604052565b906101fa6103c9926103c060405190565b93848092610356565b0383610381565b61021091156103af576103e1610277565b6103af565b610210600060026103d0565b60005b8381106104055750506000910152565b81810151838201526020016103f5565b61043661036060209361043f9361042a815190565b80835293849260200190565b958691016103f2565b0190565b602080825261021092910190610415565b503461047d575b610466366004610264565b6102536104716103e6565b60405191829182610443565b610485600080fd5b61045b565b806101e6565b905035906101fa8261048a565b906102109160208183031215610490576104b5600080fd5b610490565b50346104e8575b6102536104d76104d236600461049d565b610a54565b6040515b9182918290815260200190565b6104f0600080fd5b6104c1565b6001600160a01b031690565b6101e6816104f5565b905035906101fa82610501565b91906102109060408482031261053b575b6105328185610490565b9360200161050a565b610543600080fd5b610528565b5034610568575b61056361055d366004610517565b90610a93565b604051005b610570600080fd5b61054f565b5034610590575b61056361058a366004610517565b90610c65565b610598600080fd5b61057c565b50346105b7575b6105636105b236600461049d565b61133d565b6105bf600080fd5b6105a4565b610210916008021c81565b9061021091546105c4565b610210600060016105cf565b5034610603575b6105f8366004610264565b6102536104d76105da565b61060b600080fd5b6105ed565b90610210916020818303121561050a57610628600080fd5b61050a565b5034610647575b610563610642366004610610565b611985565b61064f600080fd5b610634565b91906102109060408482031261066f575b610532818561050a565b610677600080fd5b610665565b5034610697575b610563610691366004610654565b906111e9565b61069f600080fd5b610683565b50346106be575b6105636106b936600461049d565b6111b1565b6106c6600080fd5b6106ab565b9190610210906040848203126106ef575b6106e6818561050a565b93602001610490565b6106f7600080fd5b6106dc565b5034610717575b6105636107113660046106cb565b906112ab565b61071f600080fd5b610703565b503461073e575b61056361073936600461049d565b6119a7565b610746600080fd5b61072b565b5034610769575b610253610241610763366004610517565b90610a24565b610771600080fd5b610752565b5034610790575b61056361078b366004610610565b6115c7565b610798600080fd5b61077d565b6102106102106102109290565b610210600061079d565b6102106107aa565b50346107d9575b6107ce366004610264565b6102536104d76107b4565b6107e1600080fd5b6107c3565b5034610801575b6105636107fb366004610517565b90610bf7565b610809600080fd5b6107ed565b5034610828575b610563610823366004610610565b611996565b610830600080fd5b610815565b919060a083820312610882575b61084c8184610490565b9261085a8260208301610490565b9261021061086b846040850161050a565b93610879816060860161050a565b9360800161050a565b61088a600080fd5b610842565b50346108ad575b6105636108a4366004610835565b939290926113fe565b6108b5600080fd5b610896565b90916060828403126108eb575b6102106108d48484610490565b936108e2816020860161050a565b9360400161050a565b6108f3600080fd5b6108c7565b5034610916575b6102536104d76109103660046108ba565b91611346565b61091e600080fd5b6108ff565b503461093d575b610563610938366004610610565b6119b1565b610945600080fd5b61092a565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9590565b61021061094a565b5034610993575b610988366004610264565b6102536104d761096e565b61099b600080fd5b61097d565b6109b0637965db0b60e01b6101d0565b6109b9826101d0565b149081156109c5575090565b610210915061104b565b905b600052602052604060002090565b610210906104f5906001600160a01b031682565b610210906109df565b610210906109f3565b906109d1906109fc565b610210905b60ff1690565b6102109054610a0f565b61021091610a3e91610a38600091826109cf565b01610a05565b610a1a565b6102109081565b6102109054610a43565b6001610a6d61021092610a65600090565b5060006109cf565b01610a4a565b906101fa91610a89610a8482610a54565b610a9d565b906101fa91610cb9565b906101fa91610a73565b6101fa903390610b39565b6102109081906001600160a01b031681565b6102109061079d565b61043f610adb92602092610ad5815190565b94859290565b938491016103f2565b610b1c6102109392610b16610b169376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170190565b90610ac3565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90610b4b610b478284610a24565b1590565b610b53575050565b610bd891610210610b8c610b86610b6c610bc0956109f3565b610b80610b7a601492610aa8565b9161079d565b90610f17565b92610aba565b610b9b602091610b808361079d565b92610bb4610ba860405190565b94859384019283610ae4565b90810382520382610381565b60405162461bcd60e51b815291829160048301610443565b0390fd5b906101fa91610bed610a8482610a54565b906101fa91610d2f565b906101fa91610bdc565b15610c0857565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b6101fa9190610c8a610c7b336104f5565b6104f5565b610c84846104f5565b14610c01565b610d2f565b9060ff905b9181191691161790565b90610cae610210610cb592151590565b8254610c8f565b9055565b90610cc7610b478284610a24565b610ccf575050565b610ce96001610ce4836000610a3887826109cf565b610c9e565b3390610d1f610d19610d197f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926109fc565b92610d2960405190565b600090a4565b90610d3a8183610a24565b610d42575050565b610d566000610ce48382610a3887826109cf565b3390610d1f610d19610d197ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b50634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610db057565b6101fa610d86565b91908201809211610db057565b906101fa610dd260405190565b9283610381565b60209061043f906001600160401b038111610df857601f01601f191690565b610e0061036a565b610360565b90610e17610e1283610dd9565b610dc5565b918252565b369037565b906101fa610e37610e3184610e05565b93610dd9565b601f190160208401610e1c565b50634e487b7160e01b600052603260045260246000fd5b906001602091610e69845190565b811015610e77575b02010190565b610e7f610e44565b610e71565b6001908015610e91570390565b610e99610d86565b0390565b610a146102106102109290565b61021090610ec2610ebe6102109460ff1690565b9190565b901c90565b15610ece57565b60405162461bcd60e51b815280610bd8600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290610f48610f43610f3483610f2f8661079d565b610d9d565b610f3d8561079d565b90610db8565b610e21565b916000916030610f60610f5a8561079d565b86610e5b565b53610f98610f8f600f60fb1b92610f2f6001958695881a610f89610f838861079d565b8b610e5b565b5361079d565b610f3d8361079d565b915b610fbb575b50506102109293610fb5610ebe6102109361079d565b14610ec7565b9094610fc68261079d565b8611156110455761103261102c839261100f610ff26f181899199a1a9b1b9c1cb0b131b232b360811b90565b610ffc600f61079d565b83166010811015611038575b1a60f81b90565b861a61101b8a89610e5b565b536110266004610e9d565b90610eaa565b96610e84565b91610f9a565b611040610e44565b611008565b94610f9f565b61106461105e6301ffc9a760e01b6101d0565b916101d0565b1490565b1561106f57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b6101fa906110e36110de335b6110d961094a565b610a24565b611068565b61114c565b156110ef57565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206761732d657374696d61746560601b6044820152606490fd5b9060001990610c94565b90611145610210610cb59261079d565b825461112b565b611161611159600061079d565b8214156110e8565b61116c816001611135565b611175306109fc565b6111ac6111a27ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a926109fc565b926104db60405190565b0390a2565b6101fa906110c5565b6101fa91906111cb6110de336110d1565b906111d86101fa926109fc565b906111e3600061079d565b91611aba565b906101fa916111ba565b6101fa91906112046110de336110d1565b611255565b1561121057565b60405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61126a611262600061079d565b835b11611209565b61127e82611277836109fc565b3390611a07565b6111ac6111a27f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28926109fc565b906101fa916111f3565b6101fa906112c56110de336110d1565b6112ed565b506040513d6000823e3d90fd5b6104f56102106102109290565b610210906112d7565b61127e60006113046112fe8261079d565b84611264565b808080808661131a611315336109fc565b6109fc565b828215611334575bf16112e45761132f6112ca565b6112e4565b506108fc611322565b6101fa906112b5565b6102109291906115d0565b905051906101fa8261048a565b90610210916020818303121561135157611376600080fd5b611351565b610220906104f5565b6020810192916101fa919061137b565b91908203918211610db057565b156113a857565b60405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d08185b5bdd5b9d0b5bdd5d604a1b6044820152606490fd5b9081526040810192916101fa9160200152565b0152565b936114a76114af91611412611315876109fc565b906370a082319161142260405190565b9261142d8160e01b90565b84528888888c602088806114448a60048301611384565b0381895afa978815611574575b600098611538575b5086602096946114829461148d99979461147294611875565b6040519586948593849360e01b90565b835260048301611384565b03915afa90811561152b575b6000916114fd575b50611394565b8211156113a1565b6114e26114dc7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa936109fc565b936109fc565b936114f86114ef60405190565b928392836113e7565b0390a3565b61151e915060203d8111611524575b6115168183610381565b81019061135e565b386114a1565b503d61150c565b6115336112ca565b611499565b61147291985096602096946114829482979461156361148d9b8b3d8111611524576115168183610381565b9b9450949799509450949650611459565b61157c6112ca565b611451565b6101fa906115916110de336110d1565b6115bc565b906001600160a01b0390610c94565b906115b5610210610cb5926109fc565b8254611596565b6101fa9060036115a5565b6101fa90611581565b9291906000936115df836104f5565b6115e8836104f5565b141580611608575b6115f957505050565b61160493945061167c565b5090565b50611613600061079d565b8114156115f0565b905051906101fa82610501565b90610210916020818303121561161b57611640600080fd5b61161b565b9160206101fa9294936116606040820196600083019061137b565b019061137b565b9081526040810192916101fa91602090611660565b906116e4929391602061168d600090565b956116ba6113157f00000000000000000000000000000000000000000000000000000000000000006109fc565b6116d863e6a439056116cb60405190565b9889948593849360e01b90565b83528860048401611645565b03915afa9384156117c7575b600094611797575b5083611707610c7660006112e4565b611710826104f5565b0361171a57505050565b60209293955061131561172c916109fc565b61174d63f140a35a61175861174060405190565b9687958694859460e01b90565b845260048401611667565b03915afa90811561178a575b60009161176f575091565b611787915060203d8111611524576115168183610381565b91565b6117926112ca565b611764565b6117b991945060203d81116117c0575b6117b18183610381565b810190611628565b92386116f8565b503d6117a7565b6117cf6112ca565b6116f0565b156117db57565b60405162461bcd60e51b8152602060048201526016602482015275125b9cdd59999a58d95b9d08185b5bdd5b9d081bdd5d60521b6044820152606490fd5b610210906104f5565b6102109054611819565b6101fa946118608298979561185660809661184f61186d97600060a08901980152565b60208c0152565b60408a019061137b565b8782036060890152610415565b94019061137b565b6113156118a06113156118d693610c766118a86119209899611898818c8661167c565b968794919a90565b8a10156117d4565b6118b18a6104f5565b1060009060001461197357506118d16118ca600061079d565b97996109fc565b611a07565b611915636e1fdd7f95600096879586926118f2610f438561079d565b6118fc6003611822565b91873b15611966575b6040519a8b998a98899760e01b90565b87526004870161182c565b03925af18015611959575b611933575050565b816101fa92903d10611952575b61194a8183610381565b810190610264565b503d611940565b6119616112ca565b61192b565b61196e600080fd5b611905565b61197f6118d19161079d565b996109fc565b6101fa9061199161094a565b610a93565b6101fa906119a261094a565b610bf7565b6101fa903361058a565b6101fa9033906119c96119c26107aa565b9182610a93565b610c65565b6119e76119e16102109263ffffffff1690565b60e01b90565b6101d0565b9160206101fa9294936113fa6040820196600083019061137b565b611a4a600492611a3b6101fa95611a2163a9059cbb6119ce565b92611a2b60405190565b96879460208601908152016119ec565b60208201810382520383610381565b611c97565b15611a5657565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b611a4a600492611a3b6101fa95611ae7600084611ad68261079d565b8414918215611af4575b5050611a4f565b611a2163095ea7b36119ce565b9091506020611b02896109fc565b63dd62ed3e90611b2e611b14306109fc565b92611b39611b2160405190565b9788958694859460e01b90565b845260048401611645565b03915afa918215611b8a575b600092611b62575b50610ebe611b5a9161079d565b148438611ae0565b611b5a919250611b82610ebe9160203d8111611524576115168183610381565b929150611b4d565b611b926112ca565b611b45565b3d15611bb157611ba63d610e05565b903d6000602084013e565b606090565b15611bbd57565b60405162461bcd60e51b815280610bd8600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101e6565b905051906101fa82611c06565b906102109160208183031215611c0e57611c33600080fd5b611c0e565b15611c3f57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b600091611ca483926109fc565b9082602082019151925af1611cc0611cba611b97565b91611bb6565b8051611ccf610ebe600061079d565b11611cd75750565b611cf3816020611ce86101fa945190565b818301019101611c1b565b611c3856fea26469706673582212201a78208b711fe7e41b6056411c6343636def8e38c8c3afc9e27e198596420b8664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2899,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2901,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5099,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "referrer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}