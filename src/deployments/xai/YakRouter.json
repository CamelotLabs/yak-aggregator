{
  "address": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeClaimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrapped_native",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAdapters",
          "type": "address[]"
        }
      ],
      "name": "UpdatedAdapters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldFeeClaimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeClaimer",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeClaimer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMinFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newTrustedTokens",
          "type": "address[]"
        }
      ],
      "name": "UpdatedTrustedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakSwap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ADAPTERS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CLAIMER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TRUSTED_TOKENS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WNATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adaptersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxSteps",
          "type": "uint256"
        }
      ],
      "name": "findBestPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FormattedOffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxSteps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        }
      ],
      "name": "findBestPathWithGas",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct FormattedOffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "queryAdapter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "_options",
          "type": "uint8[]"
        }
      ],
      "name": "queryNoSplit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct Query",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "queryNoSplit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct Query",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "setAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wnative",
          "type": "address"
        }
      ],
      "name": "setAllowanceForWrapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "setFeeClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        }
      ],
      "name": "setTrustedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            }
          ],
          "internalType": "struct Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swapNoSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            }
          ],
          "internalType": "struct Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swapNoSplitFromETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            }
          ],
          "internalType": "struct Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swapNoSplitToETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            }
          ],
          "internalType": "struct Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "swapNoSplitToETHWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            }
          ],
          "internalType": "struct Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "swapNoSplitWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
    "transactionIndex": 1,
    "gasUsed": "4051787",
    "logsBloom": "0x0040000400000000000000000000000000000000000000000000000000000000000000000000002000004000a000200000020000000000000000000000220000000400004000000008000000200000000000000000000000000000000000000000000000020000000000000000020800000000000000000000000000000000000000000000100000100000000000000000000000000000000400000000200000020000004000000000000000000000000000000000000000005000000800000001000000000000000000000000000000000000000000000100080002000020000014200000000000000000400000000000000000000000010000000000000000",
    "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d",
    "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4381363,
        "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
        "address": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381363,
        "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
        "address": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381363,
        "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
        "address": "0x3fB787101DC6Be47cfe18aeEe15404dcC842e6AF",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a602a3fbe10a272f706ff7d094d157be6d301bb7",
          "0x0000000000000000000000003fb787101dc6be47cfe18aeee15404dcc842e6af"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381363,
        "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
        "address": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
        "topics": [
          "0x658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000003fb787101dc6be47cfe18aeee15404dcc842e6af000000000000000000000000300a7b57dc85b6a9776e249614abf0fe5c9905fb000000000000000000000000bee82cfdaff4a6aa4e4793cb81eb1c2e79ac463c",
        "logIndex": 3,
        "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381363,
        "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
        "address": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
        "topics": [
          "0xb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
        "logIndex": 4,
        "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381363,
        "transactionHash": "0xba5702adf651773fff2ed6edd2ce4fb3fd3a380b2a1919ce1a3bc2e2fc250ef6",
        "address": "0xa602a3FBE10A272F706FF7D094D157bE6D301bB7",
        "topics": [
          "0xebf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000d27c373950e7466c53e5cd6ee3f70b240dc0b1b10000000000000000000000003b7c611221257ac1a96d5a71cb1f735f8e7013b0000000000000000000000000a540133ce4be89dfcddbb6a6d5fb132676a21aa7",
        "logIndex": 5,
        "blockHash": "0xc20b95aaf9e673cdb6a758c75b2578dd97744a2d1e163513eeaddf59fc7b442d"
      }
    ],
    "blockNumber": 4381363,
    "cumulativeGasUsed": "4051787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xD27c373950E7466C53e5Cd6eE3F70b240dC0B1B1",
      "0x3b7c611221257aC1A96D5A71Cb1f735F8E7013B0",
      "0xA540133cE4Be89dfcdDBb6A6D5fB132676a21Aa7"
    ],
    [
      "0x3fB787101DC6Be47cfe18aeEe15404dcC842e6AF",
      "0x300a7b57dc85b6a9776e249614abf0fe5c9905fb",
      "0xBeE82CfdAff4a6AA4E4793cb81eb1C2E79aC463C"
    ],
    "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "0x3fB787101DC6Be47cfe18aeEe15404dcC842e6AF"
  ],
  "solcInputHash": "a1fb3ea38b84261ec00a1b22baec2a10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeClaimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapped_native\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAdapters\",\"type\":\"address[]\"}],\"name\":\"UpdatedAdapters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldFeeClaimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeClaimer\",\"type\":\"address\"}],\"name\":\"UpdatedFeeClaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newTrustedTokens\",\"type\":\"address[]\"}],\"name\":\"UpdatedTrustedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ADAPTERS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CLAIMER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TRUSTED_TOKENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adaptersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxSteps\",\"type\":\"uint256\"}],\"name\":\"findBestPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct FormattedOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"findBestPathWithGas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct FormattedOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"queryAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_options\",\"type\":\"uint8[]\"}],\"name\":\"queryNoSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"queryNoSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"setAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wnative\",\"type\":\"address\"}],\"name\":\"setAllowanceForWrapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setFeeClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"}],\"name\":\"setTrustedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"internalType\":\"struct Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swapNoSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"internalType\":\"struct Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swapNoSplitFromETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"internalType\":\"struct Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swapNoSplitToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"internalType\":\"struct Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapNoSplitToETHWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"internalType\":\"struct Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapNoSplitWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"_tokenAddress\":\"token address\",\"_tokenAmount\":\"amount to recover\"}},\"recoverNative(uint256)\":{\"params\":{\"_amount\":\"amount\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findBestPath(uint256,address,address,address[],uint256)\":{\"notice\":\"Return path with best returns between two tokens\"},\"findBestPathWithGas(uint256,address,address,address[],uint256,uint256)\":{\"notice\":\"Return path with best returns between two tokens Takes gas-cost into account\"},\"queryAdapter(uint256,address,address,uint8)\":{\"notice\":\"Query single adapter\"},\"queryNoSplit(uint256,address,address)\":{\"notice\":\"Query all adapters\"},\"queryNoSplit(uint256,address,address,uint8[])\":{\"notice\":\"Query specified adapters\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverNative(uint256)\":{\"notice\":\"Recover native asset from contract\"},\"swapNoSplitToETHWithPermit((uint256,uint256,address[],address[],address[]),uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap token to WETH without the need to approve the first token\"},\"swapNoSplitWithPermit((uint256,uint256,address[],address[],address[]),uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap token to token without the need to approve the first token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/CamelotYakRouter.sol\":\"CamelotYakRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/CamelotYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interface/IYakRouter.sol\\\";\\nimport \\\"./interface/IAdapter.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\nimport \\\"./lib/YakViewUtils.sol\\\";\\nimport \\\"./lib/Recoverable.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\ncontract CamelotYakRouter is Maintainable, Recoverable, IYakRouter {\\n    using SafeERC20 for IERC20;\\n    using OfferUtils for Offer;\\n\\n    address public immutable WNATIVE;\\n    address public constant NATIVE = address(0);\\n    string public constant NAME = \\\"CamelotYakRouter\\\";\\n    uint256 public constant FEE_DENOMINATOR = 1e4;\\n    uint256 public MIN_FEE = 0;\\n    address public FEE_CLAIMER;\\n    address[] public TRUSTED_TOKENS;\\n    address[] public ADAPTERS;\\n\\n    constructor(\\n        address[] memory _adapters,\\n        address[] memory _trustedTokens,\\n        address _feeClaimer,\\n        address _wrapped_native\\n    ) {\\n        setAllowanceForWrapping(_wrapped_native);\\n        setTrustedTokens(_trustedTokens);\\n        setFeeClaimer(_feeClaimer);\\n        setAdapters(_adapters);\\n        WNATIVE = _wrapped_native;\\n    }\\n\\n    // -- SETTERS --\\n\\n    function setAllowanceForWrapping(address _wnative) public onlyMaintainer {\\n        IERC20(_wnative).safeApprove(_wnative, type(uint256).max);\\n    }\\n\\n    function setTrustedTokens(address[] memory _trustedTokens) override public onlyMaintainer {\\n        emit UpdatedTrustedTokens(_trustedTokens);\\n        TRUSTED_TOKENS = _trustedTokens;\\n    }\\n\\n    function setAdapters(address[] memory _adapters) override public onlyMaintainer {\\n        emit UpdatedAdapters(_adapters);\\n        ADAPTERS = _adapters;\\n    }\\n\\n    function setMinFee(uint256 _fee) override external onlyMaintainer {\\n        emit UpdatedMinFee(MIN_FEE, _fee);\\n        MIN_FEE = _fee;\\n    }\\n\\n    function setFeeClaimer(address _claimer) override public onlyMaintainer {\\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\\n        FEE_CLAIMER = _claimer;\\n    }\\n\\n    //  -- GENERAL --\\n\\n    function trustedTokensCount() override external view returns (uint256) {\\n        return TRUSTED_TOKENS.length;\\n    }\\n\\n    function adaptersCount() override external view returns (uint256) {\\n        return ADAPTERS.length;\\n    }\\n\\n    // Fallback\\n    receive() external payable {}\\n\\n    // -- HELPERS --\\n\\n    function _applyFee(uint256 _amountIn, uint256 _fee) internal view returns (uint256) {\\n        require(_fee >= MIN_FEE, \\\"YakRouter: Insufficient fee\\\");\\n        return (_amountIn * (FEE_DENOMINATOR - _fee)) / FEE_DENOMINATOR;\\n    }\\n\\n    function _wrap(uint256 _amount) internal {\\n        IWETH(WNATIVE).deposit{ value: _amount }();\\n    }\\n\\n    function _unwrap(uint256 _amount) internal {\\n        IWETH(WNATIVE).withdraw(_amount);\\n    }\\n\\n    function _unwrapTo(address _to, uint256 _amount) internal {\\n        IWETH(WNATIVE).withdrawTo(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Return tokens to user\\n     * @dev Pass address(0) for ETH\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTokensTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) {\\n            if (_token == NATIVE) {\\n                payable(_to).transfer(_amount);\\n            } else {\\n                IERC20(_token).safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(address token, address _from, address _to, uint _amount) internal {\\n        if (_from != address(this))\\n            IERC20(token).safeTransferFrom(_from, _to, _amount);\\n        else\\n            IERC20(token).safeTransfer(_to, _amount);\\n    }\\n\\n    // -- QUERIES --\\n\\n    /**\\n     * Query single adapter\\n     */\\n    function queryAdapter(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8 _index\\n    ) override external view returns (uint256, address) {\\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\\n        try IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut) returns (uint256 _amountOut, address _recipient) {\\n            return (_amountOut, _recipient);\\n        }\\n        catch { return (0, address(0)); }\\n    }\\n\\n    /**\\n     * Query specified adapters\\n     */\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8[] calldata _options\\n    ) override public view returns (Query memory) {\\n        Query memory bestQuery;\\n        for (uint8 i; i < _options.length; i++) {\\n            address _adapter = ADAPTERS[_options[i]];\\n            try IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut) returns (uint256 amountOut, address _recipient) {\\n                if (i == 0 || amountOut > bestQuery.amountOut) {\\n                    bestQuery = Query(_adapter, _recipient, _tokenIn, _tokenOut, amountOut);\\n                }\\n            }\\n            catch { continue; }\\n        }\\n        return bestQuery;\\n    }\\n\\n    /**\\n     * Query all adapters\\n     */\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) override public view returns (Query memory) {\\n        Query memory bestQuery;\\n        for (uint8 i; i < ADAPTERS.length; i++) {\\n            address _adapter = ADAPTERS[i];\\n            try IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut) returns (uint256 amountOut, address _recipient) {\\n                if (i == 0 || amountOut > bestQuery.amountOut) {\\n                    bestQuery = Query(_adapter, _recipient, _tokenIn, _tokenOut, amountOut);\\n                }\\n            }\\n            catch { continue; }\\n        }\\n        return bestQuery;\\n    }\\n\\n    /**\\n     * Return path with best returns between two tokens\\n     * Takes gas-cost into account\\n     */\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address[] memory _trustedTokens,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) override external view returns (FormattedOffer memory) {\\n        require(_maxSteps > 0 && _maxSteps < 5, \\\"YakRouter: Invalid max-steps\\\");\\n        Offer memory queries = OfferUtils.newOffer(_amountIn, _tokenIn);\\n        uint256 gasPriceInExitTkn = _gasPrice > 0 ? getGasPriceInExitTkn(_gasPrice, _tokenOut) : 0;\\n\\n        uint256 ttLength = TRUSTED_TOKENS.length;\\n        // Concatenate default and additional trusted tokens\\n        address[] memory _allTrustedTokens = new address[](\\n            ttLength + _trustedTokens.length\\n        );\\n        for (uint i = 0; i < ttLength; ) {\\n            _allTrustedTokens[i] = TRUSTED_TOKENS[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        for (uint i = 0; i < _trustedTokens.length; ) {\\n            _allTrustedTokens[ttLength + i] = _trustedTokens[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _allTrustedTokens, _maxSteps, queries, gasPriceInExitTkn);\\n        if (queries.adapters.length == 0) {\\n            queries.amounts = \\\"\\\";\\n            queries.path = \\\"\\\";\\n        }\\n        return queries.format();\\n    }\\n\\n    // Find the market price between gas-asset(native) and token-out and express gas price in token-out\\n    function getGasPriceInExitTkn(uint256 _gasPrice, address _tokenOut) internal view returns (uint256 price) {\\n        // Avoid low-liquidity price appreciation (https://github.com/yieldyak/yak-aggregator/issues/20)\\n        address[] memory _trustedTokens;\\n        FormattedOffer memory gasQuery = findBestPath(1e18, WNATIVE, _tokenOut, _trustedTokens, 2);\\n        if (gasQuery.path.length != 0) {\\n            // Leave result in nWei to preserve precision for assets with low decimal places\\n            price = (gasQuery.amounts[gasQuery.amounts.length - 1] * _gasPrice) / 1e9;\\n        }\\n    }\\n\\n    /**\\n     * Return path with best returns between two tokens\\n     */\\n    function findBestPath(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address[] memory _trustedTokens,\\n        uint256 _maxSteps\\n    ) override public view returns (FormattedOffer memory) {\\n        require(_maxSteps > 0 && _maxSteps < 5, \\\"YakRouter: Invalid max-steps\\\");\\n        Offer memory queries = OfferUtils.newOffer(_amountIn, _tokenIn);\\n\\n        uint256 ttLength = TRUSTED_TOKENS.length;\\n        // Concatenate default and additional trusted tokens\\n        address[] memory _allTrustedTokens = new address[](\\n            ttLength + _trustedTokens.length\\n        );\\n        for (uint i = 0; i < ttLength; ) {\\n            _allTrustedTokens[i] = TRUSTED_TOKENS[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        for (uint i = 0; i < _trustedTokens.length; ) {\\n            _allTrustedTokens[ttLength + i] = _trustedTokens[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _allTrustedTokens, _maxSteps, queries, 0);\\n        // If no paths are found return empty struct\\n        if (queries.adapters.length == 0) {\\n            queries.amounts = \\\"\\\";\\n            queries.path = \\\"\\\";\\n        }\\n        return queries.format();\\n    }\\n\\n    function _findBestPath(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address[] memory _trustedTokens,\\n        uint256 _maxSteps,\\n        Offer memory _queries,\\n        uint256 _tknOutPriceNwei\\n    ) internal view returns (Offer memory) {\\n        Offer memory bestOption = _queries.clone();\\n        uint256 bestAmountOut;\\n        uint256 gasEstimate;\\n        bool withGas = _tknOutPriceNwei > 0;\\n\\n        // First check if there is a path directly from tokenIn to tokenOut\\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\\n\\n        if (queryDirect.amountOut > 0) {\\n            if (withGas) {\\n                gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\\n            }\\n            bestOption.addToTail(queryDirect.amountOut, queryDirect.adapter, queryDirect.recipient, queryDirect.tokenOut, gasEstimate);\\n            bestAmountOut = queryDirect.amountOut;\\n        }\\n\\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\\n        if (_maxSteps > 1 && _queries.adapters.length / 32 <= _maxSteps - 2) {\\n            // Check for paths that pass through trusted tokens\\n            for (uint256 i = 0; i < _trustedTokens.length; ) {\\n                if (_tokenIn == _trustedTokens[i]) {\\n                    unchecked {\\n                        i++;\\n                    }\\n                    continue;\\n                }\\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, _trustedTokens[i]);\\n                if (bestSwap.amountOut == 0) {\\n                    unchecked {\\n                        i++;\\n                    }\\n                    continue;\\n                }\\n                // Explore options that connect the current path to the tokenOut\\n                Offer memory newOffer = _queries.clone();\\n                if (withGas) {\\n                    gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\\n                }\\n                newOffer.addToTail(bestSwap.amountOut, bestSwap.adapter, bestSwap.recipient, bestSwap.tokenOut, gasEstimate);\\n                newOffer = _findBestPath(\\n                    bestSwap.amountOut,\\n                    _trustedTokens[i],\\n                    _tokenOut,\\n                    _trustedTokens,\\n                    _maxSteps,\\n                    newOffer,\\n                    _tknOutPriceNwei\\n                ); // Recursive step\\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\\n                if (\\n                    _tokenOut == newOffer.getTokenOut() &&\\n                    newOffer.getAmountOut() > bestAmountOut\\n                ) {\\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\\n                        uint256 gasCostDiff = (_tknOutPriceNwei * (newOffer.gasEstimate - bestOption.gasEstimate)) /\\n                            1e9;\\n                        if (\\n                            gasCostDiff >\\n                            newOffer.getAmountOut() - bestAmountOut\\n                        ) {\\n                            unchecked {\\n                                i++;\\n                            }\\n                            continue;\\n                        }\\n                    }\\n                    bestAmountOut = newOffer.getAmountOut();\\n                    bestOption = newOffer;\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n        return bestOption;\\n    }\\n\\n    // -- SWAPPERS --\\n\\n    function _swapNoSplit(\\n        Trade calldata _trade,\\n        address _from,\\n        uint256 _fee,\\n        address _to\\n    ) internal returns (uint256) {\\n        uint256 amountIn = _trade.amountIn;\\n        if (_fee > 0 || MIN_FEE > 0) {\\n            // Transfer fees to the claimer account and decrease initial amount\\n            amountIn = _applyFee(_trade.amountIn, _fee);\\n            _transferFrom(_trade.path[0], _from, FEE_CLAIMER, _trade.amountIn - amountIn);\\n        }\\n        uint256 recipientBalanceBefore = IERC20(_trade.path[0]).balanceOf(_trade.recipients[0]);\\n        _transferFrom(_trade.path[0], _from, _trade.recipients[0], amountIn);\\n        amountIn = IERC20(_trade.path[0]).balanceOf(_trade.recipients[0]) - recipientBalanceBefore;\\n\\n        address tokenOut = _trade.path[_trade.path.length - 1];\\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\\n            // All adapters should transfer output token to the following target\\n            // All targets are the adapters, expect for the last swap where tokens are sent out\\n            address targetAddress = i < _trade.adapters.length - 1 ? _trade.recipients[i + 1] : _to;\\n\\n            recipientBalanceBefore =  IERC20(_trade.path[i + 1]).balanceOf(targetAddress);\\n            IAdapter(_trade.adapters[i]).swap(\\n                amountIn,\\n                0,\\n                _trade.path[i],\\n                _trade.path[i + 1],\\n                targetAddress\\n            );\\n            amountIn = IERC20(_trade.path[i + 1]).balanceOf(targetAddress) - recipientBalanceBefore;\\n        }\\n        uint256 amountOut = amountIn;\\n        require(amountOut >= _trade.amountOut, \\\"YakRouter: Insufficient output amount\\\");\\n        emit YakSwap(_trade.path[0], tokenOut, _trade.amountIn, amountOut);\\n        return amountOut;\\n    }\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to\\n    ) override public {\\n        _swapNoSplit(_trade, msg.sender, _fee, _to);\\n    }\\n\\n    function swapNoSplitFromETH(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to\\n    ) override external payable {\\n        require(_trade.path[0] == WNATIVE, \\\"YakRouter: Path needs to begin with WETH\\\");\\n        _wrap(_trade.amountIn);\\n        _swapNoSplit(_trade, address(this), _fee, _to);\\n    }\\n\\n    function swapNoSplitToETH(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to\\n    ) override public {\\n        require(_trade.path[_trade.path.length - 1] == WNATIVE, \\\"YakRouter: Path needs to end with WETH\\\");\\n        uint256 returnAmount = _swapNoSplit(_trade, msg.sender, _fee, address(this));\\n        _unwrapTo(_to, returnAmount);\\n    }\\n\\n    /**\\n     * Swap token to token without the need to approve the first token\\n     */\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) override external {\\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\\n        swapNoSplit(_trade, _fee, _to);\\n    }\\n\\n    /**\\n     * Swap token to WETH without the need to approve the first token\\n     */\\n    function swapNoSplitToETHWithPermit(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) override external {\\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\\n        swapNoSplitToETH(_trade, _fee, _to);\\n    }\\n}\\n\",\"keccak256\":\"0x8c13086295593835660c6b9797fbb7041a07f8546fc01591c7e6df274812fe28\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAdapter {\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function query(\\n        uint256,\\n        address,\\n        address\\n    ) external view returns (uint256, address);\\n}\\n\",\"keccak256\":\"0x7484b73eec9fa2816e09716ca5b25a9999b31e31d97fb1cf70fa544ccd177994\",\"license\":\"MIT\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n    function withdrawTo(address account, uint256 amount) external;\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0xbde97dcab4ad3609386dd1b30d2bc0a2981d37b2d3fb329cdaa282bca910c81b\",\"license\":\"MIT\"},\"src/contracts/interface/IYakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nstruct Query {\\n    address adapter;\\n    address recipient;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n}\\nstruct Offer {\\n    bytes amounts;\\n    bytes adapters;\\n    bytes path;\\n    bytes recipients;\\n    uint256 gasEstimate;\\n}\\nstruct FormattedOffer {\\n    uint256[] amounts;\\n    address[] adapters;\\n    address[] path;\\n    address[] recipients;\\n    uint256 gasEstimate;\\n}\\nstruct Trade {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address[] adapters;\\n    address[] recipients;\\n}\\n\\ninterface IYakRouter {\\n\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    // admin\\n    function setTrustedTokens(address[] memory _trustedTokens) external;\\n    function setAdapters(address[] memory _adapters) external;\\n    function setFeeClaimer(address _claimer) external;\\n    function setMinFee(uint256 _fee) external;\\n\\n    // misc\\n    function trustedTokensCount() external view returns (uint256);\\n    function adaptersCount() external view returns (uint256);\\n\\n    // query\\n\\n    function queryAdapter(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8 _index\\n    ) external returns (uint256, address);\\n\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8[] calldata _options\\n    ) external view returns (Query memory);\\n\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (Query memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address[] memory _trustedTokens,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPath(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address[] memory _trustedTokens,\\n        uint256 _maxSteps\\n    ) external view returns (FormattedOffer memory);\\n\\n    // swap\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to\\n    ) external;\\n\\n    function swapNoSplitFromETH(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to\\n    ) external payable;\\n\\n    function swapNoSplitToETH(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to\\n    ) external; \\n\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function swapNoSplitToETHWithPermit(\\n        Trade calldata _trade,\\n        uint256 _fee,\\n        address _to,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n}\",\"keccak256\":\"0x3788f45cc1e27ae40d9a6f39722a4ae47cf7ca8835d4498346933f6416d06add\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/Recoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Maintainable.sol\\\";\\n\\n\\nabstract contract Recoverable is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event Recovered(\\n        address indexed _asset, \\n        uint amount\\n    );\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param _tokenAddress token address\\n     * @param _tokenAmount amount to recover\\n     */\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover native asset from contract\\n     * @param _amount amount\\n     */\\n    function recoverNative(uint _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n}\",\"keccak256\":\"0x14fabf5960c647278e388ddc1413208760dce2c404a74fb91dc1a244a17b1f4a\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"},\"src/contracts/lib/TypeConversion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n\\nlibrary TypeConversion {\\n\\n    function toBytes12(address x) internal pure returns (bytes12 y) {\\n        assembly { y := x }\\n    }\\n\\n    function toBytes32(address x) internal pure returns (bytes32 y) {\\n        assembly { y := x }\\n    }\\n\\n    function toAddress(bytes32 x) internal pure returns (address y) {\\n        assembly { y := x }\\n    }\\n\\n    function toBytes(address x) internal pure returns (bytes memory y) {\\n        y = new bytes(32);\\n        assembly { mstore(add(y, 32), x) }\\n    }\\n\\n    function toBytes(bytes32 x) internal pure returns (bytes memory y) {\\n        y = new bytes(32);\\n        assembly { mstore(add(y, 32), x) }\\n    }\\n\\n    function toBytes(uint x) internal pure returns (bytes memory y) {\\n        y = new bytes(32);\\n        assembly { mstore(add(y, 32), x) }\\n    }\\n\\n    function toAddress(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (address y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toUint(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (uint y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toBytes12(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (bytes12 y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toBytes32(\\n        bytes memory x,\\n        uint offset\\n    ) internal pure returns (bytes32 y) {\\n        assembly { y := mload(add(x, offset)) }\\n    }\\n\\n    function toAddresses(\\n        bytes memory xs\\n    ) internal pure returns (address[] memory ys) {\\n        ys = new address[](xs.length/32);\\n        for (uint i=0; i < xs.length/32; i++) {\\n            ys[i] = toAddress(xs, i*32 + 32);\\n        }\\n    }\\n\\n    function toUints(\\n        bytes memory xs\\n    ) internal pure returns (uint[] memory ys) {\\n        ys = new uint[](xs.length/32);\\n        for (uint i=0; i < xs.length/32; i++) {\\n            ys[i] = toUint(xs, i*32 + 32);\\n        }\\n    }\\n\\n    function toBytes32s(\\n        bytes memory xs\\n    ) internal pure returns (bytes32[] memory ys) {\\n        ys = new bytes32[](xs.length/32);\\n        for (uint i=0; i < xs.length/32; i++) {\\n            ys[i] = toBytes32(xs, i*32 + 32);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa3a67bf37fbab7fd2edd745d8d1d1e4c4c18fb5d1c2a2c84af10e00e28caa165\",\"license\":\"MIT\"},\"src/contracts/lib/YakViewUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport { Offer, FormattedOffer } from \\\"../interface/IYakRouter.sol\\\";\\nimport \\\"./TypeConversion.sol\\\";\\n\\n\\nlibrary OfferUtils {\\n    using TypeConversion for address;\\n    using TypeConversion for uint256;\\n    using TypeConversion for bytes;\\n\\n    function newOffer(\\n        uint _amountIn,\\n        address _tokenIn\\n    ) internal pure returns (Offer memory offer) {\\n        offer.amounts = _amountIn.toBytes();\\n        offer.path = _tokenIn.toBytes();\\n    }\\n\\n    /**\\n     * Makes a deep copy of Offer struct\\n     */\\n    function clone(Offer memory _queries) internal pure returns (Offer memory) {\\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.recipients, _queries.gasEstimate);\\n    }\\n\\n    /**\\n     * Appends new elements to the end of Offer struct\\n     */\\n    function addToTail(\\n        Offer memory _queries,\\n        uint256 _amount,\\n        address _adapter,\\n        address _recipient,\\n        address _tokenOut,\\n        uint256 _gasEstimate\\n    ) internal pure {\\n        _queries.path = bytes.concat(_queries.path, _tokenOut.toBytes());\\n        _queries.adapters = bytes.concat(_queries.adapters, _adapter.toBytes());\\n        _queries.amounts = bytes.concat(_queries.amounts, _amount.toBytes());\\n        _queries.recipients = bytes.concat(_queries.recipients, _recipient.toBytes());\\n        _queries.gasEstimate += _gasEstimate;\\n    }\\n\\n    /**\\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\\n     */\\n    function format(Offer memory _queries) internal pure returns (FormattedOffer memory) {\\n        return\\n            FormattedOffer(\\n                _queries.amounts.toUints(),\\n                _queries.adapters.toAddresses(),\\n                _queries.path.toAddresses(),\\n                _queries.recipients.toAddresses(),\\n                _queries.gasEstimate\\n            );\\n    }\\n\\n    function getTokenOut(\\n        Offer memory _offer\\n    ) internal pure returns (address tokenOut) {\\n        tokenOut = _offer.path.toAddress(_offer.path.length);  // Last 32 bytes\\n    }\\n\\n    function getAmountOut(\\n        Offer memory _offer\\n    ) internal pure returns (uint amountOut) {\\n        amountOut = _offer.amounts.toUint(_offer.path.length);  // Last 32 bytes\\n    }\\n\\n}\\n\\nlibrary FormattedOfferUtils {\\n    using TypeConversion for address;\\n    using TypeConversion for uint256;\\n    using TypeConversion for bytes;\\n\\n    /**\\n     * Appends new elements to the end of FormattedOffer\\n     */\\n    function addToTail(\\n        FormattedOffer memory offer, \\n        uint256 amountOut, \\n        address wrapper,\\n        address tokenOut,\\n        address recipient,\\n        uint256 gasEstimate\\n    ) internal pure {\\n        offer.amounts = bytes.concat(abi.encodePacked(offer.amounts), amountOut.toBytes()).toUints();\\n        offer.adapters = bytes.concat(abi.encodePacked(offer.adapters), wrapper.toBytes()).toAddresses();\\n        offer.path = bytes.concat(abi.encodePacked(offer.path), tokenOut.toBytes()).toAddresses();\\n        offer.recipients = bytes.concat(abi.encodePacked(offer.recipients), recipient.toBytes()).toAddresses();\\n        offer.gasEstimate += gasEstimate;\\n    }\\n\\n    /**\\n     * Appends new elements to the beginning of FormattedOffer\\n     */\\n    function addToHead(\\n        FormattedOffer memory offer, \\n        uint256 amountOut, \\n        address wrapper,\\n        address tokenOut,\\n        address recipient,\\n        uint256 gasEstimate\\n    ) internal pure {\\n        offer.amounts = bytes.concat(amountOut.toBytes(), abi.encodePacked(offer.amounts)).toUints();\\n        offer.adapters = bytes.concat(wrapper.toBytes(), abi.encodePacked(offer.adapters)).toAddresses();\\n        offer.path = bytes.concat(tokenOut.toBytes(), abi.encodePacked(offer.path)).toAddresses();\\n        offer.path = bytes.concat(recipient.toBytes(), abi.encodePacked(offer.recipients)).toAddresses();\\n        offer.gasEstimate += gasEstimate;\\n    }\\n\\n    function getAmountOut(FormattedOffer memory offer) internal pure returns (uint256) {\\n        return offer.amounts[offer.amounts.length - 1];\\n    }\\n\\n}\",\"keccak256\":\"0xa8fd546f1436de04c7ec6afc9775e8bb7444726b3e31d8fa8a4fc2c305fb1f39\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000061575b620000236200001962000262565b92919091620002cb565b60405161422262000cc18239608051818181610faa015281816127c60152818161363d0152818161368f015281816137be0152613824015261422290f35b6200006a600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000ae57604052565b620000b862000075565b604052565b90620000d4620000cc60405190565b92836200008c565b565b60209081906001600160401b038111620000ef57020190565b620000f962000075565b020190565b6001600160a01b031690565b90565b6001600160a01b0381165b036200007057565b90505190620000d4826200010d565b90929192620001486200014282620000d6565b620000bd565b93818552602080860192028301928184116200018b575b915b8383106200016f5750505050565b602080916200017f848662000120565b81520192019162000161565b62000194600080fd5b6200015f565b906200010a9181601f82011215620001b9575b6020815191016200012f565b620001c2600080fd5b620001ad565b60808183031262000253575b8051620001f59083906001600160401b03811162000244575b83016200019a565b926200010a6200021b84602085015160018060401b03811162000235575b85016200019a565b936200022b816040860162000120565b9360600162000120565b6200023e600080fd5b62000213565b6200024d600080fd5b620001ed565b6200025c600080fd5b620001d4565b6200028562004f03803803806200027981620000bd565b928339810190620001c8565b90919293565b90600019905b9181191691161790565b6200010a6200010a6200010a9290565b90620002bf6200010a620002c7926200029b565b82546200028b565b9055565b906200030f92620003036200030992620002e462000314565b620002f260006001620002ab565b620002fd876200052c565b62000769565b620008a9565b620007d0565b608052565b620000d4620000d46200032e565b6200010a60006200029b565b620000d43362000348816200034262000322565b62000359565b60008051602062004ee38339815191525b90620000d491620003d2565b905b600052602052604060002090565b6200010a90620000fe906001600160a01b031682565b6200010a9062000375565b6200010a906200038b565b90620003679062000396565b9060ff9062000291565b90620003ca6200010a620002c792151590565b8254620003ad565b90620003e7620003e3828462000461565b1590565b620003f0575050565b6200041660016200041083600062000409878262000365565b01620003a1565b620003b7565b33906200045062000449620004497f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9262000396565b926200045b60405190565b600090a4565b6200010a916200047991620004096000918262000365565b5460ff1690565b0190565b156200048c57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b0390fd5b620000d490620005116200050b335b60008051602062004ee383398151915262000461565b62000484565b620000d490620005218162000396565b6000199190620009b2565b620000d490620004e6565b620000d4906200054b6200050b33620004f5565b62000721565b90620005746200056d62000563845190565b8084529260200190565b9260200190565b9060005b818110620005865750505090565b909192620005ae620005a760019286516001600160a01b0316815260200190565b9460200190565b92910162000578565b60208082526200010a9291019062000551565b9160001960089290920291821b911b62000291565b9190620005f46200010a620002c7936200029b565b908354620005ca565b620000d491600091620005df565b81811062000617575050565b80620006276000600193620005fd565b016200060b565b90918281106200063d57505050565b620000d4929062000655905b92600052602060002090565b90810191016200060b565b90620000d49168010000000000000000821162000684575b8054908281556200062e565b6200068e62000075565b62000678565b6001620006c862000649620006a7855190565b94838060401b03861162000705575b620006c2868662000660565b60200190565b92049160005b838110620006dc5750505050565b6001906020620006f76200010a86516001600160a01b031690565b9401938184015501620006ce565b6200070f62000075565b620006b6565b90620000d49162000694565b620000d4907f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a586476200075160405190565b806200075e8482620005b7565b0390a1600362000715565b620000d49062000537565b620000d490620007886200050b33620004f5565b620000d4907febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe620007b860405190565b80620007c58482620005b7565b0390a1600462000715565b620000d49062000774565b620000d490620007ef6200050b33620004f5565b62000852565b6200010a90620000fe565b6200010a9054620007f5565b6001600160a01b0391821681529116602082015260400190565b906001600160a01b039062000291565b906200084a6200010a620002c79262000396565b825462000826565b620000d49062000863600262000800565b817fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e2916200089e6200089460405190565b928392836200080c565b0390a1600262000836565b620000d490620007db565b8062000118565b90505190620000d482620008b4565b906200010a9160208183031215620008bb57620008e5600080fd5b620008bb565b506040513d6000823e3d90fd5b156200090057565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b62000987620009816200010a9263ffffffff1690565b60e01b90565b6001600160e01b03191690565b6001600160a01b039091168152604081019291620000d49160200152565b62000a2260049262000a12620000d495620009e7600084620009d4826200029b565b841491821562000a28575b5050620008f8565b620009f663095ea7b36200096b565b9262000a0160405190565b968794602086019081520162000994565b602082018103825203836200008c565b62000c50565b909150602062000a388962000396565b63dd62ed3e9062000a6962000a4d3062000396565b9262000a7562000a5c60405190565b9788958694859460e01b90565b8452600484016200080c565b03915afa91821562000ae9575b60009262000aa8575b5062000a9b62000a9f916200029b565b9190565b148438620009df565b62000a9f91925062000ad862000a9b9160203d811162000ae1575b62000acf81836200008c565b810190620008ca565b92915062000a8b565b503d62000ac3565b62000af3620008eb565b62000a82565b60209062000480906001600160401b03811162000b1a57601f01601f191690565b62000b2462000075565b601f01601f191690565b9062000b3e620001428362000af9565b918252565b3d1562000b605762000b553d62000b2e565b903d6000602084013e565b606090565b1562000b6d57565b60405162461bcd60e51b815280620004e2600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b80151562000118565b90505190620000d48262000bb7565b906200010a916020818303121562000bc05762000bea600080fd5b62000bc0565b1562000bf857565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b60009162000c5f839262000396565b9082602082019151925af162000c7f62000c7862000b43565b9162000b65565b805162000c9162000a9b60006200029b565b1162000c9a5750565b62000cba81602062000cae620000d4945190565b81830101910162000bcf565b62000bf056fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c8062b99e361461032957806301ffc9a714610320578063248a9ca3146103175780632f2ff15d1461030e57806331ac99201461030557806336568abe146102fc5780633a9a4081146102f35780633cf57ac7146102ea578063414cff85146102e157806352a52ab0146102d85780636b453c1f146102cf57806376c7a3c7146102c657806376ebe69c146102bd5780637c7a561b146102b4578063809356aa146102ab57806383637d14146102a25780638980f11f146102995780638bb9c5bf1461029057806391d148541461028757806392f5d88a1461027e578063952e901214610275578063a0cf0aea1461026c578063a217fddf14610263578063a3f4df7e1461025a578063aede369314610251578063b381cf4014610248578063b9a89ca31461023f578063befe980314610236578063c3accd481461022d578063c8a3a5c614610224578063ce6e28f21461021b578063d547741f14610212578063d73792a914610209578063d8baf7cf14610200578063dd8544b3146101f7578063dede7f15146101ee578063f2fde38b146101e5578063f6ee13a6146101dc5763f87422540361000e576101d7611424565b61000e565b506101d76113f3565b506101d7611344565b506101d7611319565b506101d76112bd565b506101d7611296565b506101d761126c565b506101d7611231565b506101d7611209565b506101d76111e2565b506101d76111bb565b506101d76111a6565b506101d761116c565b506101d7610f93565b506101d7610f6c565b506101d7610f36565b506101d7610e08565b506101d7610dbf565b506101d7610d6d565b506101d7610d27565b506101d7610bda565b506101d7610bb3565b506101d7610b8b565b506101d7610b32565b506101d7610a93565b506101d7610a06565b506101d76109db565b506101d76109b1565b506101d7610968565b506101d7610921565b506101d761085d565b506101d761082f565b506101d7610748565b506101d7610576565b506101d761054f565b506101d7610522565b506101d76104a0565b506101d7610434565b506101d76103a5565b600080fd5b600091031261034257565b61034a600080fd5b565b61036e916008021c5b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b9061036e915461034c565b61036e60006002610371565b61039190610355565b9052565b60208101929161034a9190610388565b50346103d2575b6103b7366004610337565b6103ce6103c261037c565b60405191829182610395565b0390f35b6103da600080fd5b6103ac565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361033257565b9050359061034a826103df565b9061036e916020818303121561040a5761042f600080fd5b61040a565b5034610463575b6103ce61045161044c366004610417565b61146c565b60405191829182901515815260200190565b61046b600080fd5b61043b565b80610403565b9050359061034a82610470565b9061036e91602081830312156104765761049b600080fd5b610476565b50346104ce575b6103ce6104bd6104b8366004610483565b61159c565b6040515b9182918290815260200190565b6104d6600080fd5b6104a7565b61040381610355565b9050359061034a826104db565b919061036e90604084820312610515575b61050c8185610476565b936020016104e4565b61051d600080fd5b610502565b5034610542575b61053d6105373660046104f1565b906115db565b604051005b61054a600080fd5b610529565b5034610569575b61053d610564366004610483565b611fc7565b610571600080fd5b610556565b5034610591575b61053d61058b3660046104f1565b906117de565b610599600080fd5b61057d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761063657604052565b61063e6105c6565b604052565b9061034a61065060405190565b92836105f6565b6020809167ffffffffffffffff811161066f57020190565b6106776105c6565b020190565b9092919261069161068c82610657565b610643565b93818552602080860192028301928184116106cf575b915b8383106106b65750505050565b602080916106c484866104e4565b8152019201916106a9565b6106d7600080fd5b6106a7565b9061036e9181601f820112156106f8575b60208135910161067c565b610700600080fd5b6106ed565b9061036e9160208183031261073b575b80359067ffffffffffffffff821161072e575b016106dc565b610736600080fd5b610728565b610743600080fd5b610715565b5034610762575b61053d61075d366004610705565b611f03565b61076a600080fd5b61074f565b908160a091031261077d5790565b61036e600080fd5b60ff8116610403565b9050359061034a82610785565b60e081830312610822575b6107c382823567ffffffffffffffff8111610815575b830161076f565b926107d18360208401610476565b926107df81604085016104e4565b926107ed8260608301610476565b9261036e6107fe846080850161078e565b9361080c8160a08601610476565b9360c001610476565b61081d600080fd5b6107bc565b61082a600080fd5b6107a6565b5034610850575b61053d61084436600461079b565b95949094939193613999565b610858600080fd5b610836565b503461087e575b61053d61087236600461079b565b959490949391936138ce565b610886600080fd5b610864565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6108db6001916108c9815490565b8410156108e457600052602060002090565b91020190600090565b6108ec61088b565b600052602060002090565b60036000610903825490565b83101561091e575061036e91610918916108bb565b90610371565b80fd5b503461093e575b6103ce6103c2610939366004610483565b6108f7565b610946600080fd5b610928565b9061036e91602081830312156104e457610963600080fd5b6104e4565b5034610982575b61053d61097d36600461094b565b6139fb565b61098a600080fd5b61096f565b61036e916008021c81565b9061036e915461098f565b61036e6000600161099a565b50346109ce575b6109c3366004610337565b6103ce6104bd6109a5565b6109d6600080fd5b6109b8565b50346109f9575b6109ed366004610337565b6103ce6104bd60035490565b610a01600080fd5b6109e2565b5034610a24575b610a18366004610337565b6103ce6104bd60045490565b610a2c600080fd5b610a0d565b608081830312610a6e575b610a468282610476565b9261036e610a5784602085016104e4565b93610a6581604086016104e4565b9360600161078e565b610a76600080fd5b610a3c565b90815260408101929161034a916020905b0190610388565b5034610ac7575b610ab1610aa8366004610a31565b92919091612118565b906103ce610abe60405190565b92839283610a7b565b610acf600080fd5b610a9a565b9091606082840312610b25575b61036e610b0184843567ffffffffffffffff8111610b18575b850161076f565b93610b0f8160208601610476565b936040016104e4565b610b20600080fd5b610afa565b610b2d600080fd5b610ae1565b5034610b4d575b61053d610b47366004610ad4565b91613784565b610b55600080fd5b610b39565b919061036e90604084820312610b7e575b610b7581856104e4565b93602001610476565b610b86600080fd5b610b6b565b5034610ba6575b61053d610ba0366004610b5a565b90613b3d565b610bae600080fd5b610b92565b5034610bcd575b61053d610bc8366004610483565b613a4f565b610bd5600080fd5b610bba565b5034610bf8575b6103ce610451610bf23660046104f1565b9061156c565b610c00600080fd5b610be1565b909182601f83011215610c44575b602082359267ffffffffffffffff8411610c37575b01926020830284011161034257565b610c3f600080fd5b610c28565b610c4c600080fd5b610c13565b608081830312610cb3575b610c668282610476565b92610ca2610c7784602085016104e4565b93610c8581604086016104e4565b9360608101359067ffffffffffffffff8211610ca6575b01610c05565b9091565b610cae600080fd5b610c9c565b610cbb600080fd5b610c5c565b9060808061034a93610cda60008201516000860190610388565b610cec60208201516020860190610388565b610cfe60408201516040860190610388565b610d1060608201516060860190610388565b0151910152565b60a08101929161034a9190610cc0565b5034610d54575b6103ce610d48610d3f366004610c51565b93929092612275565b60405191829182610d17565b610d5c600080fd5b610d2e565b60046000610903825490565b5034610d8a575b6103ce6103c2610d85366004610483565b610d61565b610d92600080fd5b610d74565b61035561036e61036e9290565b61036e90610d97565b61036e6000610da4565b61036e610dad565b5034610ddc575b610dd1366004610337565b6103ce6103c2610db7565b610de4600080fd5b610dc6565b61036e61036e61036e9290565b61036e6000610de9565b61036e610df6565b5034610e25575b610e1a366004610337565b6103ce6104bd610e00565b610e2d600080fd5b610e0f565b610e6f60209167ffffffffffffffff8111610e7357601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b0190565b61059e6105c6565b90610e8861068c83610e32565b918252565b610e976010610e7b565b7f43616d656c6f7459616b526f7574657200000000000000000000000000000000602082015290565b61036e610e8d565b61036e610ec0565b61036e610ec8565b60005b838110610eeb5750506000910152565b8181015183820152602001610edb565b610f1c61059e602093610e6f93610f10815190565b80835293849260200190565b95869101610ed8565b602080825261036e92910190610efb565b5034610f5f575b610f48366004610337565b6103ce610f53610ed0565b60405191829182610f25565b610f67600080fd5b610f3d565b5034610f86575b61053d610f81366004610483565b613ba2565b610f8e600080fd5b610f73565b5034610fce575b610fa5366004610337565b6103ce7f00000000000000000000000000000000000000000000000000000000000000006103c2565b610fd6600080fd5b610f9a565b919060a083820312611048575b610ff28184610476565b9261100082602083016104e4565b9261036e61101184604085016104e4565b9361103281606086013567ffffffffffffffff811161103b575b86016106dc565b93608001610476565b611043600080fd5b61102b565b611050600080fd5b610fe8565b9061107561106e611064845190565b8084529260200190565b9260200190565b9060005b8181106110865750505090565b9091926110a361109c6001928651815260200190565b9460200190565b929101611079565b90610e6f81602093610388565b906110c761106e611064845190565b9060005b8181106110d85750505090565b9091926110eb61109c60019286516110ab565b9291016110cb565b9061036e9060808061115361114161112f61111d60a0870160008a015188820360008a0152611055565b602089015187820360208901526110b8565b604088015186820360408801526110b8565b606087015185820360608701526110b8565b940151910152565b602080825261036e929101906110f3565b5034611199575b6103ce61118d611184366004610fdb565b9392909261286d565b6040519182918261115b565b6111a1600080fd5b611173565b5061053d6111b5366004610ad4565b91613605565b50346111d5575b61053d6111d036600461094b565b612096565b6111dd600080fd5b6111c2565b50346111fc575b61053d6111f7366004610705565b611ea7565b611204600080fd5b6111e9565b5034611224575b61053d61121e366004610ad4565b91612df1565b61122c600080fd5b611210565b503461124c575b61053d6112463660046104f1565b90611762565b611254600080fd5b611238565b61036e612710610de9565b61036e611259565b5034611289575b61127e366004610337565b6103ce6104bd611264565b611291600080fd5b611273565b50346112b0575b61053d6112ab36600461094b565b613a25565b6112b8600080fd5b61129d565b50346112d7575b61053d6112d236600461094b565b611c9f565b6112df600080fd5b6112c4565b909160608284031261130c575b61036e6112fe8484610476565b93610b0f81602086016104e4565b611314600080fd5b6112f1565b5034611337575b6103ce610d486113313660046112e4565b916123d9565b61133f600080fd5b611320565b503461135e575b61053d61135936600461094b565b613a59565b611366600080fd5b61134b565b909160c0828403126113e6575b6113828383610476565b9261139081602085016104e4565b9261139e82604083016104e4565b9261036e6113c284606085013567ffffffffffffffff81116113d9575b85016106dc565b936113d08160808601610476565b9360a001610476565b6113e1600080fd5b6113bb565b6113ee600080fd5b611378565b5034611417575b6103ce61118d61140b36600461136b565b949390939291926125c8565b61141f600080fd5b6113fa565b503461145f575b611436366004610337565b6103ce7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956104bd565b611467600080fd5b61142b565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156114bc575090565b61036e91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61035561036e61036e9273ffffffffffffffffffffffffffffffffffffffff1690565b61036e90611518565b61036e9061153b565b9061150a90611544565b61036e905b60ff1690565b61036e9054611557565b61036e916115869161158060009182611508565b0161154d565b611562565b61036e9081565b61036e905461158b565b60016115b561036e926115ad600090565b506000611508565b01611592565b9061034a916115d16115cc8261159c565b6115e5565b9061034a91611832565b9061034a916115bb565b61034a9033906116a4565b61036e61036e61036e9273ffffffffffffffffffffffffffffffffffffffff1690565b61036e90610de9565b610e6f6116349260209261162e815190565b94859290565b93849101610ed8565b61167b61036e9392611675611675937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b9061161c565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b906116b66116b2828461156c565b1590565b6116be575050565b6117439161036e6116f76116f16116d761172b9561153b565b6116eb6116e56014926115f0565b91610de9565b90611a64565b92611613565b6117066020916116eb83610de9565b9261171f61171360405190565b9485938401928361163d565b908103825203826105f6565b60405191829162461bcd60e51b835260048301610f25565b0390fd5b9061034a916117586115cc8261159c565b9061034a916118a8565b9061034a91611747565b1561177357565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b61034a91906118036117f433610355565b610355565b6117fd84610355565b1461176c565b6118a8565b9060ff905b9181191691161790565b9061182761036e61182e92151590565b8254611808565b9055565b906118406116b2828461156c565b611848575050565b611862600161185d8360006115808782611508565b611817565b33906118986118926118927f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92611544565b926118a260405190565b600090a4565b906118b3818361156c565b6118bb575050565b6118cf600061185d83826115808782611508565b33906118986118926118927ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b919061193a565b9290565b9180830292818404149015171561194d57565b61034a6118ff565b9190820180921161194d57565b369037565b9061034a61197d61197784610e7b565b93610e32565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160208401611962565b9060016020916119b6845190565b8110156119c4575b02010190565b6119cc61088b565b6119be565b60019080156119de570390565b6119e66118ff565b0390565b61155c61036e61036e9290565b61036e90611a0f611a0b61036e9460ff1690565b9190565b901c90565b15611a1b57565b60405162461bcd60e51b815280611743600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290611a95611a90611a8183611a7c86610de9565b61192f565b611a8a85610de9565b90611955565b611967565b916000916030611aad611aa785610de9565b866119a8565b53611b01611af87f780000000000000000000000000000000000000000000000000000000000000092611a7c6001958695881a611af2611aec88610de9565b8b6119a8565b53610de9565b611a8a83610de9565b915b611b24575b505061036e9293611b1e611a0b61036e93610de9565b14611a14565b9094611b2f82610de9565b861115611bbb57611ba8611ba28392611b85611b687f303132333435363738396162636465660000000000000000000000000000000090565b611b72600f610de9565b83166010811015611bae575b1a60f81b90565b861a611b918a896119a8565b53611b9c60046119ea565b906119f7565b966119d1565b91611b03565b611bb661088b565b611b7e565b94611b08565b15611bc857565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b61034a90611c6a611c65335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9561156c565b611bc1565b61034a90611c7781611544565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91613cf9565b61034a90611c33565b61034a90611cb8611c6533611c3f565b611e64565b90611ccc61106e611064845190565b9060005b818110611cdd5750505090565b909192611cf061109c60019286516110ab565b929101611cd0565b602080825261036e92910190611cbd565b9190600861180d910291611d3c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841b90565b921b90565b9190611d5261036e61182e93610de9565b908354611d09565b61034a91600091611d41565b818110611d71575050565b80611d7f6000600193611d5a565b01611d66565b9091828110611d9357505050565b61034a9290611da9905b92600052602060002090565b9081019101611d66565b9061034a91680100000000000000008211611dd4575b805490828155611d85565b611ddc6105c6565b611dc9565b61036e9051610355565b6001611e1c611d9d611dfb855190565b9467ffffffffffffffff8611611e4d575b611e168686611db3565b60200190565b92049160005b838110611e2f5750505050565b6001906020611e4061036e86611de1565b9401938184015501611e22565b611e556105c6565b611e0c565b9061034a91611deb565b61034a907f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647611e9260405190565b80611e9d8482611cf8565b0390a16003611e5a565b61034a90611ca8565b61034a90611ec0611c6533611c3f565b61034a907febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe611eee60405190565b80611ef98482611cf8565b0390a16004611e5a565b61034a90611eb0565b61034a90611f1c611c6533611c3f565b611f77565b90815260408101929161034a9160200152565b0152565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9061180d565b90611f7061036e61182e92610de9565b8254611f38565b61034a90611f856001611592565b817f4bb8a6184424e4bb853a4836042f5a726e4e710873989bfc6abdab19966f5b7091611fbd611fb460405190565b92839283611f21565b0390a16001611f60565b61034a90611f0c565b61034a90611fe0611c6533611c3f565b612046565b61036e90610355565b61036e9054611fe5565b91602061034a929493610a8c60408201966000830190610388565b9073ffffffffffffffffffffffffffffffffffffffff9061180d565b9061203f61036e61182e92611544565b8254612013565b61034a906120546002611fee565b817fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e29161208c61208360405190565b92839283611ff8565b0390a1600261202f565b61034a90611fd0565b9050519061034a82610470565b9050519061034a826104db565b919061036e906040848203126120dd575b6120d4818561209f565b936020016120ac565b6120e5600080fd5b6120ca565b90815260608101939261034a929091604091610a8c905b6020830190610388565b506040513d6000823e3d90fd5b9092604090949294612128600090565b9561216960009661217261214c612147612147610918600498896108bb565b611544565b9363ef99893a9261215c60405190565b9889978896879660e01b90565b865285016120ea565b03915afa806000809390926121af575b506121a9575050600161219157565b915050600090611a0b6121a383610da4565b92610de9565b93509150565b9092506121d3915060403d81116121da575b6121cb81836105f6565b8101906120b9565b9138612182565b503d6121c1565b61036e60a0610643565b6121f36121e1565b906000825260208080808086016000815201600081520160005b8152016000905250565b61036e6121eb565b60019060ff1660ff8114612231570190565b610e6f6118ff565b61036e61036e61036e9260ff1690565b9160209181101561225957020190565b61067761088b565b3561036e81610785565b9061039190610355565b9091929493612282612217565b5061228b612217565b9360005b8261229982612239565b10156123cf5760048460406122cc6109186122c66122c18e8a6122bb8a612239565b91612249565b612261565b856108bb565b926122d961214785611544565b61216963ef99893a6122ef898d61215c60405190565b03915afa600091829190816123ac575b5061231657505050612311905b61221f565b61228f565b600092612322846119ea565b60ff8616148015612396575b612340575b505050506123119061221f565b61231194995061238c929161236261236b9261235a6121e1565b96870161226b565b6020850161226b565b612378886040850161226b565b612385856060850161226b565b6080830152565b9590388080612333565b506123a561036e60808c015190565b831161232e565b9092506123c7915060403d81116121da576121cb81836105f6565b9091386122ff565b5093955050505050565b906123e2612217565b506123eb612217565b9160005b60046123fc61036e825490565b61240583612239565b101561250b5782604061241b61091885856108bb565b9261242861214785611544565b61216963ef99893a61243e8c8b61215c60405190565b03915afa600091829190816124e8575b5061246a5750505061246590600161230c5761221f565b6123ef565b600092612476846119ea565b60ff86161480156124d2575b612494575b505050506124659061221f565b6124659497506124c892916123626124ae9261235a6121e1565b6124bb866040850161226b565b612385886060850161226b565b9390388080612487565b506124e161036e60808a015190565b8311612482565b909250612503915060403d81116121da576121cb81836105f6565b90913861244e565b50505050905090565b61251c6121e1565b9060608252602080808080860160608152016060815201606061220d565b61036e612514565b1561254957565b60405162461bcd60e51b815260206004820152601c60248201527f59616b526f757465723a20496e76616c6964206d61782d7374657073000000006044820152606490fd5b90610e8861068c83610657565b9061034a61197d6125ab8461258e565b93610657565b90602080916119b6845190565b61036e6000610e7b565b9290949391956125d661253a565b5060006125e281610de9565b84118061274c575b6125f390612542565b6125fd8786613f4a565b958861260883610de9565b82111561273c57612618916127b6565b600396612623885490565b9561263d612638612632885190565b89611955565b61259b565b9a61264785610de9565b8c89821015612680579061267561267b92612670838f6109188261266a926108bb565b926125b1565b61226b565b60010190565b612647565b5050919395979990929496985061269686610de9565b6126a161036e8a5190565b8110156126dc57806126758b6126708f6126d1858f6126c66126d7996126cb926125b1565b611de1565b94611955565b906125b1565b612696565b509091939599929497506126f4965061036e986129a7565b9061270160208301515190565b61270d611a0b83610de9565b14612719575b50614093565b6127279082016103916125be565b612736604082016103916125be565b38612713565b505061274781610de9565b612618565b506125f361275a6005610de9565b851090506125ea565b9190820391821161194d57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b81156127aa570490565b6127b2612770565b0490565b90919061280560009360606002917f00000000000000000000000000000000000000000000000000000000000000006127ff6127f9670de0b6b3a7640000610de9565b94610de9565b9361286d565b6040810151519060009161281b611a0b84610de9565b0361282557505050565b61036e93945061285661285a9392611a7c92016126d1612846825192515190565b6128506001610de9565b90612763565b5190565b612867633b9aca00610de9565b906127a0565b91909261287861253a565b5060009561288587610de9565b861180612973575b61289690612542565b6128a08585613f4a565b946003976128ac895490565b956128bb612638612632875190565b976128c583610de9565b888110156128ec57806126758b6126708f9461266a610918826128e7986108bb565b6128c5565b509193959890929496995061290084610de9565b61290b61036e895190565b81101561294057806126758c6126706129358461292f6126c68f9861293b996125b1565b93611955565b8d6125b1565b612900565b509193969092955061296394985061036e9761295b87610de9565b9788956129a7565b9161270d61036e60208501515190565b506128966129816005610de9565b8710905061288d565b9061036e916020818303121561209f576129a2600080fd5b61209f565b929093959194956129b661253a565b506129c087613f86565b9182976129cb600090565b9586906000906129da82610de9565b8811966129e88c8c846123d9565b9060808201916129f6835190565b612a02611a0b87610de9565b11612d30575b505050600199612a178b610de9565b871180612cf6575b612a33575b50505050505050505050505090565b908291612a418c9594610de9565b945b612a4e575b50612a24565b612a5961036e885190565b851015612cf1578c94612a726117ef6126c6838b6125b1565b612a7b83610355565b14612ce2578a8a8a8a612a9b612a946126c687846125b1565b87896123d9565b9960808b019a612aa98c5190565b612ab5611a0b8c610de9565b14612ccd57612ac38d613f86565b94612c27575b8b6128568c8c612b219a9b9c9d9e9f94612aef612ae7612b0e975190565b928201611de1565b612b076060612b0060208501611de1565b9301611de1565b928b61401c565b612b1b6126c689856125b1565b906129a7565b8d612b37612b316117ef846141d4565b91610355565b1480612c07575b612b55575b506001015b9a5b9a939291908b612a43565b9a8b919e91608081018c612b67825190565b916080860192612b7b611a0b61036e865190565b11612ba4575b505050612b489250612b9c9150805160409091015151015190565b9a9d90612b43565b84612be1612bd261285a611a0b95612bcc612be698612850612bc761036e995190565b915190565b9061192f565b95805160409091015151015190565b612763565b11612bf4578b818c81612b81565b9a509c612c019060010190565b9a612b4a565b508b612c21611a0b61193684805160409091015151015190565b11612b3e565b899b8a9b5061285682612c686020612c50612b219c9d9e9f61214761214791612b0e9901611de1565b6369cff80d90612c5f60405190565b93849260e01b90565b825260049082905afa908115612cc0575b600091612c92575b509d509250509b9998979650612ac9565b612cb3915060203d8111612cb9575b612cab81836105f6565b81019061298a565b38612c81565b503d612ca1565b612cc861210b565b612c79565b505050505050612c0191929394955060010190565b612c0191929394955060010190565b612a48565b50612d10612d0660208701515190565b6128676020610de9565b612d29611a0b61036e612d236002610de9565b8b612763565b1115612a1f565b9091929a5088612d80575b84839261285692612d4d612d77965190565b612d58888301611de1565b90612d716060612d6a60208601611de1565b9401611de1565b9361401c565b97388080612a08565b612d779291945080612da16020612c50612147612147896128569701611de1565b825260049082905afa908115612de4575b600091612dc6575b50959293509050612d3b565b612dde915060203d8111612cb957612cab81836105f6565b38612dba565b612dec61210b565b612db2565b90612dfe92913390612f71565b50565b3561036e81610470565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13682900301821215612e6f575b01602081359167ffffffffffffffff8311612e62575b0191602082023603831361034257565b612e6a600080fd5b612e52565b612e77600080fd5b612e3c565b3561036e816104db565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612231570190565b61039190610de9565b9095949261034a94612ef5610a8c92612eeb608096612ee160a088019c6000890152565b6020870190612eb4565b6040850190610388565b6060830190610388565b15612f0657565b60405162461bcd60e51b815260206004820152602560248201527f59616b526f757465723a20496e73756666696369656e74206f7574707574206160448201527f6d6f756e740000000000000000000000000000000000000000000000000000006064820152608490fd5b92939183916130e79161301c90612f8785612e01565b90612f926000610de9565b811180156134a9575b61345a575b506020612fcb612147612147612fc6612fbc60408b018b612e0b565b6122bb6000610de9565b612e7c565b612fde612fc6612fbc60808a018a612e0b565b90612fe860405190565b948592839182917f70a08231000000000000000000000000000000000000000000000000000000005b835260048301610395565b03915afa91821561344d575b60009261342b575b508192613065925061304b612fc6612fbc6040890189612e0b565b9061305f612fc6612fbc60808a018a612e0b565b91613553565b6130cd6020613083612147612147612fc6612fbc60408a018a612e0b565b613096612fc6612fbc6080890189612e0b565b906130a060405190565b938492839182917f70a0823100000000000000000000000000000000000000000000000000000000613011565b03915afa908115613301575b6000916132e3575b50612763565b93613113612fc66130fb6040850185612e0b565b6122bb61284661310e6040890189612e0b565b905090565b9261311e6000610de9565b955b606084019061313561036e61310e8488612e0b565b8810156133a25790879161315261036e61284661310e858a612e0b565b83101561339a578561317a612fc661316d6080840184612e0b565b6122bb6126326001610de9565b915b6131a8612147612147612fc66131956040870187612e0b565b6122bb6131a26001610de9565b8c611955565b9360206131b460405190565b9586907f70a0823100000000000000000000000000000000000000000000000000000000825281806131e98960048301610395565b03915afa94851561338d575b60009561334e575b50926132cf612147612147612fc6896122bb613283896000806132dd9f9b6132d79f9e8f6130cd9f60209f8f93613250612147612147612fc68561324a6132b4968d996132a99b50612e0b565b90612249565b9489613290612fc663eab90da6956122bb613283613278612fc68461324a60408a018a612e0b565b956040810190612e0b565b919092611a8a6001610de9565b90873b15613341575b6040519a8b998a98899760e01b90565b875260048701612ebd565b03925af18015613334575b61330e575b506040810190612e0b565b6040516130a0565b96612e86565b95613120565b6132fb915060203d8111612cb957612cab81836105f6565b386130e1565b61330961210b565b6130d9565b6133279060005b61331f81836105f6565b810190610337565b386132c4565b503d613315565b61333c61210b565b6132bf565b613349600080fd5b613299565b839550868593949592819260203d8111613386575b61336d81836105f6565b81016133789161298a565b9750925050939291936131fd565b503d613363565b61339561210b565b6131f5565b85859161317c565b9594936133dd9297506133e39350612fc69150612fbc906133d36133cb61036e60208401612e01565b891015612eff565b6040810190612e0b565b92612e01565b91836134186134127f9fc8352e52998db4087d5e6e1c1aafa38788e749e5d7a24f5cb230f73795440293611544565b93611544565b93613425611fb460405190565b0390a390565b61306592506134479060203d8111612cb957612cab81836105f6565b91613030565b61345561210b565b613028565b61346d915061346888612e01565b613513565b6134a381613484612fc6612fbc60408a018a612e0b565b908561349d6134936002611fee565b92612be18d612e01565b92613553565b38612fa0565b506134b46001611592565b6134c1611a0b6000610de9565b11612f9b565b156134ce57565b60405162461bcd60e51b815260206004820152601b60248201527f59616b526f757465723a20496e73756666696369656e742066656500000000006044820152606490fd5b9061354e61036e92613523600090565b5061353c61353461036e6001611592565b8410156134c7565b612bcc613547611259565b9384612763565b6127a0565b9291906135626117ef30611544565b61356b82610355565b146135815761357c61034a94611544565b613c51565b5061358e61034a93611544565b613be9565b1561359a57565b60405162461bcd60e51b815260206004820152602860248201527f59616b526f757465723a2050617468206e6565647320746f20626567696e207760448201527f69746820574554480000000000000000000000000000000000000000000000006064820152608490fd5b90612dfe929161367361366e612fc66136676136356136276040870187612e0b565b93906000946122bb86610de9565b613661612b317f0000000000000000000000000000000000000000000000000000000000000000610355565b14613593565b8301612e01565b613682565b61367c30611544565b90612f71565b60006136ce6136b36121477f0000000000000000000000000000000000000000000000000000000000000000611544565b63d0e30db0813b15613705575b604051948593849260e01b90565b825281600481015b03925af180156136f8575b6136e85750565b61034a90600061331f81836105f6565b61370061210b565b6136e1565b61370d600080fd5b6136c0565b1561371957565b60405162461bcd60e51b815260206004820152602660248201527f59616b526f757465723a2050617468206e6565647320746f20656e642077697460448201527f68205745544800000000000000000000000000000000000000000000000000006064820152608490fd5b6137f89061034a93926137e86137b6612fc66040850161310e6122bb6128466137ad848a612e0b565b9390948a612e0b565b6137e2612b317f0000000000000000000000000000000000000000000000000000000000000000610355565b14613712565b336137f230611544565b92612f71565b90613819565b91602061034a929493611f3460408201966000830190610388565b6000906138486121477f0000000000000000000000000000000000000000000000000000000000000000611544565b6138728363205c2878833b1561387d575b6136d661386560405190565b9788968795869460e01b90565b8452600484016137fe565b613885600080fd5b613859565b949290979695939160e0860198600087016138a491610388565b602086016138b191610388565b6040850152606084015260ff16608083015260a082015260c00152565b929561034a96612fc6939661394061394b8795986138ef6040880188612e0b565b92909661390b61214761214760009c8d9b8c986122bb8a610de9565b9563d505accf9333986139288761392130611544565b9d01612e01565b893b1561398c575b6040519c8d9b8c9a8b9960e01b90565b89526004890161388a565b03925af1801561397f575b613962575b5050612df1565b8161397892903d1061332d5761331f81836105f6565b388061395b565b61398761210b565b613956565b613994600080fd5b613930565b929561034a96612fc693966139406139ba8795986138ef6040880188612e0b565b03925af180156139ee575b6139d1575b5050613784565b816139e792903d1061332d5761331f81836105f6565b38806139ca565b6139f661210b565b6139c5565b61034a907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956115db565b61034a907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95611762565b61034a903361058b565b61034a903390613a71613a6a610df6565b91826115db565b6117de565b61034a9190613a87611c6533611c3f565b613ad8565b15613a9357565b60405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f207265636f76657200000000000000000000000000006044820152606490fd5b613aed613ae56000610de9565b835b11613a8c565b613b0182613afa83611544565b3390613be9565b613b38613b2e7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892611544565b926104c160405190565b0390a2565b9061034a91613a76565b61034a90613b57611c6533611c3f565b613b016000613b6e613b6882610de9565b84613ae7565b8080808086613b7f61214733611544565b828215613b99575bf1610da457613b9461210b565b610da4565b506108fc613b87565b61034a90613b47565b613bc4613bbe61036e9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b613c2c600492613c1d61034a95613c0363a9059cbb613bab565b92613c0d60405190565b96879460208601908152016137fe565b602082018103825203836105f6565b613ee9565b604090611f3461034a949695939661210160608401986000850190610388565b90613c2c90613c1d61034a95600495613c6d6323b872dd613bab565b93613c7760405190565b9788956020870190815201613c31565b15613c8e57565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b613c2c600492613c1d61034a95613d26600084613d1582610de9565b8414918215613d33575b5050613c87565b613c0363095ea7b3613bab565b9091506020613d4189611544565b63dd62ed3e90613d6d613d5330611544565b92613d78613d6060405190565b9788958694859460e01b90565b845260048401611ff8565b03915afa918215613dc9575b600092613da1575b50611a0b613d9991610de9565b148438613d1f565b613d99919250613dc1611a0b9160203d8111612cb957612cab81836105f6565b929150613d8c565b613dd161210b565b613d84565b3d15613df057613de53d610e7b565b903d6000602084013e565b606090565b15613dfc57565b60405162461bcd60e51b815280611743600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b801515610403565b9050519061034a82613e45565b9061036e9160208183031215613e4d57613e72600080fd5b613e4d565b15613e7e57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b600091613ef68392611544565b9082602082019151925af1613f12613f0c613dd6565b91613df5565b8051613f21611a0b6000610de9565b11613f295750565b613f45816020613f3a61034a945190565b818301019101613e5a565b613e77565b91906040613f6b613f5961253a565b92613f648496613f70565b8452613f70565b910152565b90602091613f80611a9084610de9565b92830152565b613f8e61253a565b5061036e600082015191612385602082015191613fdb6040820151613fd4613fbc6080606086015195015190565b95613fcd613fc86121e1565b998a52565b6020890152565b6040870152565b6060850152565b6116759061036e939261161c565b614010929161034a9161400260405190565b948592602084019283613fe2565b908103825203836105f6565b90926103919360809361034a9796614043604086019161403d835191613f70565b90613ff0565b9052614058602085019161403d835191613f70565b905261406d600084019161403d835191613f70565b9052614082606083019161403d835191613f70565b9052019161408e835190565b611955565b61409b61253a565b5061036e6140ac6000830151614172565b916123856140bd60208301516140e9565b91613fdb6140ce60408301516140e9565b613fd4613fbc60806140e360608701516140e9565b95015190565b908151916140ff61263860209461286786610de9565b928361410b6000610de9565b61412261036e614119865190565b61286786610de9565b81101561416b576141669061416161415761415161414861414288610de9565b8561192f565b611a8a88610de9565b87015190565b612670838a6125b1565b612e86565b61410b565b5093505050565b9081519161418861263860209461286786610de9565b92836141946000610de9565b6141a261036e614119865190565b81101561416b576141cf906141616141c261415161414861414288610de9565b6141cc838a6125b1565b52565b614194565b604061036e916141e2600090565b500151805101519056fea2646970667358221220050642bbb4784edcf624a9ee744d61091dff6c7ed90df0f8a6914d82d857147864736f6c63430008110033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c8062b99e361461032957806301ffc9a714610320578063248a9ca3146103175780632f2ff15d1461030e57806331ac99201461030557806336568abe146102fc5780633a9a4081146102f35780633cf57ac7146102ea578063414cff85146102e157806352a52ab0146102d85780636b453c1f146102cf57806376c7a3c7146102c657806376ebe69c146102bd5780637c7a561b146102b4578063809356aa146102ab57806383637d14146102a25780638980f11f146102995780638bb9c5bf1461029057806391d148541461028757806392f5d88a1461027e578063952e901214610275578063a0cf0aea1461026c578063a217fddf14610263578063a3f4df7e1461025a578063aede369314610251578063b381cf4014610248578063b9a89ca31461023f578063befe980314610236578063c3accd481461022d578063c8a3a5c614610224578063ce6e28f21461021b578063d547741f14610212578063d73792a914610209578063d8baf7cf14610200578063dd8544b3146101f7578063dede7f15146101ee578063f2fde38b146101e5578063f6ee13a6146101dc5763f87422540361000e576101d7611424565b61000e565b506101d76113f3565b506101d7611344565b506101d7611319565b506101d76112bd565b506101d7611296565b506101d761126c565b506101d7611231565b506101d7611209565b506101d76111e2565b506101d76111bb565b506101d76111a6565b506101d761116c565b506101d7610f93565b506101d7610f6c565b506101d7610f36565b506101d7610e08565b506101d7610dbf565b506101d7610d6d565b506101d7610d27565b506101d7610bda565b506101d7610bb3565b506101d7610b8b565b506101d7610b32565b506101d7610a93565b506101d7610a06565b506101d76109db565b506101d76109b1565b506101d7610968565b506101d7610921565b506101d761085d565b506101d761082f565b506101d7610748565b506101d7610576565b506101d761054f565b506101d7610522565b506101d76104a0565b506101d7610434565b506101d76103a5565b600080fd5b600091031261034257565b61034a600080fd5b565b61036e916008021c5b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b9061036e915461034c565b61036e60006002610371565b61039190610355565b9052565b60208101929161034a9190610388565b50346103d2575b6103b7366004610337565b6103ce6103c261037c565b60405191829182610395565b0390f35b6103da600080fd5b6103ac565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361033257565b9050359061034a826103df565b9061036e916020818303121561040a5761042f600080fd5b61040a565b5034610463575b6103ce61045161044c366004610417565b61146c565b60405191829182901515815260200190565b61046b600080fd5b61043b565b80610403565b9050359061034a82610470565b9061036e91602081830312156104765761049b600080fd5b610476565b50346104ce575b6103ce6104bd6104b8366004610483565b61159c565b6040515b9182918290815260200190565b6104d6600080fd5b6104a7565b61040381610355565b9050359061034a826104db565b919061036e90604084820312610515575b61050c8185610476565b936020016104e4565b61051d600080fd5b610502565b5034610542575b61053d6105373660046104f1565b906115db565b604051005b61054a600080fd5b610529565b5034610569575b61053d610564366004610483565b611fc7565b610571600080fd5b610556565b5034610591575b61053d61058b3660046104f1565b906117de565b610599600080fd5b61057d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761063657604052565b61063e6105c6565b604052565b9061034a61065060405190565b92836105f6565b6020809167ffffffffffffffff811161066f57020190565b6106776105c6565b020190565b9092919261069161068c82610657565b610643565b93818552602080860192028301928184116106cf575b915b8383106106b65750505050565b602080916106c484866104e4565b8152019201916106a9565b6106d7600080fd5b6106a7565b9061036e9181601f820112156106f8575b60208135910161067c565b610700600080fd5b6106ed565b9061036e9160208183031261073b575b80359067ffffffffffffffff821161072e575b016106dc565b610736600080fd5b610728565b610743600080fd5b610715565b5034610762575b61053d61075d366004610705565b611f03565b61076a600080fd5b61074f565b908160a091031261077d5790565b61036e600080fd5b60ff8116610403565b9050359061034a82610785565b60e081830312610822575b6107c382823567ffffffffffffffff8111610815575b830161076f565b926107d18360208401610476565b926107df81604085016104e4565b926107ed8260608301610476565b9261036e6107fe846080850161078e565b9361080c8160a08601610476565b9360c001610476565b61081d600080fd5b6107bc565b61082a600080fd5b6107a6565b5034610850575b61053d61084436600461079b565b95949094939193613999565b610858600080fd5b610836565b503461087e575b61053d61087236600461079b565b959490949391936138ce565b610886600080fd5b610864565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6108db6001916108c9815490565b8410156108e457600052602060002090565b91020190600090565b6108ec61088b565b600052602060002090565b60036000610903825490565b83101561091e575061036e91610918916108bb565b90610371565b80fd5b503461093e575b6103ce6103c2610939366004610483565b6108f7565b610946600080fd5b610928565b9061036e91602081830312156104e457610963600080fd5b6104e4565b5034610982575b61053d61097d36600461094b565b6139fb565b61098a600080fd5b61096f565b61036e916008021c81565b9061036e915461098f565b61036e6000600161099a565b50346109ce575b6109c3366004610337565b6103ce6104bd6109a5565b6109d6600080fd5b6109b8565b50346109f9575b6109ed366004610337565b6103ce6104bd60035490565b610a01600080fd5b6109e2565b5034610a24575b610a18366004610337565b6103ce6104bd60045490565b610a2c600080fd5b610a0d565b608081830312610a6e575b610a468282610476565b9261036e610a5784602085016104e4565b93610a6581604086016104e4565b9360600161078e565b610a76600080fd5b610a3c565b90815260408101929161034a916020905b0190610388565b5034610ac7575b610ab1610aa8366004610a31565b92919091612118565b906103ce610abe60405190565b92839283610a7b565b610acf600080fd5b610a9a565b9091606082840312610b25575b61036e610b0184843567ffffffffffffffff8111610b18575b850161076f565b93610b0f8160208601610476565b936040016104e4565b610b20600080fd5b610afa565b610b2d600080fd5b610ae1565b5034610b4d575b61053d610b47366004610ad4565b91613784565b610b55600080fd5b610b39565b919061036e90604084820312610b7e575b610b7581856104e4565b93602001610476565b610b86600080fd5b610b6b565b5034610ba6575b61053d610ba0366004610b5a565b90613b3d565b610bae600080fd5b610b92565b5034610bcd575b61053d610bc8366004610483565b613a4f565b610bd5600080fd5b610bba565b5034610bf8575b6103ce610451610bf23660046104f1565b9061156c565b610c00600080fd5b610be1565b909182601f83011215610c44575b602082359267ffffffffffffffff8411610c37575b01926020830284011161034257565b610c3f600080fd5b610c28565b610c4c600080fd5b610c13565b608081830312610cb3575b610c668282610476565b92610ca2610c7784602085016104e4565b93610c8581604086016104e4565b9360608101359067ffffffffffffffff8211610ca6575b01610c05565b9091565b610cae600080fd5b610c9c565b610cbb600080fd5b610c5c565b9060808061034a93610cda60008201516000860190610388565b610cec60208201516020860190610388565b610cfe60408201516040860190610388565b610d1060608201516060860190610388565b0151910152565b60a08101929161034a9190610cc0565b5034610d54575b6103ce610d48610d3f366004610c51565b93929092612275565b60405191829182610d17565b610d5c600080fd5b610d2e565b60046000610903825490565b5034610d8a575b6103ce6103c2610d85366004610483565b610d61565b610d92600080fd5b610d74565b61035561036e61036e9290565b61036e90610d97565b61036e6000610da4565b61036e610dad565b5034610ddc575b610dd1366004610337565b6103ce6103c2610db7565b610de4600080fd5b610dc6565b61036e61036e61036e9290565b61036e6000610de9565b61036e610df6565b5034610e25575b610e1a366004610337565b6103ce6104bd610e00565b610e2d600080fd5b610e0f565b610e6f60209167ffffffffffffffff8111610e7357601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b0190565b61059e6105c6565b90610e8861068c83610e32565b918252565b610e976010610e7b565b7f43616d656c6f7459616b526f7574657200000000000000000000000000000000602082015290565b61036e610e8d565b61036e610ec0565b61036e610ec8565b60005b838110610eeb5750506000910152565b8181015183820152602001610edb565b610f1c61059e602093610e6f93610f10815190565b80835293849260200190565b95869101610ed8565b602080825261036e92910190610efb565b5034610f5f575b610f48366004610337565b6103ce610f53610ed0565b60405191829182610f25565b610f67600080fd5b610f3d565b5034610f86575b61053d610f81366004610483565b613ba2565b610f8e600080fd5b610f73565b5034610fce575b610fa5366004610337565b6103ce7f00000000000000000000000000000000000000000000000000000000000000006103c2565b610fd6600080fd5b610f9a565b919060a083820312611048575b610ff28184610476565b9261100082602083016104e4565b9261036e61101184604085016104e4565b9361103281606086013567ffffffffffffffff811161103b575b86016106dc565b93608001610476565b611043600080fd5b61102b565b611050600080fd5b610fe8565b9061107561106e611064845190565b8084529260200190565b9260200190565b9060005b8181106110865750505090565b9091926110a361109c6001928651815260200190565b9460200190565b929101611079565b90610e6f81602093610388565b906110c761106e611064845190565b9060005b8181106110d85750505090565b9091926110eb61109c60019286516110ab565b9291016110cb565b9061036e9060808061115361114161112f61111d60a0870160008a015188820360008a0152611055565b602089015187820360208901526110b8565b604088015186820360408801526110b8565b606087015185820360608701526110b8565b940151910152565b602080825261036e929101906110f3565b5034611199575b6103ce61118d611184366004610fdb565b9392909261286d565b6040519182918261115b565b6111a1600080fd5b611173565b5061053d6111b5366004610ad4565b91613605565b50346111d5575b61053d6111d036600461094b565b612096565b6111dd600080fd5b6111c2565b50346111fc575b61053d6111f7366004610705565b611ea7565b611204600080fd5b6111e9565b5034611224575b61053d61121e366004610ad4565b91612df1565b61122c600080fd5b611210565b503461124c575b61053d6112463660046104f1565b90611762565b611254600080fd5b611238565b61036e612710610de9565b61036e611259565b5034611289575b61127e366004610337565b6103ce6104bd611264565b611291600080fd5b611273565b50346112b0575b61053d6112ab36600461094b565b613a25565b6112b8600080fd5b61129d565b50346112d7575b61053d6112d236600461094b565b611c9f565b6112df600080fd5b6112c4565b909160608284031261130c575b61036e6112fe8484610476565b93610b0f81602086016104e4565b611314600080fd5b6112f1565b5034611337575b6103ce610d486113313660046112e4565b916123d9565b61133f600080fd5b611320565b503461135e575b61053d61135936600461094b565b613a59565b611366600080fd5b61134b565b909160c0828403126113e6575b6113828383610476565b9261139081602085016104e4565b9261139e82604083016104e4565b9261036e6113c284606085013567ffffffffffffffff81116113d9575b85016106dc565b936113d08160808601610476565b9360a001610476565b6113e1600080fd5b6113bb565b6113ee600080fd5b611378565b5034611417575b6103ce61118d61140b36600461136b565b949390939291926125c8565b61141f600080fd5b6113fa565b503461145f575b611436366004610337565b6103ce7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956104bd565b611467600080fd5b61142b565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156114bc575090565b61036e91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61035561036e61036e9273ffffffffffffffffffffffffffffffffffffffff1690565b61036e90611518565b61036e9061153b565b9061150a90611544565b61036e905b60ff1690565b61036e9054611557565b61036e916115869161158060009182611508565b0161154d565b611562565b61036e9081565b61036e905461158b565b60016115b561036e926115ad600090565b506000611508565b01611592565b9061034a916115d16115cc8261159c565b6115e5565b9061034a91611832565b9061034a916115bb565b61034a9033906116a4565b61036e61036e61036e9273ffffffffffffffffffffffffffffffffffffffff1690565b61036e90610de9565b610e6f6116349260209261162e815190565b94859290565b93849101610ed8565b61167b61036e9392611675611675937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b9061161c565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b906116b66116b2828461156c565b1590565b6116be575050565b6117439161036e6116f76116f16116d761172b9561153b565b6116eb6116e56014926115f0565b91610de9565b90611a64565b92611613565b6117066020916116eb83610de9565b9261171f61171360405190565b9485938401928361163d565b908103825203826105f6565b60405191829162461bcd60e51b835260048301610f25565b0390fd5b9061034a916117586115cc8261159c565b9061034a916118a8565b9061034a91611747565b1561177357565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b61034a91906118036117f433610355565b610355565b6117fd84610355565b1461176c565b6118a8565b9060ff905b9181191691161790565b9061182761036e61182e92151590565b8254611808565b9055565b906118406116b2828461156c565b611848575050565b611862600161185d8360006115808782611508565b611817565b33906118986118926118927f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92611544565b926118a260405190565b600090a4565b906118b3818361156c565b6118bb575050565b6118cf600061185d83826115808782611508565b33906118986118926118927ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b919061193a565b9290565b9180830292818404149015171561194d57565b61034a6118ff565b9190820180921161194d57565b369037565b9061034a61197d61197784610e7b565b93610e32565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160208401611962565b9060016020916119b6845190565b8110156119c4575b02010190565b6119cc61088b565b6119be565b60019080156119de570390565b6119e66118ff565b0390565b61155c61036e61036e9290565b61036e90611a0f611a0b61036e9460ff1690565b9190565b901c90565b15611a1b57565b60405162461bcd60e51b815280611743600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290611a95611a90611a8183611a7c86610de9565b61192f565b611a8a85610de9565b90611955565b611967565b916000916030611aad611aa785610de9565b866119a8565b53611b01611af87f780000000000000000000000000000000000000000000000000000000000000092611a7c6001958695881a611af2611aec88610de9565b8b6119a8565b53610de9565b611a8a83610de9565b915b611b24575b505061036e9293611b1e611a0b61036e93610de9565b14611a14565b9094611b2f82610de9565b861115611bbb57611ba8611ba28392611b85611b687f303132333435363738396162636465660000000000000000000000000000000090565b611b72600f610de9565b83166010811015611bae575b1a60f81b90565b861a611b918a896119a8565b53611b9c60046119ea565b906119f7565b966119d1565b91611b03565b611bb661088b565b611b7e565b94611b08565b15611bc857565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b61034a90611c6a611c65335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9561156c565b611bc1565b61034a90611c7781611544565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91613cf9565b61034a90611c33565b61034a90611cb8611c6533611c3f565b611e64565b90611ccc61106e611064845190565b9060005b818110611cdd5750505090565b909192611cf061109c60019286516110ab565b929101611cd0565b602080825261036e92910190611cbd565b9190600861180d910291611d3c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841b90565b921b90565b9190611d5261036e61182e93610de9565b908354611d09565b61034a91600091611d41565b818110611d71575050565b80611d7f6000600193611d5a565b01611d66565b9091828110611d9357505050565b61034a9290611da9905b92600052602060002090565b9081019101611d66565b9061034a91680100000000000000008211611dd4575b805490828155611d85565b611ddc6105c6565b611dc9565b61036e9051610355565b6001611e1c611d9d611dfb855190565b9467ffffffffffffffff8611611e4d575b611e168686611db3565b60200190565b92049160005b838110611e2f5750505050565b6001906020611e4061036e86611de1565b9401938184015501611e22565b611e556105c6565b611e0c565b9061034a91611deb565b61034a907f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647611e9260405190565b80611e9d8482611cf8565b0390a16003611e5a565b61034a90611ca8565b61034a90611ec0611c6533611c3f565b61034a907febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe611eee60405190565b80611ef98482611cf8565b0390a16004611e5a565b61034a90611eb0565b61034a90611f1c611c6533611c3f565b611f77565b90815260408101929161034a9160200152565b0152565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9061180d565b90611f7061036e61182e92610de9565b8254611f38565b61034a90611f856001611592565b817f4bb8a6184424e4bb853a4836042f5a726e4e710873989bfc6abdab19966f5b7091611fbd611fb460405190565b92839283611f21565b0390a16001611f60565b61034a90611f0c565b61034a90611fe0611c6533611c3f565b612046565b61036e90610355565b61036e9054611fe5565b91602061034a929493610a8c60408201966000830190610388565b9073ffffffffffffffffffffffffffffffffffffffff9061180d565b9061203f61036e61182e92611544565b8254612013565b61034a906120546002611fee565b817fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e29161208c61208360405190565b92839283611ff8565b0390a1600261202f565b61034a90611fd0565b9050519061034a82610470565b9050519061034a826104db565b919061036e906040848203126120dd575b6120d4818561209f565b936020016120ac565b6120e5600080fd5b6120ca565b90815260608101939261034a929091604091610a8c905b6020830190610388565b506040513d6000823e3d90fd5b9092604090949294612128600090565b9561216960009661217261214c612147612147610918600498896108bb565b611544565b9363ef99893a9261215c60405190565b9889978896879660e01b90565b865285016120ea565b03915afa806000809390926121af575b506121a9575050600161219157565b915050600090611a0b6121a383610da4565b92610de9565b93509150565b9092506121d3915060403d81116121da575b6121cb81836105f6565b8101906120b9565b9138612182565b503d6121c1565b61036e60a0610643565b6121f36121e1565b906000825260208080808086016000815201600081520160005b8152016000905250565b61036e6121eb565b60019060ff1660ff8114612231570190565b610e6f6118ff565b61036e61036e61036e9260ff1690565b9160209181101561225957020190565b61067761088b565b3561036e81610785565b9061039190610355565b9091929493612282612217565b5061228b612217565b9360005b8261229982612239565b10156123cf5760048460406122cc6109186122c66122c18e8a6122bb8a612239565b91612249565b612261565b856108bb565b926122d961214785611544565b61216963ef99893a6122ef898d61215c60405190565b03915afa600091829190816123ac575b5061231657505050612311905b61221f565b61228f565b600092612322846119ea565b60ff8616148015612396575b612340575b505050506123119061221f565b61231194995061238c929161236261236b9261235a6121e1565b96870161226b565b6020850161226b565b612378886040850161226b565b612385856060850161226b565b6080830152565b9590388080612333565b506123a561036e60808c015190565b831161232e565b9092506123c7915060403d81116121da576121cb81836105f6565b9091386122ff565b5093955050505050565b906123e2612217565b506123eb612217565b9160005b60046123fc61036e825490565b61240583612239565b101561250b5782604061241b61091885856108bb565b9261242861214785611544565b61216963ef99893a61243e8c8b61215c60405190565b03915afa600091829190816124e8575b5061246a5750505061246590600161230c5761221f565b6123ef565b600092612476846119ea565b60ff86161480156124d2575b612494575b505050506124659061221f565b6124659497506124c892916123626124ae9261235a6121e1565b6124bb866040850161226b565b612385886060850161226b565b9390388080612487565b506124e161036e60808a015190565b8311612482565b909250612503915060403d81116121da576121cb81836105f6565b90913861244e565b50505050905090565b61251c6121e1565b9060608252602080808080860160608152016060815201606061220d565b61036e612514565b1561254957565b60405162461bcd60e51b815260206004820152601c60248201527f59616b526f757465723a20496e76616c6964206d61782d7374657073000000006044820152606490fd5b90610e8861068c83610657565b9061034a61197d6125ab8461258e565b93610657565b90602080916119b6845190565b61036e6000610e7b565b9290949391956125d661253a565b5060006125e281610de9565b84118061274c575b6125f390612542565b6125fd8786613f4a565b958861260883610de9565b82111561273c57612618916127b6565b600396612623885490565b9561263d612638612632885190565b89611955565b61259b565b9a61264785610de9565b8c89821015612680579061267561267b92612670838f6109188261266a926108bb565b926125b1565b61226b565b60010190565b612647565b5050919395979990929496985061269686610de9565b6126a161036e8a5190565b8110156126dc57806126758b6126708f6126d1858f6126c66126d7996126cb926125b1565b611de1565b94611955565b906125b1565b612696565b509091939599929497506126f4965061036e986129a7565b9061270160208301515190565b61270d611a0b83610de9565b14612719575b50614093565b6127279082016103916125be565b612736604082016103916125be565b38612713565b505061274781610de9565b612618565b506125f361275a6005610de9565b851090506125ea565b9190820391821161194d57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b81156127aa570490565b6127b2612770565b0490565b90919061280560009360606002917f00000000000000000000000000000000000000000000000000000000000000006127ff6127f9670de0b6b3a7640000610de9565b94610de9565b9361286d565b6040810151519060009161281b611a0b84610de9565b0361282557505050565b61036e93945061285661285a9392611a7c92016126d1612846825192515190565b6128506001610de9565b90612763565b5190565b612867633b9aca00610de9565b906127a0565b91909261287861253a565b5060009561288587610de9565b861180612973575b61289690612542565b6128a08585613f4a565b946003976128ac895490565b956128bb612638612632875190565b976128c583610de9565b888110156128ec57806126758b6126708f9461266a610918826128e7986108bb565b6128c5565b509193959890929496995061290084610de9565b61290b61036e895190565b81101561294057806126758c6126706129358461292f6126c68f9861293b996125b1565b93611955565b8d6125b1565b612900565b509193969092955061296394985061036e9761295b87610de9565b9788956129a7565b9161270d61036e60208501515190565b506128966129816005610de9565b8710905061288d565b9061036e916020818303121561209f576129a2600080fd5b61209f565b929093959194956129b661253a565b506129c087613f86565b9182976129cb600090565b9586906000906129da82610de9565b8811966129e88c8c846123d9565b9060808201916129f6835190565b612a02611a0b87610de9565b11612d30575b505050600199612a178b610de9565b871180612cf6575b612a33575b50505050505050505050505090565b908291612a418c9594610de9565b945b612a4e575b50612a24565b612a5961036e885190565b851015612cf1578c94612a726117ef6126c6838b6125b1565b612a7b83610355565b14612ce2578a8a8a8a612a9b612a946126c687846125b1565b87896123d9565b9960808b019a612aa98c5190565b612ab5611a0b8c610de9565b14612ccd57612ac38d613f86565b94612c27575b8b6128568c8c612b219a9b9c9d9e9f94612aef612ae7612b0e975190565b928201611de1565b612b076060612b0060208501611de1565b9301611de1565b928b61401c565b612b1b6126c689856125b1565b906129a7565b8d612b37612b316117ef846141d4565b91610355565b1480612c07575b612b55575b506001015b9a5b9a939291908b612a43565b9a8b919e91608081018c612b67825190565b916080860192612b7b611a0b61036e865190565b11612ba4575b505050612b489250612b9c9150805160409091015151015190565b9a9d90612b43565b84612be1612bd261285a611a0b95612bcc612be698612850612bc761036e995190565b915190565b9061192f565b95805160409091015151015190565b612763565b11612bf4578b818c81612b81565b9a509c612c019060010190565b9a612b4a565b508b612c21611a0b61193684805160409091015151015190565b11612b3e565b899b8a9b5061285682612c686020612c50612b219c9d9e9f61214761214791612b0e9901611de1565b6369cff80d90612c5f60405190565b93849260e01b90565b825260049082905afa908115612cc0575b600091612c92575b509d509250509b9998979650612ac9565b612cb3915060203d8111612cb9575b612cab81836105f6565b81019061298a565b38612c81565b503d612ca1565b612cc861210b565b612c79565b505050505050612c0191929394955060010190565b612c0191929394955060010190565b612a48565b50612d10612d0660208701515190565b6128676020610de9565b612d29611a0b61036e612d236002610de9565b8b612763565b1115612a1f565b9091929a5088612d80575b84839261285692612d4d612d77965190565b612d58888301611de1565b90612d716060612d6a60208601611de1565b9401611de1565b9361401c565b97388080612a08565b612d779291945080612da16020612c50612147612147896128569701611de1565b825260049082905afa908115612de4575b600091612dc6575b50959293509050612d3b565b612dde915060203d8111612cb957612cab81836105f6565b38612dba565b612dec61210b565b612db2565b90612dfe92913390612f71565b50565b3561036e81610470565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13682900301821215612e6f575b01602081359167ffffffffffffffff8311612e62575b0191602082023603831361034257565b612e6a600080fd5b612e52565b612e77600080fd5b612e3c565b3561036e816104db565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612231570190565b61039190610de9565b9095949261034a94612ef5610a8c92612eeb608096612ee160a088019c6000890152565b6020870190612eb4565b6040850190610388565b6060830190610388565b15612f0657565b60405162461bcd60e51b815260206004820152602560248201527f59616b526f757465723a20496e73756666696369656e74206f7574707574206160448201527f6d6f756e740000000000000000000000000000000000000000000000000000006064820152608490fd5b92939183916130e79161301c90612f8785612e01565b90612f926000610de9565b811180156134a9575b61345a575b506020612fcb612147612147612fc6612fbc60408b018b612e0b565b6122bb6000610de9565b612e7c565b612fde612fc6612fbc60808a018a612e0b565b90612fe860405190565b948592839182917f70a08231000000000000000000000000000000000000000000000000000000005b835260048301610395565b03915afa91821561344d575b60009261342b575b508192613065925061304b612fc6612fbc6040890189612e0b565b9061305f612fc6612fbc60808a018a612e0b565b91613553565b6130cd6020613083612147612147612fc6612fbc60408a018a612e0b565b613096612fc6612fbc6080890189612e0b565b906130a060405190565b938492839182917f70a0823100000000000000000000000000000000000000000000000000000000613011565b03915afa908115613301575b6000916132e3575b50612763565b93613113612fc66130fb6040850185612e0b565b6122bb61284661310e6040890189612e0b565b905090565b9261311e6000610de9565b955b606084019061313561036e61310e8488612e0b565b8810156133a25790879161315261036e61284661310e858a612e0b565b83101561339a578561317a612fc661316d6080840184612e0b565b6122bb6126326001610de9565b915b6131a8612147612147612fc66131956040870187612e0b565b6122bb6131a26001610de9565b8c611955565b9360206131b460405190565b9586907f70a0823100000000000000000000000000000000000000000000000000000000825281806131e98960048301610395565b03915afa94851561338d575b60009561334e575b50926132cf612147612147612fc6896122bb613283896000806132dd9f9b6132d79f9e8f6130cd9f60209f8f93613250612147612147612fc68561324a6132b4968d996132a99b50612e0b565b90612249565b9489613290612fc663eab90da6956122bb613283613278612fc68461324a60408a018a612e0b565b956040810190612e0b565b919092611a8a6001610de9565b90873b15613341575b6040519a8b998a98899760e01b90565b875260048701612ebd565b03925af18015613334575b61330e575b506040810190612e0b565b6040516130a0565b96612e86565b95613120565b6132fb915060203d8111612cb957612cab81836105f6565b386130e1565b61330961210b565b6130d9565b6133279060005b61331f81836105f6565b810190610337565b386132c4565b503d613315565b61333c61210b565b6132bf565b613349600080fd5b613299565b839550868593949592819260203d8111613386575b61336d81836105f6565b81016133789161298a565b9750925050939291936131fd565b503d613363565b61339561210b565b6131f5565b85859161317c565b9594936133dd9297506133e39350612fc69150612fbc906133d36133cb61036e60208401612e01565b891015612eff565b6040810190612e0b565b92612e01565b91836134186134127f9fc8352e52998db4087d5e6e1c1aafa38788e749e5d7a24f5cb230f73795440293611544565b93611544565b93613425611fb460405190565b0390a390565b61306592506134479060203d8111612cb957612cab81836105f6565b91613030565b61345561210b565b613028565b61346d915061346888612e01565b613513565b6134a381613484612fc6612fbc60408a018a612e0b565b908561349d6134936002611fee565b92612be18d612e01565b92613553565b38612fa0565b506134b46001611592565b6134c1611a0b6000610de9565b11612f9b565b156134ce57565b60405162461bcd60e51b815260206004820152601b60248201527f59616b526f757465723a20496e73756666696369656e742066656500000000006044820152606490fd5b9061354e61036e92613523600090565b5061353c61353461036e6001611592565b8410156134c7565b612bcc613547611259565b9384612763565b6127a0565b9291906135626117ef30611544565b61356b82610355565b146135815761357c61034a94611544565b613c51565b5061358e61034a93611544565b613be9565b1561359a57565b60405162461bcd60e51b815260206004820152602860248201527f59616b526f757465723a2050617468206e6565647320746f20626567696e207760448201527f69746820574554480000000000000000000000000000000000000000000000006064820152608490fd5b90612dfe929161367361366e612fc66136676136356136276040870187612e0b565b93906000946122bb86610de9565b613661612b317f0000000000000000000000000000000000000000000000000000000000000000610355565b14613593565b8301612e01565b613682565b61367c30611544565b90612f71565b60006136ce6136b36121477f0000000000000000000000000000000000000000000000000000000000000000611544565b63d0e30db0813b15613705575b604051948593849260e01b90565b825281600481015b03925af180156136f8575b6136e85750565b61034a90600061331f81836105f6565b61370061210b565b6136e1565b61370d600080fd5b6136c0565b1561371957565b60405162461bcd60e51b815260206004820152602660248201527f59616b526f757465723a2050617468206e6565647320746f20656e642077697460448201527f68205745544800000000000000000000000000000000000000000000000000006064820152608490fd5b6137f89061034a93926137e86137b6612fc66040850161310e6122bb6128466137ad848a612e0b565b9390948a612e0b565b6137e2612b317f0000000000000000000000000000000000000000000000000000000000000000610355565b14613712565b336137f230611544565b92612f71565b90613819565b91602061034a929493611f3460408201966000830190610388565b6000906138486121477f0000000000000000000000000000000000000000000000000000000000000000611544565b6138728363205c2878833b1561387d575b6136d661386560405190565b9788968795869460e01b90565b8452600484016137fe565b613885600080fd5b613859565b949290979695939160e0860198600087016138a491610388565b602086016138b191610388565b6040850152606084015260ff16608083015260a082015260c00152565b929561034a96612fc6939661394061394b8795986138ef6040880188612e0b565b92909661390b61214761214760009c8d9b8c986122bb8a610de9565b9563d505accf9333986139288761392130611544565b9d01612e01565b893b1561398c575b6040519c8d9b8c9a8b9960e01b90565b89526004890161388a565b03925af1801561397f575b613962575b5050612df1565b8161397892903d1061332d5761331f81836105f6565b388061395b565b61398761210b565b613956565b613994600080fd5b613930565b929561034a96612fc693966139406139ba8795986138ef6040880188612e0b565b03925af180156139ee575b6139d1575b5050613784565b816139e792903d1061332d5761331f81836105f6565b38806139ca565b6139f661210b565b6139c5565b61034a907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab956115db565b61034a907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95611762565b61034a903361058b565b61034a903390613a71613a6a610df6565b91826115db565b6117de565b61034a9190613a87611c6533611c3f565b613ad8565b15613a9357565b60405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f207265636f76657200000000000000000000000000006044820152606490fd5b613aed613ae56000610de9565b835b11613a8c565b613b0182613afa83611544565b3390613be9565b613b38613b2e7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892611544565b926104c160405190565b0390a2565b9061034a91613a76565b61034a90613b57611c6533611c3f565b613b016000613b6e613b6882610de9565b84613ae7565b8080808086613b7f61214733611544565b828215613b99575bf1610da457613b9461210b565b610da4565b506108fc613b87565b61034a90613b47565b613bc4613bbe61036e9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b613c2c600492613c1d61034a95613c0363a9059cbb613bab565b92613c0d60405190565b96879460208601908152016137fe565b602082018103825203836105f6565b613ee9565b604090611f3461034a949695939661210160608401986000850190610388565b90613c2c90613c1d61034a95600495613c6d6323b872dd613bab565b93613c7760405190565b9788956020870190815201613c31565b15613c8e57565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b613c2c600492613c1d61034a95613d26600084613d1582610de9565b8414918215613d33575b5050613c87565b613c0363095ea7b3613bab565b9091506020613d4189611544565b63dd62ed3e90613d6d613d5330611544565b92613d78613d6060405190565b9788958694859460e01b90565b845260048401611ff8565b03915afa918215613dc9575b600092613da1575b50611a0b613d9991610de9565b148438613d1f565b613d99919250613dc1611a0b9160203d8111612cb957612cab81836105f6565b929150613d8c565b613dd161210b565b613d84565b3d15613df057613de53d610e7b565b903d6000602084013e565b606090565b15613dfc57565b60405162461bcd60e51b815280611743600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b801515610403565b9050519061034a82613e45565b9061036e9160208183031215613e4d57613e72600080fd5b613e4d565b15613e7e57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b600091613ef68392611544565b9082602082019151925af1613f12613f0c613dd6565b91613df5565b8051613f21611a0b6000610de9565b11613f295750565b613f45816020613f3a61034a945190565b818301019101613e5a565b613e77565b91906040613f6b613f5961253a565b92613f648496613f70565b8452613f70565b910152565b90602091613f80611a9084610de9565b92830152565b613f8e61253a565b5061036e600082015191612385602082015191613fdb6040820151613fd4613fbc6080606086015195015190565b95613fcd613fc86121e1565b998a52565b6020890152565b6040870152565b6060850152565b6116759061036e939261161c565b614010929161034a9161400260405190565b948592602084019283613fe2565b908103825203836105f6565b90926103919360809361034a9796614043604086019161403d835191613f70565b90613ff0565b9052614058602085019161403d835191613f70565b905261406d600084019161403d835191613f70565b9052614082606083019161403d835191613f70565b9052019161408e835190565b611955565b61409b61253a565b5061036e6140ac6000830151614172565b916123856140bd60208301516140e9565b91613fdb6140ce60408301516140e9565b613fd4613fbc60806140e360608701516140e9565b95015190565b908151916140ff61263860209461286786610de9565b928361410b6000610de9565b61412261036e614119865190565b61286786610de9565b81101561416b576141669061416161415761415161414861414288610de9565b8561192f565b611a8a88610de9565b87015190565b612670838a6125b1565b612e86565b61410b565b5093505050565b9081519161418861263860209461286786610de9565b92836141946000610de9565b6141a261036e614119865190565b81101561416b576141cf906141616141c261415161414861414288610de9565b6141cc838a6125b1565b52565b614194565b604061036e916141e2600090565b500151805101519056fea2646970667358221220050642bbb4784edcf624a9ee744d61091dff6c7ed90df0f8a6914d82d857147864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_tokenAddress": "token address",
          "_tokenAmount": "amount to recover"
        }
      },
      "recoverNative(uint256)": {
        "params": {
          "_amount": "amount"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findBestPath(uint256,address,address,address[],uint256)": {
        "notice": "Return path with best returns between two tokens"
      },
      "findBestPathWithGas(uint256,address,address,address[],uint256,uint256)": {
        "notice": "Return path with best returns between two tokens Takes gas-cost into account"
      },
      "queryAdapter(uint256,address,address,uint8)": {
        "notice": "Query single adapter"
      },
      "queryNoSplit(uint256,address,address)": {
        "notice": "Query all adapters"
      },
      "queryNoSplit(uint256,address,address,uint8[])": {
        "notice": "Query specified adapters"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverNative(uint256)": {
        "notice": "Recover native asset from contract"
      },
      "swapNoSplitToETHWithPermit((uint256,uint256,address[],address[],address[]),uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap token to WETH without the need to approve the first token"
      },
      "swapNoSplitWithPermit((uint256,uint256,address[],address[],address[]),uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap token to token without the need to approve the first token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 719,
        "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
        "label": "MIN_FEE",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 721,
        "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
        "label": "FEE_CLAIMER",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 724,
        "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
        "label": "TRUSTED_TOKENS",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 727,
        "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
        "label": "ADAPTERS",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/CamelotYakRouter.sol:CamelotYakRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}