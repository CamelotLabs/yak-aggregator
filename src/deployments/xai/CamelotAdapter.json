{
  "address": "0xD27c373950E7466C53e5Cd6eE3F70b240dC0B1B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6032859357b7745a513bbd7f906fa07b04cc72a86bd7db26f007a6333d1177e8",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0xD27c373950E7466C53e5Cd6eE3F70b240dC0B1B1",
    "transactionIndex": 1,
    "gasUsed": "2036754",
    "logsBloom": "0x
    "blockHash": "0xf5ccaf276632fc4e5772bdadcd67b41e6960f4a6d5a1ed8e8ccab54f88521ec6",
    "transactionHash": "0x6032859357b7745a513bbd7f906fa07b04cc72a86bd7db26f007a6333d1177e8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4381348,
        "transactionHash": "0x6032859357b7745a513bbd7f906fa07b04cc72a86bd7db26f007a6333d1177e8",
        "address": "0xD27c373950E7466C53e5Cd6eE3F70b240dC0B1B1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf5ccaf276632fc4e5772bdadcd67b41e6960f4a6d5a1ed8e8ccab54f88521ec6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381348,
        "transactionHash": "0x6032859357b7745a513bbd7f906fa07b04cc72a86bd7db26f007a6333d1177e8",
        "address": "0xD27c373950E7466C53e5Cd6eE3F70b240dC0B1B1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf5ccaf276632fc4e5772bdadcd67b41e6960f4a6d5a1ed8e8ccab54f88521ec6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 4381348,
        "transactionHash": "0x6032859357b7745a513bbd7f906fa07b04cc72a86bd7db26f007a6333d1177e8",
        "address": "0xD27c373950E7466C53e5Cd6eE3F70b240dC0B1B1",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000d27c373950e7466c53e5cd6ee3f70b240dc0b1b1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000003a34c",
        "logIndex": 2,
        "blockHash": "0xf5ccaf276632fc4e5772bdadcd67b41e6960f4a6d5a1ed8e8ccab54f88521ec6"
      }
    ],
    "blockNumber": 4381348,
    "cumulativeGasUsed": "2036754",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CamelotAdapter",
    "0x18E621B64d7808c3C47bccbbD7485d23F257D26f",
    238412
  ],
  "solcInputHash": "a90efb9be1a5fd6f066bdb43c9694a41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/CamelotAdapter.sol\":\"CamelotAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256, address) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256, address);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xdcadca798368411e9aa8d27351a38d3b99356dc613ea2e76c3a6a1d7e37155ee\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/CamelotAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ninterface IFactory {\\n    function getPair(address,address) external view returns (address);\\n}\\n\\ninterface IPair {\\n    function getAmountOut(uint256, address) external view returns (uint256);\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data,\\n        address referrer\\n    ) external;\\n}\\n\\ncontract CamelotAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address immutable FACTORY;\\n    address referrer;\\n\\n    constructor(\\n        string memory _name,\\n        address _factory,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        FACTORY = _factory;\\n    }\\n\\n    function setReferrer(address _referrer) public onlyMaintainer {\\n        referrer = _referrer;\\n    } \\n\\n    function getQuoteAndPair(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view returns (uint256 amountOut, address pair) {\\n        pair = IFactory(FACTORY).getPair(_tokenIn, _tokenOut);\\n        if (pair != address(0))\\n            amountOut = IPair(pair).getAmountOut(_amountIn, _tokenIn);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 amountOut, address pair) {\\n        if (_tokenIn != _tokenOut && _amountIn != 0)\\n            (amountOut, pair) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address to\\n    ) internal override {\\n        (uint256 amountOut, address pair) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\\n        require(amountOut >= _amountOut, \\\"Insufficent amount out\\\");\\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\\n            ? (uint256(0), amountOut)\\n            : (amountOut, uint256(0));\\n        IPair(pair).swap(amount0Out, amount1Out, to, new bytes(0), referrer);\\n    }\\n}\\n\",\"keccak256\":\"0x7493f0cfa0dac710b9015ef38736bc303645b90469120e03ebb2a64c53256276\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200003b575b62000020620000196200022e565b9162000256565b6040516121a76200080c8239608051816119e601526121a790f35b62000044600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008857604052565b620000926200004f565b604052565b90620000ae620000a660405190565b928362000066565b565b602090620000d1906001600160401b038111620000d557601f01601f191690565b0190565b620000df6200004f565b601f01601f191690565b60005b838110620000fd5750506000910152565b8181015183820152602001620000ec565b929190620000ae916200012b6200012583620000b0565b62000097565b9482865260208601918382011115620000e95762000147600080fd5b620000e9565b906200016c9181601f820112156200016f575b6020815191016200010e565b90565b62000178600080fd5b62000160565b6001600160a01b031690565b6001600160a01b0381165b036200004a57565b90505190620000ae826200018a565b8062000195565b90505190620000ae82620001ac565b90916060828403126200021f575b81516200016c90620001f69085906001600160401b03811162000210575b85016200014d565b936200020681602086016200019d565b93604001620001b3565b62000219600080fd5b620001ee565b62000228600080fd5b620001d0565b62000251620029d380380380620002458162000097565b928339810190620001c2565b909192565b9162000263919262000268565b608052565b9062000282620000ae926200027c620002a4565b6200064a565b62000800565b6200016c6200016c6200016c9290565b6200016c600062000288565b620000ae33620002be81620002b862000298565b620002cf565b600080516020620029b38339815191525b90620000ae9162000351565b905b600052602052604060002090565b6200016c906200017e906001600160a01b031682565b6200016c90620002eb565b6200016c9062000301565b90620002dd906200030c565b9060ff905b9181191691161790565b90620003456200016c6200034d92151590565b825462000323565b9055565b9062000366620003628284620003e0565b1590565b6200036f575050565b6200039560016200038f836000620003888782620002db565b0162000317565b62000332565b3390620003cf620003c8620003c87f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926200030c565b92620003da60405190565b600090a4565b6200016c91620003f8916200038860009182620002db565b5460ff1690565b156200040757565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d650000000000000000000000006044820152606490fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156200048a575b60208310146200048057565b620000ae6200044c565b91607f169162000474565b9160001960089290920291821b911b62000328565b9190620004bf6200016c6200034d9362000288565b90835462000495565b620000ae91600091620004aa565b818110620004e2575050565b80620004f26000600193620004c8565b01620004d6565b9190601f81116200050957505050565b6200051d620000ae93600052602060002090565b906020601f84018190048301931062000541575b6020601f909101040190620004d6565b909150819062000531565b9062000556815190565b906001600160401b0382116200062e575b6200057f8262000578855462000463565b85620004f9565b602090601f8311600114620005be576200034d929160009183620005b2575b5050600019600883021c1916906002021790565b0151905038806200059e565b601f19831691620005d485600052602060002090565b9260005b8181106200061557509160029391856001969410620005fb575b50505002019055565b01516000196008601f8516021c19169055388080620005f2565b91936020600181928787015181550195019201620005d8565b620006386200004f565b62000567565b90620000ae916200054c565b620000ae90620006786200065c825190565b620006706200066c600062000288565b9190565b1415620003ff565b60026200063e565b156200068857565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b620000ae90620007086200070233600080516020620029b3833981519152620003e0565b62000680565b62000782565b156200071657565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b906000199062000328565b906200077a6200016c6200034d9262000288565b82546200075b565b6200079b62000792600062000288565b8214156200070e565b620007a881600162000766565b620007b3306200030c565b620007fb620007e37ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a926200030c565b92620007ee60405190565b9182918290815260200190565b0390a2565b620000ae90620006de56fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101c257806306fdde03146101b9578063248a9ca3146101b05780632f2ff15d146101a757806336568abe1461019e5780634ebb79161461019557806369cff80d1461018c5780636b453c1f146101835780637ae267731461017a57806384a33e63146101715780638980f11f146101685780638bb9c5bf1461015f57806391d1485414610156578063a18a7bfc1461014d578063a217fddf14610144578063d547741f1461013b578063d8baf7cf14610132578063eab90da614610129578063ef99893a14610120578063f2fde38b146101175763f87422540361000e57610112610a3c565b61000e565b50610112610a15565b506101126109d7565b50610112610941565b506101126108c0565b50610112610898565b5061011261086e565b50610112610828565b506101126107fd565b506101126107d6565b506101126107ae565b50610112610756565b5061011261072e565b506101126106df565b50610112610698565b5061011261064f565b50610112610627565b506101126105fa565b5061011261054c565b506101126104e6565b5061011261022e565b600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081165b036101cb57565b90503590610208826101d0565b565b9061021e91602081830312610221576101fb565b90565b610229600080fd5b6101fb565b5034610261575b61025d61024b61024636600461020a565b610a84565b60405191829182901515815260200190565b0390f35b610269600080fd5b610235565b600091031261027957565b610208600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b9060016002830492168015610304575b60208310146102fc57565b6102086102b1565b91607f16916102f1565b8054600093929161032b610321836102e1565b8085529360200190565b916001811690811561037d575060011461034457505050565b6103579192939450600052602060002090565b916000925b8184106103695750500190565b80548484015260209093019260010161035c565b92949550505060ff1916825215156020020190565b9061021e9161030e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761043457604052565b61043c6103c4565b604052565b9061020861045b9261045260405190565b93848092610392565b03836103f4565b61021e911561044157610473610281565b610441565b61021e60006002610462565b60005b8381106104975750506000910152565b8181015183820152602001610487565b6104c861039c6020936104d1936104bc815190565b80835293849260200190565b95869101610484565b0190565b602080825261021e929101906104a7565b503461050f575b6104f836600461026e565b61025d610503610478565b604051918291826104d5565b610517600080fd5b6104ed565b806101f4565b905035906102088261051c565b9061021e916020818303121561052257610547600080fd5b610522565b503461057a575b61025d61056961056436600461052f565b610bb4565b6040515b9182918290815260200190565b610582600080fd5b610553565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff81166101f4565b90503590610208826105a0565b919061021e906040848203126105ed575b6105e48185610522565b936020016105bc565b6105f5600080fd5b6105da565b503461061a575b61061561060f3660046105c9565b90610bf3565b604051005b610622600080fd5b610601565b5034610642575b61061561063c3660046105c9565b90610e2a565b61064a600080fd5b61062e565b5034610669575b61061561066436600461052f565b61163d565b610671600080fd5b610656565b61021e916008021c81565b9061021e9154610676565b61021e60006001610681565b50346106b5575b6106aa36600461026e565b61025d61056961068c565b6106bd600080fd5b61069f565b9061021e91602081830312156105bc576106da600080fd5b6105bc565b50346106f9575b6106156106f43660046106c2565b611d35565b610701600080fd5b6106e6565b919061021e90604084820312610721575b6105e481856105bc565b610729600080fd5b610717565b5034610749575b610615610743366004610706565b906114cf565b610751600080fd5b610735565b5034610770575b61061561076b36600461052f565b611497565b610778600080fd5b61075d565b919061021e906040848203126107a1575b61079881856105bc565b93602001610522565b6107a9600080fd5b61078e565b50346107c9575b6106156107c336600461077d565b906115ab565b6107d1600080fd5b6107b5565b50346107f0575b6106156107eb36600461052f565b611d89565b6107f8600080fd5b6107dd565b503461081b575b61025d61024b6108153660046105c9565b90610b84565b610823600080fd5b610804565b5034610842575b61061561083d3660046106c2565b611903565b61084a600080fd5b61082f565b61021e61021e61021e9290565b61021e600061084f565b61021e61085c565b503461088b575b61088036600461026e565b61025d610569610866565b610893600080fd5b610875565b50346108b3575b6106156108ad3660046105c9565b90610d94565b6108bb600080fd5b61089f565b50346108da575b6106156108d53660046106c2565b611d5f565b6108e2600080fd5b6108c7565b919060a083820312610934575b6108fe8184610522565b9261090c8260208301610522565b9261021e61091d84604085016105bc565b9361092b81606086016105bc565b936080016105bc565b61093c600080fd5b6108f4565b503461095f575b6106156109563660046108e7565b93929092611705565b610967600080fd5b610948565b909160608284031261099d575b61021e6109868484610522565b9361099481602086016105bc565b936040016105bc565b6109a5600080fd5b610979565b908152604081019291610208916020905b019073ffffffffffffffffffffffffffffffffffffffff169052565b5034610a08575b6109f26109ec36600461096c565b91611646565b9061025d6109ff60405190565b928392836109aa565b610a10600080fd5b6109de565b5034610a2f575b610615610a2a3660046106c2565b611d93565b610a37600080fd5b610a1c565b5034610a77575b610a4e36600461026e565b61025d7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610569565b610a7f600080fd5b610a43565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610ad4575090565b61021e91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61058761021e61021e9273ffffffffffffffffffffffffffffffffffffffff1690565b61021e90610b30565b61021e90610b53565b90610b2290610b5c565b61021e905b60ff1690565b61021e9054610b6f565b61021e91610b9e91610b9860009182610b20565b01610b65565b610b7a565b61021e9081565b61021e9054610ba3565b6001610bcd61021e92610bc5600090565b506000610b20565b01610baa565b9061020891610be9610be482610bb4565b610bfd565b9061020891610e87565b9061020891610bd3565b610208903390610cbc565b61021e61021e61021e9273ffffffffffffffffffffffffffffffffffffffff1690565b61021e9061084f565b6104d1610c4c92602092610c46815190565b94859290565b93849101610484565b610c9361021e9392610c8d610c8d937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b90610c34565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b90610cce610cca8284610b84565b1590565b610cd6575050565b610d759161021e610d0f610d09610cef610d4395610b53565b610d03610cfd601492610c08565b9161084f565b90611168565b92610c2b565b610d1e602091610d038361084f565b92610d37610d2b60405190565b94859384019283610c55565b908103825203826103f4565b6040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016104d5565b0390fd5b9061020891610d8a610be482610bb4565b9061020891610efd565b9061020891610d79565b15610da557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b6102089190610e58610e3b33610587565b73ffffffffffffffffffffffffffffffffffffffff841614610d9e565b610efd565b9060ff905b9181191691161790565b90610e7c61021e610e8392151590565b8254610e5d565b9055565b90610e95610cca8284610b84565b610e9d575050565b610eb76001610eb2836000610b988782610b20565b610e6c565b3390610eed610ee7610ee77f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610b5c565b92610ef760405190565b600090a4565b90610f088183610b84565b610f10575050565b610f246000610eb28382610b988782610b20565b3390610eed610ee7610ee77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810292918115918404141715610f9757565b610208610f54565b91908201809211610f9757565b90610208610fb960405190565b92836103f4565b6104d160209167ffffffffffffffff8111610ffd57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b61039c6103c4565b9061101761101283610fc0565b610fac565b918252565b369037565b9061020861103761103184611005565b93610fc0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0016020840161101c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060016020916110a0845190565b8110156110ae575b02010190565b6110b6611062565b6110a8565b60019080156110c8570390565b6110d0610f54565b0390565b610b7461021e61021e9290565b61021e906110f96110f561021e9460ff1690565b9190565b901c90565b1561110557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610d75600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290611199611194611185836111808661084f565b610f84565b61118e8561084f565b90610f9f565b611021565b9160009160306111b16111ab8561084f565b86611092565b536112056111fc7f7800000000000000000000000000000000000000000000000000000000000000926111806001958695881a6111f66111f08861084f565b8b611092565b5361084f565b61118e8361084f565b915b611228575b505061021e92936112226110f561021e9361084f565b146110fe565b90946112338261084f565b8611156112bf576112ac6112a6839261128961126c7f303132333435363738396162636465660000000000000000000000000000000090565b611276600f61084f565b831660108110156112b2575b1a60f81b90565b861a6112958a89611092565b536112a060046110d4565b906110e1565b966110bb565b91611207565b6112ba611062565b611282565b9461120c565b156112cc57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b61020890611388611383335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610b84565b6112c5565b611432565b1561139457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90610e62565b9061142b61021e610e839261084f565b82546113f3565b61144761143f600061084f565b82141561138d565b61145281600161141b565b61145b30610b5c565b6114926114887ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610b5c565b9261056d60405190565b0390a2565b61020890611351565b61020891906114b16113833361135d565b906114be61020892610b5c565b906114c9600061084f565b91611eec565b90610208916114a0565b61020891906114ea6113833361135d565b611555565b156114f657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61156a611562600061084f565b835b116114ef565b61157e8261157783610b5c565b3390611e18565b6114926114887f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610b5c565b90610208916114d9565b610208906115c56113833361135d565b6115ed565b506040513d6000823e3d90fd5b61058761021e61021e9290565b61021e906115d7565b61157e60006116046115fe8261084f565b84611564565b808080808661161a61161533610b5c565b610b5c565b828215611634575bf16115e45761162f6115ca565b6115e4565b506108fc611622565b610208906115b5565b61165192919061190c565b9091565b905051906102088261051c565b9061021e91602081830312156116555761167a600080fd5b611655565b91908203918211610f9757565b1561169357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606490fd5b9081526040810192916102089160200152565b936117d66117de9161171961161587610b5c565b906370a082319161172960405190565b926117348160e01b90565b845273ffffffffffffffffffffffffffffffffffffffff831660048501528888888c602088602481895afa9788156118a3575b600098611867575b508660209694611798946117bc99979461178894611c1c565b6040519586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa90811561185a575b60009161182c575b5061167f565b82111561168c565b61181161180b7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610b5c565b93610b5c565b9361182761181e60405190565b928392836116f2565b0390a3565b61184d915060203d8111611853575b61184581836103f4565b810190611662565b386117d0565b503d61183b565b6118626115ca565b6117c8565b6117889198509660209694611798948297946118926117bc9b8b3d81116118535761184581836103f4565b9b945094979950945094965061176f565b6118ab6115ca565b611767565b610208906118c06113833361135d565b6118f8565b9073ffffffffffffffffffffffffffffffffffffffff90610e62565b906118f161021e610e8392610b5c565b82546118c5565b6102089060036118e1565b610208906118b0565b60009384939092909173ffffffffffffffffffffffffffffffffffffffff831673ffffffffffffffffffffffffffffffffffffffff8316141580611963575b61195457505050565b909192945061165193506119cc565b5061196e600061084f565b81141561194b565b90505190610208826105a0565b9061021e91602081830312156119765761199b600080fd5b611976565b73ffffffffffffffffffffffffffffffffffffffff9091168152604081019291610208916020906109bb565b90611a3492939160206119dd600090565b95611a0a6116157f0000000000000000000000000000000000000000000000000000000000000000610b5c565b611a2863e6a43905611a1b60405190565b9889948593849360e01b90565b835288600484016119a0565b03915afa938415611b25575b600094611af5575b5083611a5761058760006115e4565b73ffffffffffffffffffffffffffffffffffffffff821603611a7857505050565b602092939550611615611a8a91610b5c565b611aab63f140a35a611ab6611a9e60405190565b9687958694859460e01b90565b8452600484016109aa565b03915afa908115611ae8575b600091611acd575091565b611ae5915060203d81116118535761184581836103f4565b91565b611af06115ca565b611ac2565b611b1791945060203d8111611b1e575b611b0f81836103f4565b810190611983565b9238611a48565b503d611b05565b611b2d6115ca565b611a40565b15611b3957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e737566666963656e7420616d6f756e74206f7574000000000000000000006044820152606490fd5b61021e90610587565b61021e9054611b98565b61020894611bf282989795611bd5608096611bce611bff97600060a08901980152565b60208c0152565b73ffffffffffffffffffffffffffffffffffffffff1660408a0152565b87820360608901526104a7565b94019073ffffffffffffffffffffffffffffffffffffffff169052565b91611c60611c4685610587611c38611c3e9886611ccd996119cc565b98909690565b861015611b32565b9173ffffffffffffffffffffffffffffffffffffffff1690565b10600090600014611d205750611c83611615611c7c600061084f565b9294610b5c565b611cc2636e1fdd7f9560009687958692611c9f6111948561084f565b611ca96003611ba1565b91873b15611d13575b6040519a8b998a98899760e01b90565b875260048701611bab565b03925af18015611d06575b611ce0575050565b8161020892903d10611cff575b611cf781836103f4565b81019061026e565b503d611ced565b611d0e6115ca565b611cd8565b611d1b600080fd5b611cb2565b611615611d2f611c839261084f565b94610b5c565b610208907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610bf3565b610208907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610d94565b610208903361063c565b610208903390611dab611da461085c565b9182610bf3565b610e2a565b611dc9611dc361021e9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916102089160200152565b611e5b600492611e4c61020895611e3263a9059cbb611db0565b92611e3c60405190565b9687946020860190815201611dee565b602082018103825203836103f4565b612110565b15611e6757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b611e5b600492611e4c61020895611f19600084611f088261084f565b8414918215611f26575b5050611e60565b611e3263095ea7b3611db0565b9091506020611f3489610b5c565b63dd62ed3e90611f60611f4630610b5c565b92611f6b611f5360405190565b9788958694859460e01b90565b8452600484016119a0565b03915afa918215611fbc575b600092611f94575b506110f5611f8c9161084f565b148438611f12565b611f8c919250611fb46110f59160203d81116118535761184581836103f4565b929150611f7f565b611fc46115ca565b611f77565b3d15611fe357611fd83d611005565b903d6000602084013e565b606090565b15611fef57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610d75600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101f4565b9050519061020882612052565b9061021e916020818303121561205a5761207f600080fd5b61205a565b1561208b57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b60009161211d8392610b5c565b9082602082019151925af1612139612133611fc9565b91611fe8565b80516121486110f5600061084f565b116121505750565b61216c816020612161610208945190565b818301019101612067565b61208456fea2646970667358221220cb251b105cdb5a5408c5ad97e3c152cc5214d8404e657dd0bd6a3839b25ccab064736f6c63430008110033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101c257806306fdde03146101b9578063248a9ca3146101b05780632f2ff15d146101a757806336568abe1461019e5780634ebb79161461019557806369cff80d1461018c5780636b453c1f146101835780637ae267731461017a57806384a33e63146101715780638980f11f146101685780638bb9c5bf1461015f57806391d1485414610156578063a18a7bfc1461014d578063a217fddf14610144578063d547741f1461013b578063d8baf7cf14610132578063eab90da614610129578063ef99893a14610120578063f2fde38b146101175763f87422540361000e57610112610a3c565b61000e565b50610112610a15565b506101126109d7565b50610112610941565b506101126108c0565b50610112610898565b5061011261086e565b50610112610828565b506101126107fd565b506101126107d6565b506101126107ae565b50610112610756565b5061011261072e565b506101126106df565b50610112610698565b5061011261064f565b50610112610627565b506101126105fa565b5061011261054c565b506101126104e6565b5061011261022e565b600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081165b036101cb57565b90503590610208826101d0565b565b9061021e91602081830312610221576101fb565b90565b610229600080fd5b6101fb565b5034610261575b61025d61024b61024636600461020a565b610a84565b60405191829182901515815260200190565b0390f35b610269600080fd5b610235565b600091031261027957565b610208600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b9060016002830492168015610304575b60208310146102fc57565b6102086102b1565b91607f16916102f1565b8054600093929161032b610321836102e1565b8085529360200190565b916001811690811561037d575060011461034457505050565b6103579192939450600052602060002090565b916000925b8184106103695750500190565b80548484015260209093019260010161035c565b92949550505060ff1916825215156020020190565b9061021e9161030e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761043457604052565b61043c6103c4565b604052565b9061020861045b9261045260405190565b93848092610392565b03836103f4565b61021e911561044157610473610281565b610441565b61021e60006002610462565b60005b8381106104975750506000910152565b8181015183820152602001610487565b6104c861039c6020936104d1936104bc815190565b80835293849260200190565b95869101610484565b0190565b602080825261021e929101906104a7565b503461050f575b6104f836600461026e565b61025d610503610478565b604051918291826104d5565b610517600080fd5b6104ed565b806101f4565b905035906102088261051c565b9061021e916020818303121561052257610547600080fd5b610522565b503461057a575b61025d61056961056436600461052f565b610bb4565b6040515b9182918290815260200190565b610582600080fd5b610553565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff81166101f4565b90503590610208826105a0565b919061021e906040848203126105ed575b6105e48185610522565b936020016105bc565b6105f5600080fd5b6105da565b503461061a575b61061561060f3660046105c9565b90610bf3565b604051005b610622600080fd5b610601565b5034610642575b61061561063c3660046105c9565b90610e2a565b61064a600080fd5b61062e565b5034610669575b61061561066436600461052f565b61163d565b610671600080fd5b610656565b61021e916008021c81565b9061021e9154610676565b61021e60006001610681565b50346106b5575b6106aa36600461026e565b61025d61056961068c565b6106bd600080fd5b61069f565b9061021e91602081830312156105bc576106da600080fd5b6105bc565b50346106f9575b6106156106f43660046106c2565b611d35565b610701600080fd5b6106e6565b919061021e90604084820312610721575b6105e481856105bc565b610729600080fd5b610717565b5034610749575b610615610743366004610706565b906114cf565b610751600080fd5b610735565b5034610770575b61061561076b36600461052f565b611497565b610778600080fd5b61075d565b919061021e906040848203126107a1575b61079881856105bc565b93602001610522565b6107a9600080fd5b61078e565b50346107c9575b6106156107c336600461077d565b906115ab565b6107d1600080fd5b6107b5565b50346107f0575b6106156107eb36600461052f565b611d89565b6107f8600080fd5b6107dd565b503461081b575b61025d61024b6108153660046105c9565b90610b84565b610823600080fd5b610804565b5034610842575b61061561083d3660046106c2565b611903565b61084a600080fd5b61082f565b61021e61021e61021e9290565b61021e600061084f565b61021e61085c565b503461088b575b61088036600461026e565b61025d610569610866565b610893600080fd5b610875565b50346108b3575b6106156108ad3660046105c9565b90610d94565b6108bb600080fd5b61089f565b50346108da575b6106156108d53660046106c2565b611d5f565b6108e2600080fd5b6108c7565b919060a083820312610934575b6108fe8184610522565b9261090c8260208301610522565b9261021e61091d84604085016105bc565b9361092b81606086016105bc565b936080016105bc565b61093c600080fd5b6108f4565b503461095f575b6106156109563660046108e7565b93929092611705565b610967600080fd5b610948565b909160608284031261099d575b61021e6109868484610522565b9361099481602086016105bc565b936040016105bc565b6109a5600080fd5b610979565b908152604081019291610208916020905b019073ffffffffffffffffffffffffffffffffffffffff169052565b5034610a08575b6109f26109ec36600461096c565b91611646565b9061025d6109ff60405190565b928392836109aa565b610a10600080fd5b6109de565b5034610a2f575b610615610a2a3660046106c2565b611d93565b610a37600080fd5b610a1c565b5034610a77575b610a4e36600461026e565b61025d7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610569565b610a7f600080fd5b610a43565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610ad4575090565b61021e91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61058761021e61021e9273ffffffffffffffffffffffffffffffffffffffff1690565b61021e90610b30565b61021e90610b53565b90610b2290610b5c565b61021e905b60ff1690565b61021e9054610b6f565b61021e91610b9e91610b9860009182610b20565b01610b65565b610b7a565b61021e9081565b61021e9054610ba3565b6001610bcd61021e92610bc5600090565b506000610b20565b01610baa565b9061020891610be9610be482610bb4565b610bfd565b9061020891610e87565b9061020891610bd3565b610208903390610cbc565b61021e61021e61021e9273ffffffffffffffffffffffffffffffffffffffff1690565b61021e9061084f565b6104d1610c4c92602092610c46815190565b94859290565b93849101610484565b610c9361021e9392610c8d610c8d937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b90610c34565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b90610cce610cca8284610b84565b1590565b610cd6575050565b610d759161021e610d0f610d09610cef610d4395610b53565b610d03610cfd601492610c08565b9161084f565b90611168565b92610c2b565b610d1e602091610d038361084f565b92610d37610d2b60405190565b94859384019283610c55565b908103825203826103f4565b6040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016104d5565b0390fd5b9061020891610d8a610be482610bb4565b9061020891610efd565b9061020891610d79565b15610da557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b6102089190610e58610e3b33610587565b73ffffffffffffffffffffffffffffffffffffffff841614610d9e565b610efd565b9060ff905b9181191691161790565b90610e7c61021e610e8392151590565b8254610e5d565b9055565b90610e95610cca8284610b84565b610e9d575050565b610eb76001610eb2836000610b988782610b20565b610e6c565b3390610eed610ee7610ee77f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610b5c565b92610ef760405190565b600090a4565b90610f088183610b84565b610f10575050565b610f246000610eb28382610b988782610b20565b3390610eed610ee7610ee77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810292918115918404141715610f9757565b610208610f54565b91908201809211610f9757565b90610208610fb960405190565b92836103f4565b6104d160209167ffffffffffffffff8111610ffd57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b61039c6103c4565b9061101761101283610fc0565b610fac565b918252565b369037565b9061020861103761103184611005565b93610fc0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0016020840161101c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060016020916110a0845190565b8110156110ae575b02010190565b6110b6611062565b6110a8565b60019080156110c8570390565b6110d0610f54565b0390565b610b7461021e61021e9290565b61021e906110f96110f561021e9460ff1690565b9190565b901c90565b1561110557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610d75600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b9190600290611199611194611185836111808661084f565b610f84565b61118e8561084f565b90610f9f565b611021565b9160009160306111b16111ab8561084f565b86611092565b536112056111fc7f7800000000000000000000000000000000000000000000000000000000000000926111806001958695881a6111f66111f08861084f565b8b611092565b5361084f565b61118e8361084f565b915b611228575b505061021e92936112226110f561021e9361084f565b146110fe565b90946112338261084f565b8611156112bf576112ac6112a6839261128961126c7f303132333435363738396162636465660000000000000000000000000000000090565b611276600f61084f565b831660108110156112b2575b1a60f81b90565b861a6112958a89611092565b536112a060046110d4565b906110e1565b966110bb565b91611207565b6112ba611062565b611282565b9461120c565b156112cc57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b61020890611388611383335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610b84565b6112c5565b611432565b1561139457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90610e62565b9061142b61021e610e839261084f565b82546113f3565b61144761143f600061084f565b82141561138d565b61145281600161141b565b61145b30610b5c565b6114926114887ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610b5c565b9261056d60405190565b0390a2565b61020890611351565b61020891906114b16113833361135d565b906114be61020892610b5c565b906114c9600061084f565b91611eec565b90610208916114a0565b61020891906114ea6113833361135d565b611555565b156114f657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b61156a611562600061084f565b835b116114ef565b61157e8261157783610b5c565b3390611e18565b6114926114887f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610b5c565b90610208916114d9565b610208906115c56113833361135d565b6115ed565b506040513d6000823e3d90fd5b61058761021e61021e9290565b61021e906115d7565b61157e60006116046115fe8261084f565b84611564565b808080808661161a61161533610b5c565b610b5c565b828215611634575bf16115e45761162f6115ca565b6115e4565b506108fc611622565b610208906115b5565b61165192919061190c565b9091565b905051906102088261051c565b9061021e91602081830312156116555761167a600080fd5b611655565b91908203918211610f9757565b1561169357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606490fd5b9081526040810192916102089160200152565b936117d66117de9161171961161587610b5c565b906370a082319161172960405190565b926117348160e01b90565b845273ffffffffffffffffffffffffffffffffffffffff831660048501528888888c602088602481895afa9788156118a3575b600098611867575b508660209694611798946117bc99979461178894611c1c565b6040519586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa90811561185a575b60009161182c575b5061167f565b82111561168c565b61181161180b7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610b5c565b93610b5c565b9361182761181e60405190565b928392836116f2565b0390a3565b61184d915060203d8111611853575b61184581836103f4565b810190611662565b386117d0565b503d61183b565b6118626115ca565b6117c8565b6117889198509660209694611798948297946118926117bc9b8b3d81116118535761184581836103f4565b9b945094979950945094965061176f565b6118ab6115ca565b611767565b610208906118c06113833361135d565b6118f8565b9073ffffffffffffffffffffffffffffffffffffffff90610e62565b906118f161021e610e8392610b5c565b82546118c5565b6102089060036118e1565b610208906118b0565b60009384939092909173ffffffffffffffffffffffffffffffffffffffff831673ffffffffffffffffffffffffffffffffffffffff8316141580611963575b61195457505050565b909192945061165193506119cc565b5061196e600061084f565b81141561194b565b90505190610208826105a0565b9061021e91602081830312156119765761199b600080fd5b611976565b73ffffffffffffffffffffffffffffffffffffffff9091168152604081019291610208916020906109bb565b90611a3492939160206119dd600090565b95611a0a6116157f0000000000000000000000000000000000000000000000000000000000000000610b5c565b611a2863e6a43905611a1b60405190565b9889948593849360e01b90565b835288600484016119a0565b03915afa938415611b25575b600094611af5575b5083611a5761058760006115e4565b73ffffffffffffffffffffffffffffffffffffffff821603611a7857505050565b602092939550611615611a8a91610b5c565b611aab63f140a35a611ab6611a9e60405190565b9687958694859460e01b90565b8452600484016109aa565b03915afa908115611ae8575b600091611acd575091565b611ae5915060203d81116118535761184581836103f4565b91565b611af06115ca565b611ac2565b611b1791945060203d8111611b1e575b611b0f81836103f4565b810190611983565b9238611a48565b503d611b05565b611b2d6115ca565b611a40565b15611b3957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e737566666963656e7420616d6f756e74206f7574000000000000000000006044820152606490fd5b61021e90610587565b61021e9054611b98565b61020894611bf282989795611bd5608096611bce611bff97600060a08901980152565b60208c0152565b73ffffffffffffffffffffffffffffffffffffffff1660408a0152565b87820360608901526104a7565b94019073ffffffffffffffffffffffffffffffffffffffff169052565b91611c60611c4685610587611c38611c3e9886611ccd996119cc565b98909690565b861015611b32565b9173ffffffffffffffffffffffffffffffffffffffff1690565b10600090600014611d205750611c83611615611c7c600061084f565b9294610b5c565b611cc2636e1fdd7f9560009687958692611c9f6111948561084f565b611ca96003611ba1565b91873b15611d13575b6040519a8b998a98899760e01b90565b875260048701611bab565b03925af18015611d06575b611ce0575050565b8161020892903d10611cff575b611cf781836103f4565b81019061026e565b503d611ced565b611d0e6115ca565b611cd8565b611d1b600080fd5b611cb2565b611615611d2f611c839261084f565b94610b5c565b610208907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610bf3565b610208907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610d94565b610208903361063c565b610208903390611dab611da461085c565b9182610bf3565b610e2a565b611dc9611dc361021e9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916102089160200152565b611e5b600492611e4c61020895611e3263a9059cbb611db0565b92611e3c60405190565b9687946020860190815201611dee565b602082018103825203836103f4565b612110565b15611e6757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b611e5b600492611e4c61020895611f19600084611f088261084f565b8414918215611f26575b5050611e60565b611e3263095ea7b3611db0565b9091506020611f3489610b5c565b63dd62ed3e90611f60611f4630610b5c565b92611f6b611f5360405190565b9788958694859460e01b90565b8452600484016119a0565b03915afa918215611fbc575b600092611f94575b506110f5611f8c9161084f565b148438611f12565b611f8c919250611fb46110f59160203d81116118535761184581836103f4565b929150611f7f565b611fc46115ca565b611f77565b3d15611fe357611fd83d611005565b903d6000602084013e565b606090565b15611fef57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610d75600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101f4565b9050519061020882612052565b9061021e916020818303121561205a5761207f600080fd5b61205a565b1561208b57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b60009161211d8392610b5c565b9082602082019151925af1612139612133611fc9565b91611fe8565b80516121486110f5600061084f565b116121505750565b61216c816020612161610208945190565b818301019101612067565b61208456fea2646970667358221220cb251b105cdb5a5408c5ad97e3c152cc5214d8404e657dd0bd6a3839b25ccab064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2260,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2262,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2702,
        "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
        "label": "referrer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/CamelotAdapter.sol:CamelotAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}