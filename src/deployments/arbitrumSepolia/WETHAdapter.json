{
  "address": "0x9CE1C5E4940824B43f89954EeaC86fd232721D00",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wNative",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x908e5fcd34964d68fc0721daa92a59c30ebee106d67224be2ffe569f229c444a",
  "receipt": {
    "to": null,
    "from": "0x01Bb7B44cc398AaA2b76Ac6253F0F5634279Db9D",
    "contractAddress": "0x9CE1C5E4940824B43f89954EeaC86fd232721D00",
    "transactionIndex": 2,
    "gasUsed": "1816911",
    "logsBloom": "0x
    "blockHash": "0xce484691d71da19442c77823ab2239ebd45b850d8f2bb92fd8d586d8109ebdf8",
    "transactionHash": "0x908e5fcd34964d68fc0721daa92a59c30ebee106d67224be2ffe569f229c444a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 18826535,
        "transactionHash": "0x908e5fcd34964d68fc0721daa92a59c30ebee106d67224be2ffe569f229c444a",
        "address": "0x9CE1C5E4940824B43f89954EeaC86fd232721D00",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xce484691d71da19442c77823ab2239ebd45b850d8f2bb92fd8d586d8109ebdf8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 18826535,
        "transactionHash": "0x908e5fcd34964d68fc0721daa92a59c30ebee106d67224be2ffe569f229c444a",
        "address": "0x9CE1C5E4940824B43f89954EeaC86fd232721D00",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d",
          "0x00000000000000000000000001bb7b44cc398aaa2b76ac6253f0f5634279db9d"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xce484691d71da19442c77823ab2239ebd45b850d8f2bb92fd8d586d8109ebdf8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 18826535,
        "transactionHash": "0x908e5fcd34964d68fc0721daa92a59c30ebee106d67224be2ffe569f229c444a",
        "address": "0x9CE1C5E4940824B43f89954EeaC86fd232721D00",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000009ce1c5e4940824b43f89954eeac86fd232721d00"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000013880",
        "logIndex": 7,
        "blockHash": "0xce484691d71da19442c77823ab2239ebd45b850d8f2bb92fd8d586d8109ebdf8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 18826535,
        "transactionHash": "0x908e5fcd34964d68fc0721daa92a59c30ebee106d67224be2ffe569f229c444a",
        "address": "0x9CE1C5E4940824B43f89954EeaC86fd232721D00",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000009ce1c5e4940824b43f89954eeac86fd232721d00"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000013880",
        "logIndex": 8,
        "blockHash": "0xce484691d71da19442c77823ab2239ebd45b850d8f2bb92fd8d586d8109ebdf8"
      }
    ],
    "blockNumber": 18826535,
    "cumulativeGasUsed": "2061410",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x980B62Da83eFf3D4576C647993b0c1D7faf17c73",
    80000
  ],
  "solcInputHash": "3d21a2ae1738a87aecb8dd4ff3b9dbac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/WNativeAdapter.sol\":\"WNativeAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x107a35cefab5921f72dc79a2035e4abedf6975b2569649e2029b694019601b59\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/WNativeAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../YakAdapter.sol\\\";\\n\\ncontract WNativeAdapter is YakAdapter {\\n    address internal immutable WNATIVE;\\n\\n    constructor(\\n        address _wNative,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(\\\"WAvaxAdapter\\\", _swapGasEstimate) {\\n        WNATIVE = _wNative;\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 amountOut) {\\n        if (_tokenIn == WNATIVE && _tokenOut == WNATIVE)\\n            amountOut = _amountIn;\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256,\\n        address,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        _returnTo(_tokenOut, _amountIn, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xebe86fc9a4885ab56eface44b75d734aef7184b3f321dab4dbeb74138605f3af\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052346200003b575b62000020620000196200012f565b90620001d8565b604051611dab620007a08239608051816118390152611dab90f35b62000044600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008857604052565b620000926200004f565b604052565b90620000ae620000a660405190565b928362000066565b565b6001600160a01b031690565b90565b6001600160a01b0381165b036200004a57565b90505190620000ae82620000bf565b80620000ca565b90505190620000ae82620000e1565b9190620000bc9060408482031262000120575b620001168185620000d2565b93602001620000e8565b62000129600080fd5b6200010a565b620001526200256b80380380620001468162000097565b928339810190620000f7565b9091565b60209062000177906001600160401b0381116200017b57601f01601f191690565b0190565b620001856200004f565b601f01601f191690565b90620001a56200019f8362000156565b62000097565b918252565b620001b6600c6200018f565b6b2ba0bb30bc20b230b83a32b960a11b602082015290565b620000bc620001aa565b90620000ae91620001f382620001ed620001ce565b620001fc565b60805262000794565b9062000216620000ae926200021062000238565b620005de565b62000794565b620000bc620000bc620000bc9290565b620000bc60006200021c565b620000ae3362000252816200024c6200022c565b62000263565b6000805160206200254b8339815191525b90620000ae91620002e5565b905b600052602052604060002090565b620000bc90620000b0906001600160a01b031682565b620000bc906200027f565b620000bc9062000295565b906200027190620002a0565b9060ff905b9181191691161790565b90620002d9620000bc620002e192151590565b8254620002b7565b9055565b90620002fa620002f6828462000374565b1590565b62000303575050565b620003296001620003238360006200031c87826200026f565b01620002ab565b620002c6565b3390620003636200035c6200035c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92620002a0565b926200036e60405190565b600090a4565b620000bc916200038c916200031c600091826200026f565b5460ff1690565b156200039b57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d650000000000000000000000006044820152606490fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156200041e575b60208310146200041457565b620000ae620003e0565b91607f169162000408565b9160001960089290920291821b911b620002bc565b919062000453620000bc620002e1936200021c565b90835462000429565b620000ae916000916200043e565b81811062000476575050565b806200048660006001936200045c565b016200046a565b9190601f81116200049d57505050565b620004b1620000ae93600052602060002090565b906020601f840181900483019310620004d5575b6020601f9091010401906200046a565b9091508190620004c5565b90620004ea815190565b906001600160401b038211620005c2575b62000513826200050c8554620003f7565b856200048d565b602090601f83116001146200055257620002e192916000918362000546575b5050600019600883021c1916906002021790565b01519050388062000532565b601f198316916200056885600052602060002090565b9260005b818110620005a9575091600293918560019694106200058f575b50505002019055565b01516000196008601f8516021c1916905538808062000586565b919360206001819287870151815501950192016200056c565b620005cc6200004f565b620004fb565b90620000ae91620004e0565b620000ae906200060c620005f0825190565b620006046200060060006200021c565b9190565b141562000393565b6002620005d2565b156200061c57565b60405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608490fd5b620000ae906200069c62000696336000805160206200254b83398151915262000374565b62000614565b62000716565b15620006aa57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b9060001990620002bc565b906200070e620000bc620002e1926200021c565b8254620006ef565b6200072f6200072660006200021c565b821415620006a2565b6200073c816001620006fa565b6200074730620002a0565b6200078f620007777ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92620002a0565b926200078260405190565b9182918290815260200190565b0390a2565b620000ae906200067256fe6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101ae57806306fdde03146101a5578063248a9ca31461019c5780632f2ff15d1461019357806336568abe1461018a5780634ebb79161461018157806369cff80d146101785780636b453c1f1461016f5780637ae267731461016657806384a33e631461015d5780638980f11f146101545780638bb9c5bf1461014b57806391d1485414610142578063a217fddf14610139578063d547741f14610130578063d8baf7cf14610127578063eab90da61461011e578063ef99893a14610115578063f2fde38b1461010c5763f87422540361000e576101076109c1565b61000e565b5061010761099a565b5061010761096f565b50610107610906565b50610107610885565b5061010761085d565b50610107610833565b506101076107e9565b506101076107c2565b5061010761079a565b50610107610742565b5061010761071a565b506101076106cb565b50610107610684565b5061010761063b565b50610107610613565b506101076105e6565b50610107610538565b506101076104d2565b5061010761021a565b600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081165b036101b757565b905035906101f4826101bc565b565b9061020a9160208183031261020d576101e7565b90565b610215600080fd5b6101e7565b503461024d575b6102496102376102323660046101f6565b610a09565b60405191829182901515815260200190565b0390f35b610255600080fd5b610221565b600091031261026557565b6101f4600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b90600160028304921680156102f0575b60208310146102e857565b6101f461029d565b91607f16916102dd565b8054600093929161031761030d836102cd565b8085529360200190565b9160018116908115610369575060011461033057505050565b6103439192939450600052602060002090565b916000925b8184106103555750500190565b805484840152602090930192600101610348565b92949550505060ff1916825215156020020190565b9061020a916102fa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761042057604052565b6104286103b0565b604052565b906101f46104479261043e60405190565b9384809261037e565b03836103e0565b61020a911561042d5761045f61026d565b61042d565b61020a6000600261044e565b60005b8381106104835750506000910152565b8181015183820152602001610473565b6104b46103886020936104bd936104a8815190565b80835293849260200190565b95869101610470565b0190565b602080825261020a92910190610493565b50346104fb575b6104e436600461025a565b6102496104ef610464565b604051918291826104c1565b610503600080fd5b6104d9565b806101e0565b905035906101f482610508565b9061020a916020818303121561050e57610533600080fd5b61050e565b5034610566575b61024961055561055036600461051b565b610b39565b6040515b9182918290815260200190565b61056e600080fd5b61053f565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff81166101e0565b905035906101f48261058c565b919061020a906040848203126105d9575b6105d0818561050e565b936020016105a8565b6105e1600080fd5b6105c6565b5034610606575b6106016105fb3660046105b5565b90610b78565b604051005b61060e600080fd5b6105ed565b503461062e575b6106016106283660046105b5565b90610daf565b610636600080fd5b61061a565b5034610655575b61060161065036600461051b565b6115c2565b61065d600080fd5b610642565b61020a916008021c81565b9061020a9154610662565b61020a6000600161066d565b50346106a1575b61069636600461025a565b610249610555610678565b6106a9600080fd5b61068b565b9061020a91602081830312156105a8576106c6600080fd5b6105a8565b50346106e5575b6106016106e03660046106ae565b611918565b6106ed600080fd5b6106d2565b919061020a9060408482031261070d575b6105d081856105a8565b610715600080fd5b610703565b5034610735575b61060161072f3660046106f2565b90611454565b61073d600080fd5b610721565b503461075c575b61060161075736600461051b565b61141c565b610764600080fd5b610749565b919061020a9060408482031261078d575b61078481856105a8565b9360200161050e565b610795600080fd5b61077a565b50346107b5575b6106016107af366004610769565b90611530565b6107bd600080fd5b6107a1565b50346107dc575b6106016107d736600461051b565b61196c565b6107e4600080fd5b6107c9565b5034610807575b6102496102376108013660046105b5565b90610b09565b61080f600080fd5b6107f0565b61020a61020a61020a9290565b61020a6000610814565b61020a610821565b5034610850575b61084536600461025a565b61024961055561082b565b610858600080fd5b61083a565b5034610878575b6106016108723660046105b5565b90610d19565b610880600080fd5b610864565b503461089f575b61060161089a3660046106ae565b611942565b6108a7600080fd5b61088c565b919060a0838203126108f9575b6108c3818461050e565b926108d1826020830161050e565b9261020a6108e284604085016105a8565b936108f081606086016105a8565b936080016105a8565b610901600080fd5b6108b9565b5034610924575b61060161091b3660046108ac565b93929092611686565b61092c600080fd5b61090d565b9091606082840312610962575b61020a61094b848461050e565b9361095981602086016105a8565b936040016105a8565b61096a600080fd5b61093e565b503461098d575b610249610555610987366004610931565b916115cb565b610995600080fd5b610976565b50346109b4575b6106016109af3660046106ae565b611976565b6109bc600080fd5b6109a1565b50346109fc575b6109d336600461025a565b6102497f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610555565b610a04600080fd5b6109c8565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610a59575090565b61020a91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61057361020a61020a9273ffffffffffffffffffffffffffffffffffffffff1690565b61020a90610ab5565b61020a90610ad8565b90610aa790610ae1565b61020a905b60ff1690565b61020a9054610af4565b61020a91610b2391610b1d60009182610aa5565b01610aea565b610aff565b61020a9081565b61020a9054610b28565b6001610b5261020a92610b4a600090565b506000610aa5565b01610b2f565b906101f491610b6e610b6982610b39565b610b82565b906101f491610e0c565b906101f491610b58565b6101f4903390610c41565b61020a61020a61020a9273ffffffffffffffffffffffffffffffffffffffff1690565b61020a90610814565b6104bd610bd192602092610bcb815190565b94859290565b93849101610470565b610c1861020a9392610c12610c12937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b90610bb9565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b90610c53610c4f8284610b09565b1590565b610c5b575050565b610cfa9161020a610c94610c8e610c74610cc895610ad8565b610c88610c82601492610b8d565b91610814565b906110ed565b92610bb0565b610ca3602091610c8883610814565b92610cbc610cb060405190565b94859384019283610bda565b908103825203826103e0565b6040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016104c1565b0390fd5b906101f491610d0f610b6982610b39565b906101f491610e82565b906101f491610cfe565b15610d2a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b6101f49190610ddd610dc033610573565b73ffffffffffffffffffffffffffffffffffffffff841614610d23565b610e82565b9060ff905b9181191691161790565b90610e0161020a610e0892151590565b8254610de2565b9055565b90610e1a610c4f8284610b09565b610e22575050565b610e3c6001610e37836000610b1d8782610aa5565b610df1565b3390610e72610e6c610e6c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610ae1565b92610e7c60405190565b600090a4565b90610e8d8183610b09565b610e95575050565b610ea96000610e378382610b1d8782610aa5565b3390610e72610e6c610e6c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810292918115918404141715610f1c57565b6101f4610ed9565b91908201809211610f1c57565b906101f4610f3e60405190565b92836103e0565b6104bd60209167ffffffffffffffff8111610f8257601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b6103886103b0565b90610f9c610f9783610f45565b610f31565b918252565b369037565b906101f4610fbc610fb684610f8a565b93610f45565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160208401610fa1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906001602091611025845190565b811015611033575b02010190565b61103b610fe7565b61102d565b600190801561104d570390565b611055610ed9565b0390565b610af961020a61020a9290565b61020a9061107e61107a61020a9460ff1690565b9190565b901c90565b1561108a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610cfa600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b919060029061111e61111961110a8361110586610814565b610f09565b61111385610814565b90610f24565b610fa6565b91600091603061113661113085610814565b86611017565b5361118a6111817f7800000000000000000000000000000000000000000000000000000000000000926111056001958695881a61117b61117588610814565b8b611017565b53610814565b61111383610814565b915b6111ad575b505061020a92936111a761107a61020a93610814565b14611083565b90946111b882610814565b8611156112445761123161122b839261120e6111f17f303132333435363738396162636465660000000000000000000000000000000090565b6111fb600f610814565b83166010811015611237575b1a60f81b90565b861a61121a8a89611017565b536112256004611059565b90611066565b96611040565b9161118c565b61123f610fe7565b611207565b94611191565b1561125157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b6101f49061130d611308335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610b09565b61124a565b6113b7565b1561131957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90610de7565b906113b061020a610e0892610814565b8254611378565b6113cc6113c46000610814565b821415611312565b6113d78160016113a0565b6113e030610ae1565b61141761140d7ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610ae1565b9261055960405190565b0390a2565b6101f4906112d6565b6101f49190611436611308336112e2565b906114436101f492610ae1565b9061144e6000610814565b91611acf565b906101f491611425565b6101f4919061146f611308336112e2565b6114da565b1561147b57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b6114ef6114e76000610814565b835b11611474565b611503826114fc83610ae1565b33906119fb565b61141761140d7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610ae1565b906101f49161145e565b6101f49061154a611308336112e2565b611572565b506040513d6000823e3d90fd5b61057361020a61020a9290565b61020a9061155c565b611503600061158961158382610814565b846114e9565b808080808661159f61159a33610ae1565b610ae1565b8282156115b9575bf1611569576115b461154f565b611569565b506108fc6115a7565b6101f49061153a565b61020a929190611831565b905051906101f482610508565b9061020a91602081830312156115d6576115fb600080fd5b6115d6565b91908203918211610f1c57565b1561161457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606490fd5b9081526040810192916101f49160200152565b9361175761175f9161169a61159a87610ae1565b906370a08231916116aa60405190565b926116b58160e01b90565b845273ffffffffffffffffffffffffffffffffffffffff831660048501528888888c602088602481895afa978815611824575b6000986117e8575b5086602096946117199461173d999794611709946118ce565b6040519586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa9081156117db575b6000916117ad575b50611600565b82111561160d565b61179261178c7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610ae1565b93610ae1565b936117a861179f60405190565b92839283611673565b0390a3565b6117ce915060203d81116117d4575b6117c681836103e0565b8101906115e3565b38611751565b503d6117bc565b6117e361154f565b611749565b61170991985096602096946117199482979461181361173d9b8b3d81116117d4576117c681836103e0565b9b94509497995094509496506116f0565b61182c61154f565b6116e8565b6000939290917f0000000000000000000000000000000000000000000000000000000000000000919061188f73ffffffffffffffffffffffffffffffffffffffff84165b9173ffffffffffffffffffffffffffffffffffffffff1690565b1491826118a4575b50506118a05750565b9150565b9091506118c69073ffffffffffffffffffffffffffffffffffffffff16611875565b143880611897565b9150506101f4926118de30610ae1565b6118fd73ffffffffffffffffffffffffffffffffffffffff8316611875565b0361190757505050565b6119136101f493610ae1565b6119fb565b6101f4907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610b78565b6101f4907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610d19565b6101f49033610628565b6101f490339061198e611987610821565b9182610b78565b610daf565b6119ac6119a661020a9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916101f49160200152565b611a3e600492611a2f6101f495611a1563a9059cbb611993565b92611a1f60405190565b96879460208601908152016119d1565b602082018103825203836103e0565b611d14565b15611a4a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b611a3e600492611a2f6101f495611afc600084611aeb82610814565b8414918215611b09575b5050611a43565b611a1563095ea7b3611993565b9091506020611b1789610ae1565b63dd62ed3e90611b43611b2930610ae1565b92611b6f611b3660405190565b9788958694859460e01b90565b845273ffffffffffffffffffffffffffffffffffffffff90811660048501521660248301526044820190565b03915afa918215611bc0575b600092611b98575b5061107a611b9091610814565b148438611af5565b611b90919250611bb861107a9160203d81116117d4576117c681836103e0565b929150611b83565b611bc861154f565b611b7b565b3d15611be757611bdc3d610f8a565b903d6000602084013e565b606090565b15611bf357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610cfa600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101e0565b905051906101f482611c56565b9061020a9160208183031215611c5e57611c83600080fd5b611c5e565b15611c8f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b600091611d218392610ae1565b9082602082019151925af1611d3d611d37611bcd565b91611bec565b8051611d4c61107a6000610814565b11611d545750565b611d70816020611d656101f4945190565b818301019101611c6b565b611c8856fea2646970667358221220870881822ff2c26053a86fe860ad44e638da32718cfc293957b455369fe5cc7d64736f6c63430008110033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436101561001e575b361561001c5761001c600080fd5b005b60003560e01c806301ffc9a7146101ae57806306fdde03146101a5578063248a9ca31461019c5780632f2ff15d1461019357806336568abe1461018a5780634ebb79161461018157806369cff80d146101785780636b453c1f1461016f5780637ae267731461016657806384a33e631461015d5780638980f11f146101545780638bb9c5bf1461014b57806391d1485414610142578063a217fddf14610139578063d547741f14610130578063d8baf7cf14610127578063eab90da61461011e578063ef99893a14610115578063f2fde38b1461010c5763f87422540361000e576101076109c1565b61000e565b5061010761099a565b5061010761096f565b50610107610906565b50610107610885565b5061010761085d565b50610107610833565b506101076107e9565b506101076107c2565b5061010761079a565b50610107610742565b5061010761071a565b506101076106cb565b50610107610684565b5061010761063b565b50610107610613565b506101076105e6565b50610107610538565b506101076104d2565b5061010761021a565b600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081165b036101b757565b905035906101f4826101bc565b565b9061020a9160208183031261020d576101e7565b90565b610215600080fd5b6101e7565b503461024d575b6102496102376102323660046101f6565b610a09565b60405191829182901515815260200190565b0390f35b610255600080fd5b610221565b600091031261026557565b6101f4600080fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b90600160028304921680156102f0575b60208310146102e857565b6101f461029d565b91607f16916102dd565b8054600093929161031761030d836102cd565b8085529360200190565b9160018116908115610369575060011461033057505050565b6103439192939450600052602060002090565b916000925b8184106103555750500190565b805484840152602090930192600101610348565b92949550505060ff1916825215156020020190565b9061020a916102fa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761042057604052565b6104286103b0565b604052565b906101f46104479261043e60405190565b9384809261037e565b03836103e0565b61020a911561042d5761045f61026d565b61042d565b61020a6000600261044e565b60005b8381106104835750506000910152565b8181015183820152602001610473565b6104b46103886020936104bd936104a8815190565b80835293849260200190565b95869101610470565b0190565b602080825261020a92910190610493565b50346104fb575b6104e436600461025a565b6102496104ef610464565b604051918291826104c1565b610503600080fd5b6104d9565b806101e0565b905035906101f482610508565b9061020a916020818303121561050e57610533600080fd5b61050e565b5034610566575b61024961055561055036600461051b565b610b39565b6040515b9182918290815260200190565b61056e600080fd5b61053f565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff81166101e0565b905035906101f48261058c565b919061020a906040848203126105d9575b6105d0818561050e565b936020016105a8565b6105e1600080fd5b6105c6565b5034610606575b6106016105fb3660046105b5565b90610b78565b604051005b61060e600080fd5b6105ed565b503461062e575b6106016106283660046105b5565b90610daf565b610636600080fd5b61061a565b5034610655575b61060161065036600461051b565b6115c2565b61065d600080fd5b610642565b61020a916008021c81565b9061020a9154610662565b61020a6000600161066d565b50346106a1575b61069636600461025a565b610249610555610678565b6106a9600080fd5b61068b565b9061020a91602081830312156105a8576106c6600080fd5b6105a8565b50346106e5575b6106016106e03660046106ae565b611918565b6106ed600080fd5b6106d2565b919061020a9060408482031261070d575b6105d081856105a8565b610715600080fd5b610703565b5034610735575b61060161072f3660046106f2565b90611454565b61073d600080fd5b610721565b503461075c575b61060161075736600461051b565b61141c565b610764600080fd5b610749565b919061020a9060408482031261078d575b61078481856105a8565b9360200161050e565b610795600080fd5b61077a565b50346107b5575b6106016107af366004610769565b90611530565b6107bd600080fd5b6107a1565b50346107dc575b6106016107d736600461051b565b61196c565b6107e4600080fd5b6107c9565b5034610807575b6102496102376108013660046105b5565b90610b09565b61080f600080fd5b6107f0565b61020a61020a61020a9290565b61020a6000610814565b61020a610821565b5034610850575b61084536600461025a565b61024961055561082b565b610858600080fd5b61083a565b5034610878575b6106016108723660046105b5565b90610d19565b610880600080fd5b610864565b503461089f575b61060161089a3660046106ae565b611942565b6108a7600080fd5b61088c565b919060a0838203126108f9575b6108c3818461050e565b926108d1826020830161050e565b9261020a6108e284604085016105a8565b936108f081606086016105a8565b936080016105a8565b610901600080fd5b6108b9565b5034610924575b61060161091b3660046108ac565b93929092611686565b61092c600080fd5b61090d565b9091606082840312610962575b61020a61094b848461050e565b9361095981602086016105a8565b936040016105a8565b61096a600080fd5b61093e565b503461098d575b610249610555610987366004610931565b916115cb565b610995600080fd5b610976565b50346109b4575b6106016109af3660046106ae565b611976565b6109bc600080fd5b6109a1565b50346109fc575b6109d336600461025a565b6102497f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610555565b610a04600080fd5b6109c8565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610a59575090565b61020a91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61057361020a61020a9273ffffffffffffffffffffffffffffffffffffffff1690565b61020a90610ab5565b61020a90610ad8565b90610aa790610ae1565b61020a905b60ff1690565b61020a9054610af4565b61020a91610b2391610b1d60009182610aa5565b01610aea565b610aff565b61020a9081565b61020a9054610b28565b6001610b5261020a92610b4a600090565b506000610aa5565b01610b2f565b906101f491610b6e610b6982610b39565b610b82565b906101f491610e0c565b906101f491610b58565b6101f4903390610c41565b61020a61020a61020a9273ffffffffffffffffffffffffffffffffffffffff1690565b61020a90610814565b6104bd610bd192602092610bcb815190565b94859290565b93849101610470565b610c1861020a9392610c12610c12937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b90610bb9565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b90610c53610c4f8284610b09565b1590565b610c5b575050565b610cfa9161020a610c94610c8e610c74610cc895610ad8565b610c88610c82601492610b8d565b91610814565b906110ed565b92610bb0565b610ca3602091610c8883610814565b92610cbc610cb060405190565b94859384019283610bda565b908103825203826103e0565b6040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016104c1565b0390fd5b906101f491610d0f610b6982610b39565b906101f491610e82565b906101f491610cfe565b15610d2a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b6101f49190610ddd610dc033610573565b73ffffffffffffffffffffffffffffffffffffffff841614610d23565b610e82565b9060ff905b9181191691161790565b90610e0161020a610e0892151590565b8254610de2565b9055565b90610e1a610c4f8284610b09565b610e22575050565b610e3c6001610e37836000610b1d8782610aa5565b610df1565b3390610e72610e6c610e6c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610ae1565b92610e7c60405190565b600090a4565b90610e8d8183610b09565b610e95575050565b610ea96000610e378382610b1d8782610aa5565b3390610e72610e6c610e6c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810292918115918404141715610f1c57565b6101f4610ed9565b91908201809211610f1c57565b906101f4610f3e60405190565b92836103e0565b6104bd60209167ffffffffffffffff8111610f8257601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b6103886103b0565b90610f9c610f9783610f45565b610f31565b918252565b369037565b906101f4610fbc610fb684610f8a565b93610f45565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160208401610fa1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906001602091611025845190565b811015611033575b02010190565b61103b610fe7565b61102d565b600190801561104d570390565b611055610ed9565b0390565b610af961020a61020a9290565b61020a9061107e61107a61020a9460ff1690565b9190565b901c90565b1561108a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610cfa600482016020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b919060029061111e61111961110a8361110586610814565b610f09565b61111385610814565b90610f24565b610fa6565b91600091603061113661113085610814565b86611017565b5361118a6111817f7800000000000000000000000000000000000000000000000000000000000000926111056001958695881a61117b61117588610814565b8b611017565b53610814565b61111383610814565b915b6111ad575b505061020a92936111a761107a61020a93610814565b14611083565b90946111b882610814565b8611156112445761123161122b839261120e6111f17f303132333435363738396162636465660000000000000000000000000000000090565b6111fb600f610814565b83166010811015611237575b1a60f81b90565b861a61121a8a89611017565b536112256004611059565b90611066565b96611040565b9161118c565b61123f610fe7565b611207565b94611191565b1561125157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201527f696e7461696e65720000000000000000000000000000000000000000000000006064820152608490fd5b6101f49061130d611308335b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610b09565b61124a565b6113b7565b1561131957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606490fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90610de7565b906113b061020a610e0892610814565b8254611378565b6113cc6113c46000610814565b821415611312565b6113d78160016113a0565b6113e030610ae1565b61141761140d7ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a92610ae1565b9261055960405190565b0390a2565b6101f4906112d6565b6101f49190611436611308336112e2565b906114436101f492610ae1565b9061144e6000610814565b91611acf565b906101f491611425565b6101f4919061146f611308336112e2565b6114da565b1561147b57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f76657200006044820152606490fd5b6114ef6114e76000610814565b835b11611474565b611503826114fc83610ae1565b33906119fb565b61141761140d7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2892610ae1565b906101f49161145e565b6101f49061154a611308336112e2565b611572565b506040513d6000823e3d90fd5b61057361020a61020a9290565b61020a9061155c565b611503600061158961158382610814565b846114e9565b808080808661159f61159a33610ae1565b610ae1565b8282156115b9575bf1611569576115b461154f565b611569565b506108fc6115a7565b6101f49061153a565b61020a929190611831565b905051906101f482610508565b9061020a91602081830312156115d6576115fb600080fd5b6115d6565b91908203918211610f1c57565b1561161457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606490fd5b9081526040810192916101f49160200152565b9361175761175f9161169a61159a87610ae1565b906370a08231916116aa60405190565b926116b58160e01b90565b845273ffffffffffffffffffffffffffffffffffffffff831660048501528888888c602088602481895afa978815611824575b6000986117e8575b5086602096946117199461173d999794611709946118ce565b6040519586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa9081156117db575b6000916117ad575b50611600565b82111561160d565b61179261178c7fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa93610ae1565b93610ae1565b936117a861179f60405190565b92839283611673565b0390a3565b6117ce915060203d81116117d4575b6117c681836103e0565b8101906115e3565b38611751565b503d6117bc565b6117e361154f565b611749565b61170991985096602096946117199482979461181361173d9b8b3d81116117d4576117c681836103e0565b9b94509497995094509496506116f0565b61182c61154f565b6116e8565b6000939290917f0000000000000000000000000000000000000000000000000000000000000000919061188f73ffffffffffffffffffffffffffffffffffffffff84165b9173ffffffffffffffffffffffffffffffffffffffff1690565b1491826118a4575b50506118a05750565b9150565b9091506118c69073ffffffffffffffffffffffffffffffffffffffff16611875565b143880611897565b9150506101f4926118de30610ae1565b6118fd73ffffffffffffffffffffffffffffffffffffffff8316611875565b0361190757505050565b6119136101f493610ae1565b6119fb565b6101f4907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610b78565b6101f4907f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95610d19565b6101f49033610628565b6101f490339061198e611987610821565b9182610b78565b610daf565b6119ac6119a661020a9263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b73ffffffffffffffffffffffffffffffffffffffff90911681526040810192916101f49160200152565b611a3e600492611a2f6101f495611a1563a9059cbb611993565b92611a1f60405190565b96879460208601908152016119d1565b602082018103825203836103e0565b611d14565b15611a4a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608490fd5b611a3e600492611a2f6101f495611afc600084611aeb82610814565b8414918215611b09575b5050611a43565b611a1563095ea7b3611993565b9091506020611b1789610ae1565b63dd62ed3e90611b43611b2930610ae1565b92611b6f611b3660405190565b9788958694859460e01b90565b845273ffffffffffffffffffffffffffffffffffffffff90811660048501521660248301526044820190565b03915afa918215611bc0575b600092611b98575b5061107a611b9091610814565b148438611af5565b611b90919250611bb861107a9160203d81116117d4576117c681836103e0565b929150611b83565b611bc861154f565b611b7b565b3d15611be757611bdc3d610f8a565b903d6000602084013e565b606090565b15611bf357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610cfa600482016020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b8015156101e0565b905051906101f482611c56565b9061020a9160208183031215611c5e57611c83600080fd5b611c5e565b15611c8f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b600091611d218392610ae1565b9082602082019151925af1611d3d611d37611bcd565b91611bec565b8051611d4c61107a6000610814565b11611d545750565b611d70816020611d656101f4945190565b818301019101611c6b565b611c8856fea2646970667358221220870881822ff2c26053a86fe860ad44e638da32718cfc293957b455369fe5cc7d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2899,
        "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2901,
        "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/WNativeAdapter.sol:WNativeAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}